[{"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/index.js":"1","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/Final.js":"2","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/store.js":"3","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/App.js":"4","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/cartReducers.js":"5","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/productReducers.js":"6","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/orderReducers.js":"7","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/userReducers.js":"8","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Footer.js":"9","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/PaymentScreen.js":"10","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/HomeScreen.js":"11","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/LoginScreen.js":"12","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ShippingScreen.js":"13","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/CartScreen.js":"14","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/AdminComScreen.js":"15","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/UserListScreen.js":"16","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProductScreen.js":"17","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/cartConstants.js":"18","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/productConstants.js":"19","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/UserConstants.js":"20","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/RegisterScreen.js":"21","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Header.js":"22","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProfileScreen.js":"23","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/OrderListScreen.js":"24","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/CommunicationScreen.js":"25","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/UserEditScreen.js":"26","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProductListScreen.js":"27","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProductEditScreen.js":"28","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/OrderScreen.js":"29","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/PlaceOrderScreen.js":"30","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/FormContainer.js":"31","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/CheckoutSteps.js":"32","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/orderConstants.js":"33","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Message.js":"34","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/cartActions.js":"35","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/productActions.js":"36","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/SearchBox.js":"37","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Paginate.js":"38","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Loader.js":"39","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/userActions.js":"40","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Meta.js":"41","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/orderActions.js":"42","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/productComponent.js":"43","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/ProductCarousel.js":"44","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Rating.js":"45","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/TransactionScreen.js":"46","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/TransactionListScreen.js":"47","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/PrintOrderScreen.js":"48"},{"size":267,"mtime":1621882819327,"results":"49","hashOfConfig":"50"},{"size":297,"mtime":1621882819319,"results":"51","hashOfConfig":"50"},{"size":2933,"mtime":1632840167723,"results":"52","hashOfConfig":"50"},{"size":3320,"mtime":1632174492454,"results":"53","hashOfConfig":"50"},{"size":1206,"mtime":1621882819327,"results":"54","hashOfConfig":"50"},{"size":4896,"mtime":1632840826128,"results":"55","hashOfConfig":"50"},{"size":4875,"mtime":1633519155680,"results":"56","hashOfConfig":"50"},{"size":5797,"mtime":1631368707614,"results":"57","hashOfConfig":"50"},{"size":416,"mtime":1621882819323,"results":"58","hashOfConfig":"50"},{"size":1990,"mtime":1621882819327,"results":"59","hashOfConfig":"50"},{"size":2776,"mtime":1631896975968,"results":"60","hashOfConfig":"50"},{"size":2832,"mtime":1621882819327,"results":"61","hashOfConfig":"50"},{"size":2862,"mtime":1631899201758,"results":"62","hashOfConfig":"50"},{"size":3277,"mtime":1632564787726,"results":"63","hashOfConfig":"50"},{"size":5460,"mtime":1631898960514,"results":"64","hashOfConfig":"50"},{"size":3575,"mtime":1631899445097,"results":"65","hashOfConfig":"50"},{"size":7831,"mtime":1633175620889,"results":"66","hashOfConfig":"50"},{"size":234,"mtime":1621882819323,"results":"67","hashOfConfig":"50"},{"size":2086,"mtime":1632840743704,"results":"68","hashOfConfig":"50"},{"size":2288,"mtime":1631367328827,"results":"69","hashOfConfig":"50"},{"size":9261,"mtime":1633027154359,"results":"70","hashOfConfig":"50"},{"size":8173,"mtime":1632868833941,"results":"71","hashOfConfig":"50"},{"size":16247,"mtime":1633516894077,"results":"72","hashOfConfig":"50"},{"size":18015,"mtime":1633447668652,"results":"73","hashOfConfig":"50"},{"size":3729,"mtime":1631105467770,"results":"74","hashOfConfig":"50"},{"size":4115,"mtime":1632167409319,"results":"75","hashOfConfig":"50"},{"size":7250,"mtime":1633211934833,"results":"76","hashOfConfig":"50"},{"size":9935,"mtime":1633424974454,"results":"77","hashOfConfig":"50"},{"size":26691,"mtime":1633519647537,"results":"78","hashOfConfig":"50"},{"size":15671,"mtime":1633216951622,"results":"79","hashOfConfig":"50"},{"size":451,"mtime":1621882819323,"results":"80","hashOfConfig":"50"},{"size":1460,"mtime":1621882819323,"results":"81","hashOfConfig":"50"},{"size":2163,"mtime":1631830263471,"results":"82","hashOfConfig":"50"},{"size":273,"mtime":1621882819323,"results":"83","hashOfConfig":"50"},{"size":1752,"mtime":1633216911865,"results":"84","hashOfConfig":"50"},{"size":8831,"mtime":1632850532898,"results":"85","hashOfConfig":"50"},{"size":815,"mtime":1621882819323,"results":"86","hashOfConfig":"50"},{"size":609,"mtime":1621882819323,"results":"87","hashOfConfig":"50"},{"size":330,"mtime":1621882819323,"results":"88","hashOfConfig":"50"},{"size":11285,"mtime":1633186034711,"results":"89","hashOfConfig":"50"},{"size":516,"mtime":1621882819323,"results":"90","hashOfConfig":"50"},{"size":12089,"mtime":1633515102550,"results":"91","hashOfConfig":"50"},{"size":1221,"mtime":1633176183537,"results":"92","hashOfConfig":"50"},{"size":2643,"mtime":1633158543239,"results":"93","hashOfConfig":"50"},{"size":1779,"mtime":1621882819323,"results":"94","hashOfConfig":"50"},{"size":17631,"mtime":1633519239623,"results":"95","hashOfConfig":"50"},{"size":7056,"mtime":1632743867104,"results":"96","hashOfConfig":"50"},{"size":17259,"mtime":1633216713387,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"1o45bix",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"100"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"100"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"100"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"100"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"100"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"100"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"100"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"100"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"100"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"100"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"100"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"100"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"100"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"100"},"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/index.js",[],["209","210"],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/Final.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/store.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/App.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/cartReducers.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/productReducers.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/orderReducers.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/userReducers.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Footer.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/PaymentScreen.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/HomeScreen.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/LoginScreen.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ShippingScreen.js",["211","212"],"import React, {useState,useEffect} from 'react'\n\nimport {Form, Button} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport FormContainer from '../components/FormContainer.js'\nimport CheckoutSteps from '../components/CheckoutSteps.js'\n//import {getUserDetails, updateUserProfile} from '../actions/userActions.js'\nimport {saveShippingAddress} from '../actions/cartActions.js'\n//savePaymentMethod,\n\n\nconst ShippingScreen = ({history}) => {\n  const cart = useSelector(state => state.cart)\n  const {shippingAddress} = cart\n\n\n\n      const[address, setAddress] =useState(shippingAddress.address) //the useState values were all in quotation marks previously\n      const[city, setCity] =useState(shippingAddress.city)\n      const[postalCode,setPostalCode] =useState(shippingAddress.postalCode)\n      const[country,setCountry] =useState(shippingAddress.country)\n\n\n  const dispatch = useDispatch()\n\n  const submitHandler = (e) => {\n    e.preventDefault()\n\n    window.history.pushState(null,'','/')\n    dispatch(saveShippingAddress({address, city, postalCode, country}))\n    history.push('/placeorder')  //once again , this is to redirect the url to the next page\n  }\n\n  const userLogin = useSelector(state => state.userLogin)\n  const {loading,error,userInfo} = userLogin\n\n  useEffect(()=>{  \n    if(!userInfo){\n    history.push(`/login`)\n    }\n\n    if(userInfo && userInfo.isTeller){\n      history.push('/teller/transactionlist')\n   }\n    \n  })\n\n\n      return(\n        <FormContainer>\n         <CheckoutSteps step1 step2/>\n         <h1>Shipping</h1>\n\n         <Form onSubmit={submitHandler}>\n         <Form.Group controlId='address'>\n{/*1*/}\n                <Form.Label>  Address</Form.Label>\n                <Form.Control type='text' placeholder=\"Enter address\" value={address} required onChange={(e)=>setAddress(e.target.value)}></Form.Control>\n\n         </Form.Group>\n\n         <Form.Group controlId='city'>\n{/*2*/}           <Form.Label>  City</Form.Label>\n                <Form.Control type='text' placeholder=\"enter city\" value={city} required onChange={(e)=>setCity(e.target.value)}></Form.Control>\n\n        </Form.Group>\n\n\n        <Form.Group controlId='postalCode'>\n\n{/*3*/}          <Form.Label> Postal Code</Form.Label>\n               <Form.Control type='text' placeholder=\"Enter postal code\" value={postalCode} required onChange={(e)=>setPostalCode(e.target.value)}></Form.Control>\n\n        </Form.Group>\n\n        <Form.Group controlId='country'>\n\n{/*4*/}          <Form.Label>  Country</Form.Label>\n               <Form.Control type='text' placeholder=\"enter country\" value={country} required onChange={(e)=>setCountry(e.target.value)}></Form.Control>\n\n        <Button type='submit' variant='primary'>Continue</Button>\n      </Form.Group>\n\n\n\n         </Form>\n\n\n        </FormContainer>\n      )\n\n\n}\n\nexport default ShippingScreen\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/CartScreen.js",["213","214"],"import React, {useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {Link} from 'react-router-dom'\nimport {Row, Col , ListGroup, Image , Form ,Button, Card} from 'react-bootstrap'\nimport Message from '../components/Message.js'\nimport {addToCart,removeFromCart} from '../actions/cartActions.js'\n\nconst CartScreen = ({match, location, history}) => {\n      const productId = match.params.id\n      const qty =location.search ? Number( location.search.split('=')[1]):1\n\n    const dispatch = useDispatch()\n    const cart = useSelector(state => state.cart)\n\n    const {cartItems} = cart\n    console.log(cart)\n    \n    const userLogin = useSelector(state => state.userLogin)\n  const {loading,error,userInfo} = userLogin\n\n  useEffect(()=>{  \n    if(!userInfo){\n    history.push(`/login`)\n    }\n    else if(userInfo.isMerchant||userInfo.isAdmin){\n     history.push(`/`)\n    }\n\n    if(userInfo && userInfo.isTeller){\n      history.push('/teller/transactionlist')\n   }\n  })\n\n\n    useEffect(()=>{\n     if(productId){\n       dispatch(addToCart(productId ,qty))\n     }\n\n   },[dispatch,productId,qty])\n\n   const removeFromCartHandler =(id) => {dispatch(removeFromCart(id))}\n   const checkoutHandler = () => {history.push('/login?redirect=shipping')} //learn how redirect works properly\n\n   return (\n\n    <Row>\n     <Col md={8}>\n     <h1>Shopping Cart</h1>\n     {cartItems.length===0?<Message>Your cart is empty <Link to='/'>Go Back</Link></Message>:\n     (<ListGroup variant='flush'>\n      {cartItems.map(item =>{return(\n        <ListGroup.Item key ={item.product /*product is the ID here*/}>\n      <Row>\n       <Col md={2}>\n\n        <Image src={item.image} alt={item.name} fluid rounded></Image>\n\n       </Col>\n\n       <Col md={3}>\n        <Link to={`/product/${item.product /*product here is the id*/}`}>\n         {item.name}\n        </Link>\n       </Col>\n\n       <Col md={2}>\n        ₦ {(item.price*1).toFixed(2)}\n       </Col>\n\n       <Col md={2}>\n       <Form.Control as='select' value={item.qty} onChange={(e) =>{dispatch(addToCart(item.product/*prod =id*/, Number(e.target.value)\n         )\n        )\n       }\n      } >\n         {[...Array(item.countInStock).keys()].map((x) =>(\n           <option key={x+1} value={x+1}>\n            {x +1}\n           </option>\n         ))}\n       </Form.Control>\n       </Col>\n\n       <Col md={2}>\n       <Button type='button' variant=\"light\" onClick={() => removeFromCartHandler(item.product\n        /*prod =id*/)}> \n\n         <i className=\"fas fa-trash\"></i> Remove\n\n        </Button>\n       </Col>\n\n       </Row>\n        </ListGroup.Item>\n      )})}\n     </ListGroup>)}\n     </Col>\n\n\n     <Col md={4}>\n      <Card>\n      <ListGroup variant='flush'>\n       <ListGroup.Item>\n        <h2>Subtotal ({cartItems.reduce((acc,item)=>\n          (acc + item.qty),0\n    )\n     }\n      ) items</h2>\n\n      ₦ {cartItems.reduce((acc,item)=>\n        (acc + item.qty*item.price),0\n  ).toFixed(2)\n   }\n\n      </ListGroup.Item>\n\n       <ListGroup.Item>\n         <Button type=\"button\" className='btn-block' disabled={cartItems.length===0} onClick={checkoutHandler}>\n         Proceed to Checkout\n         </Button>\n\n       </ListGroup.Item>\n\n      </ListGroup>\n      </Card>\n     </Col>\n\n    </Row>\n   )\n\n}\n\nexport default CartScreen\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/AdminComScreen.js",["215","216","217"],"import React, {useState ,useEffect} from 'react'\n/*import {Link} from 'react-router-dom'*/\nimport {Form, Button, Row, Col} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\nimport Loader from '../components/Message.js'\nimport {adminSaid,getUserDetails} from '../actions/userActions.js'\nimport FormContainer from '../components/FormContainer.js'\n\n\n\n\n\nconst AdminComScreen = ({location, match,history}) => { //he is taking location & history out of the props, normally it is props.location\n  const userId = match.params.id\n  const [bossMessage,setBossMessage] = useState('')  \n  \n  const dispatch = useDispatch() \n  const userLogin = useSelector(state => state.userLogin);\n  const {loading,error,userInfo} = userLogin /*if youre having problems reaching this  screen, come and delete this line, and the userInfo useEffect */\n\n  /*the genius thing i'm going to do here is collect\n   information for a particular user,not using userlogin i guess,\n   but where to collect userInfo of a particular user that was clicked,\n    i need to create a new global state for this cuz i need to fetch info\n  from backend based on the user id i will send  - FIND THIS IN USER DETAILS- userDetails*/\n  \n  const userDetails = useSelector((state) => state.userDetails);\n  const {loading:loadingDetails, error:errorDetails,user } = userDetails\n     console.log(userDetails)\n\n      /*consider renaming these from clientId, clientEmail,clientName , cuz youre updating adminMessage even though it's in the client's data */\n     const clientId = user._id\n     const clientEmail = user.email\n     const clientName = user.name\n\n  /* const {loading, error,userInfo } = userLogin */\n   /*at least i think it's this -youre right, it is this */\n\n  const redirect = location.search ? location.search.split('=')[1]:'/'\n//location .search has the url query string, study it a bit\n\n//because we dont want to able to come into the login screen ONCE WE ARE ALREADY LOGGED IN, effect this in the useEffect below\n\n\n\n  useEffect(()=>{  \n    if(!userInfo){\n    history.push(`/login`)\n    }\n    if(userInfo && userInfo.isTeller){\n      history.push('/teller/transactionlist')\n   }\n  })\n\n\n  useEffect( () => {\n      \n    dispatch(getUserDetails(userId))\n   \n    /*if(userInfo){ \n       history.push(redirect)\n    } I WANT TO PUT IN THE CUSTOMER SERVICE MESSAGE HERE,SO IT CAN REFRESH UPON CUSTOMER SENDING A MESSAGE*/\n      \n  },[dispatch, userId /*, clientEmail, clientName*/]) /*why client id and client name? */\n\n\n\n  const submitHandler = (e) => {\n          e.preventDefault()\n          //this is where we want to to call our action to dispatch login\n          dispatch(adminSaid(bossMessage, clientId,clientEmail,clientName)) \n          window.alert('Message Sent!') \n          setBossMessage('')\n        \n         \n         /*yes we still need clientId \n         cuz that's how we'll know who we're going to update in the database*/\n  }\n\n    return (\n       <FormContainer>\n        <h1>Send A Message  ...</h1>\n        {errorDetails && <Message variant='danger'>{errorDetails}</Message>}\n        {loadingDetails && <Loader/>}\n        \n         <Form onSubmit={submitHandler}>\n\n             {/*okay so if the user is an admin, i want to show a name and email, otherwise\n    i want to to hide the name and email stuff, actually i changed my mind, admins\n     will have a different screen and a different route. CONSIDER CALLING GET USER PROFILE ROUTE\n     AFTER SENDING THE ID - FIND AN EXAMPLE OF THIS*/}\n\n        \n           <>\n        <Form.Group controlId='name'>\n\n            <Form.Label> Name: </Form.Label>\n            <Form.Control plaintext readOnly defaultValue ={user.name}></Form.Control>\n                {/* local state used to be here i don't wish to change the state here, for name and password, so maybe i will eliminate local state */}\n          </Form.Group>\n\n\n         <Form.Group controlId='email'>\n\n          <Form.Label>  Email Address: </Form.Label>\n          <Form.Control plaintext readOnly defaultValue={user.email}></Form.Control>\n        \n         </Form.Group> \n         </>\n\n         <Form.Group controlId='reply-message'>\n\n          <Form.Label> Client/Merchant Message: </Form.Label>\n          <Form.Control as =\"textarea\" rows={6} plaintext readOnly value={user.userMessage} defaultValue={`No message from client ${user.name} , ID - ${user._id}`}></Form.Control>\n\n         </Form.Group>\n         \n        \n\n\n          <Form.Group controlId='reply-message'>\n\n          <Form.Label>  Send Your Message Below: </Form.Label>\n          <Form.Control as =\"textarea\" rows={6} placeholder='type message here' value={bossMessage} onChange={(e)=>{setBossMessage(e.target.value)}}></Form.Control>\n\n         </Form.Group>\n\n         \n         <Button type='submit' variant='primary'>Send</Button>\n         \n\n        </Form>\n       \n        \n        \n        <br/>\n        <Row className='py-3'>\n         <Col>                       \n           You can also message Clients/Merchants using: customerservice@bridgeway.com \n         </Col>  \n         </Row>\n\n         <Row className='py-3'>\n         <Col>                       \n           Remember to copy and send the Client/Merchant Message into the email body, and use an appropriate subject, for easy follow up from clients\n         </Col>                     \n        </Row>              \n\n       </FormContainer>\n\n    )\n\n}\n\nexport default AdminComScreen\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/UserListScreen.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProductScreen.js",["218"],"import React ,{useState, useEffect} from 'react'\nimport {Link} from 'react-router-dom'\nimport {Row, Col, Image, ListGroup, Card, Button,Form} from 'react-bootstrap'\nimport Rating from '../components/Rating'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport Meta from '../components/Meta'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {listProductDetails,createProductReview} from '../actions/productActions.js'\nimport {PRODUCT_CREATE_REVIEW_RESET} from '../constants/productConstants.js'\n\n\nconst ProductScreen = ({history,match}) => {\n      /*cuz we need a single product from the array of products,and we gotta do it PER PAGE, we use.find method\n      TO FILTER IT OUT FROM THE ARRAY*/\n   const [qty ,setQty] = useState(1)\n   const [rating ,setRating] = useState(0)\n   const [comment ,setComment] = useState('')\n\n  const dispatch = useDispatch()\n  \n  const productDetails = useSelector(state => state.productDetails)\n  const {product,loading, error} = productDetails\n\n  const productCreateReview = useSelector(state => state.productCreateReview)\n  const {success:successProductReview, error:errorProductReview} = productCreateReview\n  \n\n  const userLogin = useSelector(state => state.userLogin)\n  const {userInfo} = userLogin\n  \n useEffect(()=>{\n\n  if(userInfo && userInfo.isTeller){\n    history.push('/teller/transactionlist')\n }\n\n  dispatch(listProductDetails(match.params.id))\n  \n  if(successProductReview){\n    alert(\"Thank you for your review!\")\n    setRating(0)\n    setComment('')\n    dispatch({type:PRODUCT_CREATE_REVIEW_RESET})\n  }\n\n   \n },[dispatch,match,successProductReview])\n\n\nconst addToCartHandler = () => {\n  if(!userInfo){\n    window.alert('Please sign in to purchase')\n  }\n  else if(userInfo && (userInfo.isAdmin||userInfo.isMerchant)){\n    window.alert('Only customers may make purchases, please register as a customer')\n  }\n    else{history.push(`/cart/${match.params.id}?qty=${qty}`)} //there was a blank set of curly braces here, you just put quantity in \n}\n  \nconst previousPageHandler = () => {\n  \n  window.history.back()\n}\n\n \n\n  console.log(productDetails)\n\n\n\nconst submitHandler =(e) =>{\n  e.preventDefault() //since submit handler is being called inside a form and the default is to refresh the page\n \n  if(userInfo.isMerchant||userInfo.isAdmin){window.alert('Only customers may write reviews!')}\n  else{dispatch(createProductReview(match.params.id,{\n    rating,\n    comment //both rating and comment are coming from local/comment state\n  }))}\n}\n\n  \n\n      return(\n        <>\n        <Button className='btn btn-light my-3' onClick={previousPageHandler}>GO BACK</Button>\n        {loading ? <Loader/>:error ?<Message variant='danger'>{error}</Message>:(\n          <>\n          <Meta title={product.name}/>\n          <Row>\n           <Col md={6}>\n           <Image src={product.image} alt={product.name} fluid>\n           </Image>\n           </Col>\n           <Col md={3}>\n            <ListGroup variant='flush'>\n\n              <ListGroup.Item>\n               <h3>{product.name}</h3>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n               <Rating value={product.rating} text={`${product.numReviews} ${product.numReviews===1?'review':'reviews'}`}/>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n               Price:₦ {(product.price*1).toFixed(2)}\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n              Description:{product.description}\n              </ListGroup.Item>\n\n\n            </ListGroup>\n           </Col>\n            <Col md={3}>\n             <Card>\n              <ListGroup variant='flush'>\n              <ListGroup.Item>\n                 <Row>\n                   <Col>Vendor:</Col>\n                   <Col>\n                    <strong> {'Bridgeway'}</strong>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n\n               <ListGroup.Item>\n                 <Row>\n                   <Col>Price:</Col>\n                   <Col>\n                    <strong>₦ {((product.price*1).toFixed(2))}</strong>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n\n               <ListGroup.Item>\n                 <Row>\n                   <Col>Status:</Col>\n                   <Col>\n                    <strong>{product.countInStock >= 4 ?'In Stock': (product.countInStock <=3 && product.countInStock >0  )?'Few Left !!':product.countInStock === 0 ? 'Out of Stock':'Currently being restocked' /*this currenty being restocked is not the right thing, you just put it there as filler, till the need comes to fix it */}</strong>\n\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n             {product.countInStock > 0 && (\n               <ListGroup.Item>\n                  <Row>\n                    <Col>Qty</Col>\n                    <Col>\n                    <Form.Control as='select' value={qty} onChange={(e) =>{setQty(e.target.value)}} >\n                      {[...Array(product.countInStock).keys()].map(x =>(\n                        <option key={x+1} value={x+1}>\n                         {x +1}\n                        </option>\n                      ))}\n                    </Form.Control>\n                    </Col>\n                  </Row>\n                </ListGroup.Item>\n             )}\n\n               <ListGroup.Item>\n                 <Button onClick={addToCartHandler} className='btn-block' type='button' disabled={product.countInStock===0}>\n                   Add To Cart\n                 </Button>\n               </ListGroup.Item>\n\n              </ListGroup>\n             </Card>\n            </Col>\n\n\n          </Row>\n          <Row>\n            <Col md={6}>\n              <h2>Reviews</h2>\n              {product.reviews.length === 0 && <Message>No Reviews </Message>}\n              <ListGroup variant=\"flush\">\n               {product.reviews.map(review =>( /*i changed products to product, come back here if you're having probs */\n                 <ListGroup.Item key={review._id}>\n                  <strong>{review.name}</strong>\n                   <Rating value={review.rating} />\n                   <p>{review.createdAt.substring(0,10)}</p>\n                   <p>{review.comment}</p>\n                 </ListGroup.Item>\n               ) )}\n               <ListGroup.Item>\n                <h2>Write a Customer Review</h2>\n                {errorProductReview && <Message variant='danger'>{errorProductReview} </Message>}\n\n                {userInfo && (!userInfo.isAdmin || !userInfo.isMerchant)?(<Form onSubmit={submitHandler}>\n                <Form.Group controlId='rating'>\n                <Form.Label>Rating</Form.Label>\n                 <Form.Control as='select' value={rating} onChange={(e)=>setRating(e.target.value)}>\n\n                  <option value=''>Select...</option>\n                   <option value='1'>1-Poor</option>\n                   <option value='2'>2-Fair</option>\n                   <option value='3'>3-Good</option>\n                   <option value='4'>4-Very Good</option>\n                   <option value='5'>5-Excellent</option>\n\n                 </Form.Control>\n               </Form.Group>\n\n               <Form.Group controlId='comment'>\n                 <Form.Label>Comment</Form.Label>\n                 <Form.Control as='textarea' row='3' value={comment} onChange={(e)=>setComment(e.target.value)}>\n                 </Form.Control>\n               </Form.Group>\n\n              <Button type='submit' variant='primary'> Submit </Button>\n\n                </Form>):\n                  <Message> Please<Link to='/login'>sign in</Link> to write a review {' '} </Message>}\n               </ListGroup.Item>\n              </ListGroup>\n            </Col>\n          </Row>\n          </>\n        )}\n\n        </>\n      )\n\n}\n\nexport default ProductScreen\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/cartConstants.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/productConstants.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/UserConstants.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/RegisterScreen.js",["219","220"],"import React, {useState ,useEffect} from 'react'\nimport {Link} from 'react-router-dom'\nimport {Form, Button, Row, Col, ListGroup} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\nimport Loader from '../components/Message.js'\nimport {register} from '../actions/userActions.js'\nimport FormContainer from '../components/FormContainer.js'\n\n\n\n\n\nconst RegisterScreen = ({location, history}) => { //he is taking location & history out of the props, normally it is props.location\n  const [name,setName] = useState('')\n  const [nuban ,setNuban] = useState('')\n  const [email,setEmail] = useState('') \n  const [password,setPassword] = useState('')\n  const [confirmPassword,setConfirmPassword] = useState('')\n  const [isMerchant,setIsMerchant] = useState(false)\n  const [pickupAddress,setPickupAddress] =useState('')\n  const [momFirstName,setMomFirstName] = useState('is a merchant')\n  const [shoeSize,setShoeSize] = useState('is a merchant')\n  const [closestFriend,setClosestFriend] = useState('is a merchant')\n  const [childhoodStreet,setChildhoodStreet] = useState('is a merchant')\n  const [firstEmployment,setFirstEmployment] = useState('is a merchant')\n  const [message,setMessage] = useState(null)\n  const dispatch = useDispatch() //dont forget that real dispatches only take place in action creators, you are only calling useDispatch here\n  const userRegister = useSelector(state => state.userRegister);\n  const {loading, error,userInfo } = userRegister\n     \n  const redirect = location.search ? location.search.split('=')[1]:'/'\n//location .search has the url query string, study it a bit\n\n//because we dont want to able to come into the login screen ONCE WE ARE ALREADY LOGGED IN, effect this in the useEffect below\n\n  useEffect( () => {\n    if(userInfo){ //cuz user info exists only when you're logged in\n       history.push(redirect)\n    }\n\n    if(password !=='' && (password === confirmPassword)){\n      setMessage(null)\n    }\n     console.log(isMerchant)\n     console.log(momFirstName,shoeSize,closestFriend,childhoodStreet,firstEmployment)\n    if(isMerchant===true ){\n       /*setPickupAddress('') */\n   setMomFirstName('is a merchant') \n   setShoeSize('is a merchant') \n   setClosestFriend('is a merchant') \n   setChildhoodStreet('is a merchant') \n   setFirstEmployment('is a merchant') \n    }\n\n\n    if(name!==''||email!==''||isMerchant && pickupAddress!==''||momFirstName!==''||shoeSize!==''||closestFriend!==''||childhoodStreet!==''||firstEmployment!==''){setMessage(null)}\n    \n  },[redirect,history,nuban,userInfo,password,confirmPassword,name,email,pickupAddress,momFirstName,shoeSize,closestFriend,childhoodStreet,firstEmployment,isMerchant])\n\n\n\n  const submitHandler = (e) => {\n          e.preventDefault()\n       if(password !== confirmPassword){\n         setMessage('Passwords do not Match')\n      }else if(name === ''||email===''){\n        setMessage('Please Make sure to fill in all entries!')\n      }\n      else if(isMerchant && pickupAddress===''){\n        setMessage('Please Make sure to fill in all entries!')\n      }\n       else if( !isMerchant && (momFirstName ==='is a merchant' || shoeSize ==='is a merchant' || closestFriend==='is a merchant' || childhoodStreet==='is a merchant' || firstEmployment==='is a merchant')){\n        setMessage('Please Make sure to fill in all entries!')\n       }\n       else{\n         //the order in which these things are sent is IMPORTANT\n       dispatch(register(name,email,nuban, password, momFirstName,shoeSize,closestFriend,childhoodStreet,firstEmployment, pickupAddress,isMerchant)) /* follow the trail of this register dispatch to see where it leads  */\n       }\n\n  }\n\n    return (\n       <FormContainer>\n        <h1>Sign up</h1>\n        \n        {loading && <Loader/>}\n        <Form onSubmit={submitHandler}>\n  {/*1*/}      <Form.Group controlId='name'>\n\n         <Form.Label>  Name</Form.Label>\n         <Form.Control type='name' placeholder=\"enter name\" value={name} onChange={(e)=>setName(e.target.value)}></Form.Control>\n          {/*the value of form control is form control from the state.  need to read about form group from react bootstrap*/}\n        </Form.Group>\n\n  {/*2*/}        <Form.Group controlId='email'>\n\n          <Form.Label>  Email Address </Form.Label>\n          <Form.Control type='email' placeholder=\"enter email\" value={email} onChange={(e)=>setEmail(e.target.value)}></Form.Control>\n           {/*the value of form control is form control from the state. need to read about form group from react bootstrap*/}\n         </Form.Group>\n\n         <fieldset>\n         {/*3*/}        <Form.Group controlId='usertype'>\n\n         <Form.Label>  Are you a customer or a merchant? </Form.Label>\n          <div className=\"mb-3\"></div>\n         <Form.Check inline type='radio' name='radiosInline' id='radiosInline1' label=\"Customer\" onChange={(e)=>setIsMerchant(false)}/>\n          <Form.Check inline type='radio' name='radiosInline' id='radiosInline2' label=\"Merchant\" onChange={(e)=>setIsMerchant(true)}/>\n           \n         </Form.Group>\n         </fieldset>\n\n           {/*4*/ isMerchant && \n           \n              <ListGroup>\n              <ListGroup.Item>\n                \n           <Form.Group controlId='pickup-address'>\n\n          <Form.Label> What is your address (for pickup of goods)? </Form.Label>\n          <Form.Control type='input' placeholder=\"enter pick up location\" value={pickupAddress} onChange={(e)=>setPickupAddress(e.target.value)}></Form.Control>\n           \n         </Form.Group> \n          </ListGroup.Item>\n          </ListGroup>}\n\n\n      {/*5*/}      <Form.Group controlId='account num'>\n\n      <Form.Label>  Account Number  </Form.Label>\n          <Form.Control type='input' placeholder=\"enter your account number\" value={nuban} onChange={(e)=>setNuban(e.target.value)}></Form.Control>\n\n         </Form.Group>\n\n\n\n\n  {/*6*/}      <Form.Group controlId='password'>\n\n          <Form.Label>  Password  </Form.Label>\n          <Form.Control type='password' placeholder=\"enter password\" value={password} onChange={(e)=>setPassword(e.target.value)}></Form.Control>\n\n         </Form.Group>\n\n {/*7*/}      <Form.Group controlId='confirmPassword'>\n\n                 <Form.Label>  Confirm password  </Form.Label>\n                 <Form.Control type='password' placeholder=\"confirm password\" value={confirmPassword} onChange={(e)=>setConfirmPassword(e.target.value)}></Form.Control>\n\n                </Form.Group>\n\n             \n             <br/>\n             <br/>\n             {(  password !=='' && (password === confirmPassword)) && <Message variant='success'>Passwords are a match! {!isMerchant && 'please fill in the section below'}.</Message> } \n             {message && <Message variant='danger'>{message}</Message>}\n            {error && <Message variant='danger'>{error}</Message>}\n              \n             {( !isMerchant && password !=='' && (password === confirmPassword)) && \n            <> <h1>Personal Identifier Questions</h1>\n               <p>We use this data to confirm it's you, upon purchase</p>\n            </>}\n       \n             <br/>\n             <br/>\n\n            { (!isMerchant && password !=='' && (password === confirmPassword)) && \n             \n            <>\n          <ListGroup>\n            <ListGroup.Item className=\"my-3\">\n\n          <Form.Group controlId='momFirstName'>\n        \n         <Form.Label> What is your mother's first name ?   </Form.Label>\n          <Form.Control type='input'  /*value={momFirstName}*/ onChange={(e)=>setMomFirstName(e.target.value)}></Form.Control>\n\n         </Form.Group>\n\n         <Form.Group controlId='shoeSize'>\n        \n        <Form.Label> What is your shoe size?   </Form.Label>\n        <Form.Control type='input'  /*value={shoeSize}*/ onChange={(e)=>setShoeSize(e.target.value)}></Form.Control>\n\n        </Form.Group>\n\n        <Form.Group controlId='closestFriend'>\n        \n        <Form.Label> What is the name of your closest friend ?   </Form.Label>\n        <Form.Control type='input' /*value={closestFriend}*/ onChange={(e)=>setClosestFriend(e.target.value)}></Form.Control>\n\n        </Form.Group>\n\n        <Form.Group controlId='childhoodStreet'>\n        \n       <Form.Label> What is the name of the street you lived on as a child ?   </Form.Label>\n        <Form.Control type='input' placeholder=\"please make sure to spell your answers correctly\" /*value={childhoodStreet}*/ onChange={(e)=>setChildhoodStreet(e.target.value)}></Form.Control>\n\n        </Form.Group>\n\n\n        <Form.Group controlId='firstEmployment'>\n        \n         <Form.Label> What is the name of the first place you worked at (employment) ?   </Form.Label>\n        <Form.Control type='input' /*value={firstEmployment}*/ onChange={(e)=>setFirstEmployment(e.target.value)}></Form.Control>\n\n        </Form.Group>\n\n        </ListGroup.Item>\n          </ListGroup>\n        </>\n       }\n        <br/>\n          <Button type='submit' variant='primary'>Register</Button>\n        </Form>\n\n        <Row className='py-3'>\n         <Col>\n           Have an account?<Link to={/*redirect?`$login/redirect=${redirect}`:*/'/login'}> Login</Link>\n         </Col>\n        </Row>\n\n       </FormContainer>\n\n    )\n\n}\n\nexport default RegisterScreen\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Header.js",["221","222","223","224","225","226","227","228","229","230","231","232"],"import React from 'react'\nimport {Route} from 'react-router-dom'\nimport  {useState,useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {LinkContainer} from 'react-router-bootstrap'\nimport {Container,Nav,Navbar,NavDropdown} from 'react-bootstrap'\nimport {logout,listUsers} from '../actions/userActions.js'\nimport {listOrders} from '../actions/orderActions.js'\nimport SearchBox from './SearchBox.js'\nimport bridgeway from './yes.png' \n\n\n\n  \n\nconst Header = () => {\n   \n  \n  const seller = '(Merchant)'\n  const dispatch = useDispatch()\n  const [cartVisibility, setCartVisibility] = useState(true)\n\n  const userLogin = useSelector(state => state.userLogin)\n  const {userInfo} = userLogin\n   /*console.log(userInfo)*/\n\n  const userList = useSelector(state => state.userList);\n  const {loading, error,users } = userList\n  const newMessages =users && users.some((user)=>{return user.adminMessageNotification ===true})?true:false\n  const numberOfMessages = users? users.filter((user)=>{return user.adminMessageNotification ===true}).length:''\n\n  const orderList = useSelector(state => state.orderList);\n  const {loading:loadingOrders, error:errorOrders,orders } = orderList\n\n  const productList = useSelector(state => state.productList);\n  const {loading:loadingProducts, error:errorProducts,products,page,pages} = productList\n \n  const newOrders =orders && orders.some((order)=>{return order.isDelivered ===false})?true:false\n  const numberOfOrders = orders? orders.filter((order)=>{return order.isDelivered ===false}).length:''\n  const newVendorOrders = orders && orders.filter((order)=>(order.orderItems.filter((item) => (item.vendor === userInfo.name)).some((item) => (item.promisedQty !== item.qty)))).length ===0? false :true\n\n  const lowStock = products && products.filter((product) =>(product.countInStock === 0)).length === 0 ? false :true\n  const numberOfLowStock = products? products.filter((product) =>(product.countInStock === 0)).length :''\n\n  //THE LOGIC FOR SOME ORDERS, THAT WORKED, THE ONE ABOVE FAILED .\n  /*const newVendorOrders = orders && (orders.filter((order)=>(order.orderItems.filter((item) => (item.vendor === userInfo.name)).every((item) => (item.promisedQty !== item.qty))?        ))):\"DIDNT LOAD ORDERS\"*/\n  console.log(newVendorOrders)\n\n /* !(order.orderItems.filter((item) => (item.vendor === userInfo.name)).every((item) => (item.promisedQty === 0))) && !(order.orderItems.filter((item) => (item.vendor === userInfo.name)).every((item) => (item.promisedQty === item.qty)))*/\n\n\n  /*const numberOfVendorOrders = *//*USE MONGO DB to laser return all promised quantities of zero of a particular vendor from the order items of ALL orders  AND STOP STRESSING */\n\n  /*console.log(numberOfVendorOrders)*/\n\n  /*if(orders && userInfo){\n    userInfo.newOrders = orders.map(function(order){order.orderItems}).every(function(item){item.promisedQty===0})===true?true:false\n  }*/\n  \n  useEffect(() => {if(userInfo && (userInfo.isMerchant||userInfo.isAdmin)){\n     setCartVisibility(false)}\n     else{setCartVisibility(true)}\n\n     if(userInfo && userInfo.isAdmin ){\n      dispatch(listUsers())\n      }\n\n      if(userInfo && (userInfo.isAdmin || userInfo.isMerchant) ){\n        dispatch(listOrders())\n        }\n      \n      \n\n  },[userInfo])\n  \n\n\n /*useEffect(() =>{\n   if(users && userInfo && userInfo.isAdmin){\n userInfo.newMessages = users.some((user)=>{return user.adminMessageNotification ===true})\n userInfo.numberOfMessages =  users.filter((user)=>{return user.adminMessageNotification ===true}).length\n}\n\n },[users])*/\n\n\n  const logoutHandler = () => {\n    \n    dispatch(logout())\n    window.location.assign('/')\n     \n    \n  }\n  \n  \n\n\n    return(\n<header>\n\n <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\n  <Container>\n  <LinkContainer to=\"/\">\n  {/*why cant we wrap this in a link tag?*/}\n  <Navbar.Brand ><img src={bridgeway} alt={'the logo of bridgeway bank'}  className=\"shrunkenImage\"/><span className='red'>HOME</span></Navbar.Brand>\n  </LinkContainer>\n\n  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n  <Navbar.Collapse id=\"basic-navbar-nav\">\n  <Route render ={({history})=> <SearchBox history={history}/>} /> {/*THERE IS A VERY IMPORTANT THING TO LEARN HERE, IF YOU PUT IN A COMPONONENT DIRECTLY IN THE NAVBAR, IT HAS NO ACCESS TO PROPS, SO YOU GOTTA PUT IT IN A ROUTE AND THEN USE THE RENDER FUNCTION TO PASS IN PROPS..YOU GOTTA STUDY THIS*/}\n   <Nav className=\"ml-auto\">\n\n    {/*DONT FORGET TO USE THE CDN OF FONT-AWESOME IN INDEX.HTML\n    FROM CDN JS.COM ,JUST TYPE FONT AWESOME AND COPY IT*/}\n{cartVisibility &&\n<LinkContainer to='/cart'>\n     <Nav.Link ><i className='fas fa-shopping-cart'></i>Cart\n     {userInfo && userInfo.userMessageNotification && <i className='fas fa-circle' style={{color:'red', fontSize:'8px', marginLeft:'15px' , marginRight:'-12px'}}></i>}\n     </Nav.Link>\n     \n</LinkContainer> }\n\n   {userInfo?(\n     <>\n     <span>{userInfo && userInfo.isMerchant && userInfo.userMessageNotification && <i className='fas fa-circle' style={{color:'red', fontSize:'8px', marginLeft:'15px' , marginRight:'-1px', marginTop:'14px'}}></i>}</span>\n     <NavDropdown title ={userInfo.name + `${(userInfo && userInfo.userMessageNotification)? ' (1)':''}`} id='username'>\n     <LinkContainer to='/profile'>\n          <NavDropdown.Item >Profile { userInfo && userInfo.userMessageNotification &&<i className='fas fa-circle' style={{color:'red', fontSize:'7px'}}></i>} </NavDropdown.Item>\n          \n     </LinkContainer>\n\n       <NavDropdown.Item onClick={logoutHandler} >Logout </NavDropdown.Item>\n     </NavDropdown>\n     </>\n   ):(\n     <LinkContainer to='/login'>\n          <Nav.Link><i className='fas fa-user'></i>Sign In</Nav.Link>\n     </LinkContainer>\n     \n   )\n    \n   }\n\n\n{userInfo && userInfo.isMerchant && (\n  <>\n    <span>{userInfo && userInfo.isMerchant && (newVendorOrders||lowStock) && <i className='fas fa-circle' style={{color:'red', fontSize:'8px', marginLeft:'15px' , marginRight:'-1px', marginTop:'14px'}}></i>}</span>\n    <NavDropdown title ={'Merchant Functions'} id='username'>\n\n{/*i need to make a merchant token, so that merchants have access to a productlist distinct of admins*/}\n{/*1*/}      <LinkContainer to='/admin/productlist'>\n            <NavDropdown.Item >Products { (userInfo && userInfo.isMerchant && numberOfLowStock > 0) && `(${numberOfLowStock})`}</NavDropdown.Item>\n           </LinkContainer> \n\n{/*2*/}      <LinkContainer to='/admin/orderlist'>\n            <NavDropdown.Item >Orders { (userInfo && userInfo.isMerchant && newVendorOrders) && <i className='fas fa-circle' style={{color:'red', fontSize:'7px'}}></i>} </NavDropdown.Item>\n           </LinkContainer>\n\n     </NavDropdown>\n     </>\n   )}\n\n\n   {userInfo && userInfo.isAdmin && (\n     <>\n     {/*the code below is too long, try and refactor it*/} \n  <span>{(userInfo && userInfo.isAdmin && (newMessages||newOrders)) && <i className='fas fa-circle' style={{color:'red', fontSize:'8px', marginLeft:'15px' , marginRight:'-1px', marginTop:'14px'}}></i>}</span>\n  <NavDropdown title ={'Admin Functions' +' '+ `${numberOfMessages + numberOfOrders > 0 ? `(${numberOfMessages + numberOfOrders})`:''}`} id='username'>\n\n{/*1*/}     <LinkContainer to='/admin/userlist'>\n            <NavDropdown.Item >Users { (userInfo && userInfo.isAdmin && numberOfMessages > 0) && `(${numberOfMessages})`} </NavDropdown.Item>\n          </LinkContainer>\n\n{/*2*/}      <LinkContainer to='/admin/productlist'>\n            <NavDropdown.Item >Products </NavDropdown.Item> \n           </LinkContainer>\n\n{/*3*/}      <LinkContainer to='/admin/orderlist'>\n            <NavDropdown.Item >Orders{ (userInfo && userInfo.isAdmin && numberOfOrders > 0) && `(${numberOfOrders})`} </NavDropdown.Item>\n           </LinkContainer>\n\n     </NavDropdown>\n     </> \n   )}\n\n{/*console.log(users.some(function(user){user.userMessageNotification}))*/}\n\n{/*console.log(orders.map(function(order){order.orderItems}).every(function(item){item.qty>0} ))*/}\n\n   </Nav>\n\n  </Navbar.Collapse>\n  </Container>\n </Navbar>\n\n</header>\n    )\n}\n\nexport default Header\n/*export as default means that , that's the only thing coming out of this file*/\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProfileScreen.js",["233","234","235"],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/OrderListScreen.js",["236","237","238"],"import React ,{ useEffect } from 'react'\nimport {LinkContainer} from 'react-router-bootstrap'\nimport {Table,Button} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\nimport Loader from '../components/Message.js'\nimport {listOrders} from '../actions/orderActions.js'\nimport { Row ,Col ,Form, ListGroup, Image, Card, ListGroupItem} from 'react-bootstrap'\n\n\n\n\nconst OrderListScreen = ({history}) => { //he is taking location & history out of the props, normally it is props.location\n  /*const [name,setName] = useState('')\n  const [email,setEmail] = useState('')  //component level state right here, not application level state\n  const [password,setPassword] = useState('')\n  const [confirmpassword,setConfirmPassword] = useState('')\n  const [message,setMessage] = useState(null)*/\n  const dispatch = useDispatch() //dont forget that real dispatches only take place in action creators, you are only calling useDispatch here\n\n  const orderList = useSelector(state => state.orderList);\n  const {loading, error,orders } = orderList\n  \n  \n\n  const userLogin = useSelector(state => state.userLogin);\n  const {userInfo } = userLogin\n   \n  let vendorName =userInfo && userInfo.isMerchant ? userInfo.name : ''\n\n  //THE LOGIC FOR CALCULATING THE TOTAL PRICE OF ITEMS THAT IS SPECIFIC TO EACH VENDOR\n  /*const addDecimals = (num) => { return(Math.round(num*100)/100).toFixed(2) }\n      \n    cart.itemsPrice = addDecimals(cart.cartItems.reduce((acc, item)=>acc +item.agreedPrice*item.qty,0))*/\n\n    console.log(orders)\n   \n\n  useEffect( () => {\n  \n    if(userInfo && userInfo.isTeller){\n      history.push('/teller/transactionlist')\n   }\n  \n    if(userInfo){\n  dispatch(listOrders(vendorName)) /*console.log('orders nigga')*/\n  }else{\n   history.push('/login')\n  }\n    }\n  ,[dispatch,history,userInfo,vendorName]) //successDelete was passed into useEffect because youu want the list of users to reload, showing the effective delete\n\n\n    return (\n       <  >\n        <h1>Orders</h1>\n       \n\n\n     {userInfo.isMerchant && \n        <>\n        <Card>\n         <ListGroup>\n           <ListGroup.Item>\n            <Row> <h5>INSTRUCTIONS:</h5></Row>\n             \n             <Row>\n        Here you may view new orders. Click on each order to view details and confirm whether you are able to fulfill them before the given deadline. Please note the colour code below.\n         \n            </Row>\n            \n            <hr/>\n            \n            <Row><h5>Colour code:</h5></Row>\n         </ListGroup.Item>\n          \n         <ListGroup.Item>\n           <Row>\n        <Col style={{backgroundColor:'rgba(0, 255, 0, 0.2)'}}>  Orders in green are newly placed orders from customers, please attend to them before the deadline(stated on the order page of each order). </Col>\n        <Col style={{backgroundColor:'rgba(233, 212, 96, 0.4)'}} > Orders in yellow have been partially attended to. You have committed to delivering some items but not all. Please endeavor to commit to all items before the deadline rolls by. </Col>\n          </Row>\n       </ListGroup.Item>\n\n\n       <ListGroup.Item>\n           <Row>\n        <Col style={{backgroundColor:'rgba(255, 0, 0, 0.2)'}}>  Orders in red were not attended to before the deadline, the customer's request has gone unfulfilled. </Col>\n        <Col style={{backgroundColor:'none'}} >If the order has no colour associated with it then you have committed to fulfilling all items,and have done so before the deadline. No further action needs to be taken. The order will be removed from the list after the deadline.</Col>\n          </Row>\n       </ListGroup.Item>\n         </ListGroup>\n    \n         </Card>\n          <br/>\n          <br/>\n          </>\n        }\n\n      \n\n{userInfo.isAdmin && \n        <>\n        <Card>\n         <ListGroup>\n           <ListGroup.Item>\n            <Row> <h5>INSTRUCTIONS:</h5></Row>\n            \n             <Row>\n         <p>1.) Please prompt the teller to debit the customer so that the merchant and delivery deadlines may be recieved</p>      \n       <p>2.) Check the merchant's deadline and arrange for a dispatch rider to pick up items from the merchants' various addresses, after the deadline, for each order. </p>\n        <p>3.)Ensure a dispatch rider is sent to the customer who made the order on , or before each delivery deadline.  </p>\n        <p>4.) If you are unsure of what to do, please refer to the comprehensive instructions in your profile section</p>\n        <p> 5.) Click on 'details' for each order,to view order items and the respective merchants' committment to fulfill. You may print the  order list for dispatch riders and customers after clicking details. </p>\n         <p>6.)Please note the colour code below: </p>\n            </Row>\n            \n            <hr/>\n            \n            <Row><h5>Colour code:</h5></Row>\n         </ListGroup.Item>\n          \n         <ListGroup.Item>\n           <Row>\n        <Col style={{backgroundColor:'rgba(0, 255, 0, 0.2)'}}>   Green - New orders, please ensure they have been paid for by the teller, so that merchants may begin processing them.  </Col>\n        <Col style={{backgroundColor:'rgba(233, 212, 96, 0.4)'}} > Yellow - Some Merchants have viewed and committed to providing their items, the order may still be put forth for delivery, but customers should be informed on missing items. </Col>\n          </Row>\n       </ListGroup.Item>\n\n\n       <ListGroup.Item>\n           <Row>\n        <Col style={{backgroundColor:'rgba(255, 0, 0, 0.2)'}}>   Red - Administrator (You) have not dispatched the order before the expected delivery date.  </Col>\n        <Col style={{backgroundColor:'rgba(0, 0, 255, 0.2)'}}>Blue - All Merchants have committed to providing  their items to the dispatch rider, upon his arrival  </Col>\n          </Row>\n       </ListGroup.Item>\n\n\n\n       <ListGroup.Item>\n           <Row>\n        \n        <Col style={{backgroundColor:'none'}} >If the order has no colour associated with it then you have committed to fulfilling all items,and have done so before the deadline. No further action needs to be taken. The order will be removed from the list after the deadline.</Col>\n          </Row>\n       </ListGroup.Item>\n        \n         </ListGroup>\n\n         \n         </Card>\n          <br/>\n          <br/>\n          </>\n        }\n\n\n\n\n\n\n\n\n        {(userInfo.isAdmin||userInfo.isMerchant) && <h2> Today's Date: {new Date().toLocaleDateString()}</h2>}\n        \n        {loading ? <Loader/>:error ? <Message variant='danger'>{error}</Message>:(\n\n        <Table striped border hover responsive className ='table-sm'>\n         <thead>\n          <tr>\n           <th>ID</th>\n           <th>USER</th>\n           <th>PLACED ON</th>\n           {userInfo.isAdmin && <th>MERCHANTS' DEADLINE</th>}\n           {userInfo.isMerchant && <th>YOUR DEADLINE</th>}\n           {userInfo.isAdmin && <th>DELIVERY DEADLINE</th>}\n           {userInfo.isAdmin ?(<th>TOTAL</th>):(<th>RECEIVABLE</th> )}{/*AS PER TOTAL PRICE*/}\n           {userInfo.isAdmin && <th>PAID</th>}\n           <th>DELIVERED</th>\n           <th></th>\n         </tr>\n         </thead>\n         <tbody>\n          {userInfo.isAdmin && orders.map(order => (  /*english translations of my conditionals: \n                                                          1.) if youre a merchant AND every condition except (all items are zero) AND at least one item has been committed to(i think  i wanna try NOT(all items are fully committed to)), make the bar yellow\n                                                        : 2.) if youre not a merchant and the date now is two(or more) days greater than the day the order was put in, give it a red,it has failed to be attended to by the admin\n                                                         :3.) if youre an admin and the item hasnt been delivered and it has been 4 days or greater since its creation, give it a red, it's past the due date\n                                                         :4.)if all items have no promises, and you're a merchant and it hasnt been up to two days since the order was created, then it's a fresh order, give it green\n                                                         :5) if the user is an admin,and at least one item has been promised AND at least one item has been promised(again ,dodgy logic, try !(all have been fully promised) ),  give it a yellow, it is incomplete\n                                                         :6)if the logged in user is an admin and all items are fully committed to, then give the color a blue, it is a fully completed order.\n                                                         :7)if the user is an admin and all merchants have promised something, give it blue it is a fully committed order ready to go  */\n            <tr key={order._id} style={{backgroundColor:/*1*/ userInfo.isMerchant && !(order.orderItems.filter((item) => (item.vendor === userInfo.name)).every((item) => (item.promisedQty === 0))) && !(order.orderItems.filter((item) => (item.vendor === userInfo.name)).every((item) => (item.promisedQty === item.qty))) /*order.orderItems.filter((item) => (item.vendor === userInfo.name)).some((item) => (item.promisedQty !== 0))*/?'rgba(233, 212, 96, 0.4)'\n                                                        /*2*/ :(userInfo.isMerchant && (order.orderItems.filter((item) => (item.vendor === userInfo.name)).every((item) => (item.promisedQty === 0))) &&  new Date() > new Date(new Date(order.createdAt).getTime() + 48 * 60 * 60 * 1000)  ?'rgba(255,0,0,0.2)'\n                                                        /*3*/  :(!order.isDelivered && userInfo.isAdmin && new Date() > new Date(new Date(order.createdAt).getTime() + 96 * 60 * 60 * 1000) ?  'rgba(255,0,0,0.2)'\n                                                        /*4*/ :(order.orderItems.every((item) => (item.promisedQty === 0)) && userInfo.isMerchant && new Date() < new Date(new Date(order.createdAt).getTime() + 48 * 60 * 60 * 1000) ? 'rgba(0, 255, 0, 0.2)'\n                                                        /*5*/  :(userInfo.isAdmin && order.orderItems.some((item) => (item.promisedQty !== 0)) && !(order.orderItems.every((item) => (item.promisedQty === 0)))?'rgba(233, 212, 96, 0.4)'\n                                                        /*6*/ :(userInfo.isAdmin && order.orderItems.every((item) => (item.promisedQty === item.qty))  ? 'rgba(0, 0, 255, 0.2)'\n                                                        /*7*/  :(order.orderItems.every((item) => (item.promisedQty === 0)) && userInfo.isAdmin && (new Date() < new Date(new Date(order.createdAt).getTime() +  96* 60 * 60 * 1000)) && 'rgba(0, 255, 0, 0.2)')))))) }} >\n              <td>{order._id}</td>\n              <td>{order.user && order.user.name}</td>\n              <td>{new Date(order.createdAt).toLocaleDateString()}</td>\n              {userInfo.isAdmin && <td style = {{color: new Date() >= new Date(new Date(order.paidAt).getTime() + 24 * 60 * 60 * 1000)  &&'rgba(255, 0, 0,1)'}}>{order.isPaid? new Date(new Date(order.paidAt).getTime() + 48*60*60*1000).toLocaleDateString():'contact Teller'}</td>}\n              {userInfo.isAdmin && <td style = {{color: new Date() >= new Date(new Date(order.paidAt).getTime() + 72 * 60 * 60 * 1000) &&'rgba(255, 0, 0,1)'}}>{order.isPaid? new Date(new Date(order.paidAt).getTime() + 96*60*60*1000).toLocaleDateString():'contact Teller'}</td>}\n              <td>₦ {userInfo.isAdmin ? (order.totalPrice) : (((order.orderItems.filter((item) => (item.vendor === userInfo.name)).reduce((acc, item)=>acc +(item.agreedPrice*item.qty),0)))).toFixed(2)}</td>\n\n              {userInfo.isAdmin && <td>{order.isPaid ? (<i className='fas fa-check' style={{color:'green'}}></i>): \n                (<i className='fas fa-times' style={{color:'red'}}></i>)}\n              </td>}\n\n              <td>\n                {order.isDelivered ? (order.deliveredAt.substring(0,10)): /*there used to be curly braces around order.deliveredAt */\n                (<i className='fas fa-times' style={{color:'red'}}></i>)}\n              </td>\n\n              <td>\n               <LinkContainer to={`/order/${order._id}`}>\n                <Button variant='light' className='btn-sm'>\n                   Details\n                </Button>\n               </LinkContainer>\n\n              </td>\n            </tr>\n          ))}\n\n          { userInfo.isMerchant && orders.filter((order)=>(order.isPaid ===true)).map(order => (  /*english translations of my conditionals: \n                                                          1.) if youre a merchant AND every condition except (all items are zero) AND at least one item has been committed to(i think  i wanna try NOT(all items are fully committed to)), make the bar yellow\n                                                        : 2.) if youre not a merchant and the date now is two(or more) days greater than the day the order was put in, give it a red,it has failed to be attended to by the admin\n                                                         :3.) if youre an admin and the item hasnt been delivered and it has been 4 days or greater since its creation, give it a red, it's past the due date\n                                                         :4.)if all items have no promises, and you're a merchant and it hasnt been up to two days since the order was created, then it's a fresh order, give it green\n                                                         :5) if the user is an admin,and at least one item has been promised AND at least one item has been promised(again ,dodgy logic, try !(all have been fully promised) ),  give it a yellow, it is incomplete\n                                                         :6)if the logged in user is an admin and all items are fully committed to, then give the color a blue, it is a fully completed order.\n                                                         :7)if the user is an admin and all merchants have promised something, give it blue it is a fully committed order ready to go  */\n            <tr key={order._id} style={{backgroundColor:/*1*/ userInfo.isMerchant && !(order.orderItems.filter((item) => (item.vendor === userInfo.name)).every((item) => (item.promisedQty === 0))) && !(order.orderItems.filter((item) => (item.vendor === userInfo.name)).every((item) => (item.promisedQty === item.qty))) /*order.orderItems.filter((item) => (item.vendor === userInfo.name)).some((item) => (item.promisedQty !== 0))*/?'rgba(233, 212, 96, 0.4)'\n                                                        /*2*/ :(userInfo.isMerchant && (order.orderItems.filter((item) => (item.vendor === userInfo.name)).every((item) => (item.promisedQty === 0))) &&  new Date() > new Date(new Date(order.createdAt).getTime() + 48 * 60 * 60 * 1000)  ?'rgba(255,0,0,0.2)'\n                                                        /*3*/  :(!order.isDelivered && userInfo.isAdmin && new Date() > new Date(new Date(order.createdAt).getTime() + 96 * 60 * 60 * 1000) ?  'rgba(255,0,0,0.2)'\n                                                        /*4*/ :(order.orderItems.every((item) => (item.promisedQty === 0)) && userInfo.isMerchant && new Date() < new Date(new Date(order.createdAt).getTime() + 48 * 60 * 60 * 1000) ? 'rgba(0, 255, 0, 0.2)'\n                                                        /*5*/  :(userInfo.isAdmin && order.orderItems.some((item) => (item.promisedQty !== 0)) && !(order.orderItems.every((item) => (item.promisedQty === 0)))?'rgba(233, 212, 96, 0.4)'\n                                                        /*6*/ :(userInfo.isAdmin && order.orderItems.every((item) => (item.promisedQty === item.qty))  ? 'rgba(0, 0, 255, 0.2)'\n                                                        /*7*/  :(order.orderItems.every((item) => (item.promisedQty === 0)) && userInfo.isAdmin && (new Date() < new Date(new Date(order.createdAt).getTime() +  96* 60 * 60 * 1000)) && 'rgba(0, 255, 0, 0.2)')))))) }} >\n              <td>{order._id}</td>\n              <td>{order.user && order.user.name}</td>\n              <td>{new Date(order.createdAt).toLocaleDateString()}</td>\n              {userInfo.isAdmin && <td style = {{color: new Date() >= new Date(new Date(order.paidAt).getTime() + 24 * 60 * 60 * 1000)  &&'rgba(255, 0, 0,1)'}}>{order.isPaid? new Date(new Date(order.paidAt).getTime() + 48*60*60*1000).toLocaleDateString():'contact Teller'}</td>}\n              {userInfo.isMerchant && <td style = {{color: new Date() >= new Date(new Date(order.paidAt).getTime() + 24 * 60 * 60 * 1000)  &&'rgba(255, 0, 0,1)'}}>{order.isPaid? new Date(new Date(order.paidAt).getTime() + 48*60*60*1000).toLocaleDateString():'ignore order'}</td>}\n              {userInfo.isAdmin && <td style = {{color: new Date() >= new Date(new Date(order.paidAt).getTime() + 72 * 60 * 60 * 1000) &&'rgba(255, 0, 0,1)'}}>{order.isPaid? new Date(new Date(order.paidAt).getTime() + 96*60*60*1000).toLocaleDateString():'contact Teller'}</td>}\n              <td>₦ {userInfo.isAdmin ? (order.totalPrice) : (((order.orderItems.filter((item) => (item.vendor === userInfo.name)).reduce((acc, item)=>acc +(item.agreedPrice*item.qty),0)))).toFixed(2)}</td>\n\n              {userInfo.isAdmin && <td>{order.isPaid ? (<i className='fas fa-check' style={{color:'green'}}></i>): \n                (<i className='fas fa-times' style={{color:'red'}}></i>)}\n              </td>}\n\n              <td>\n                {order.isDelivered ? (order.deliveredAt.substring(0,10)): /*there used to be curly braces around order.deliveredAt */\n                (<i className='fas fa-times' style={{color:'red'}}></i>)}\n              </td>\n\n              <td>\n               <LinkContainer to={`/order/${order._id}`}>\n                <Button variant='light' className='btn-sm'>\n                   Details\n                </Button>\n               </LinkContainer>\n\n              </td>\n            </tr>\n          ))}\n         </tbody>\n        </Table>\n        )}\n\n\n\n\n\n       </>\n\n    )\n\n}\n\nexport default OrderListScreen\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/CommunicationScreen.js",["239"],"import React, {useState ,useEffect} from 'react'\n/*import {Link} from 'react-router-dom'*/\nimport {Form, Button, Row, Col} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\nimport Loader from '../components/Message.js'\nimport {clientSaid} from '../actions/userActions.js'\n/*import {bossSaid} from '../actions/userActions.js'*/\nimport FormContainer from '../components/FormContainer.js'\n\n\n\n\n\nconst CommunicationScreen = ({location, history}) => { //he is taking location & history out of the props, normally it is props.location\n  \n  const orderId = location.search ? location.search.split('=')[1] : false\n\n  const [clientMessage,setClientMessage] = useState(orderId ?`Good day Admin, I am writing to tell you about order number ${orderId} `:'')  //component level state right here, not application level state\n  \n  const dispatch = useDispatch() //dont forget that real dispatches only take place in action creators, you are only calling useDispatch here\n  const userLogin = useSelector(state => state.userLogin);\n  const {loading, error,userInfo } = userLogin\n  \n  const clientId = userInfo._id /*at least i think it's this -youre right, it is this */\n  const clientName = userInfo.name\n  const redirect = location.search ? location.search.split('=')[1]:'/'\n//location .search has the url query string, study it a bit\n\n\n  useEffect(()=>{  \n    if(!userInfo){\n    history.push(`/login`)\n    }\n  })\n\n\n  useEffect( () => {\n    /*if(userInfo){ \n       history.push(redirect)\n    } I WANT TO PUT IN THE CUSTOMER SERVICE MESSAGE HERE,SO IT CAN REFRESH UPON CUSTOMER SENDING A MESSAGE*/\n     \n  },[/*redirect,history,userInfo*/])\n\n\n\n  const submitHandler = (e) => {\n          e.preventDefault()\n          //this is where we want to to call our action to dispatch login\n          setClientMessage('')\n          window.alert('Message Sent!')\n        //dispatch(/*login(email,password)*/)\n         dispatch(clientSaid(clientMessage, clientId ,clientName))\n  }\n\n  const previousPageHandler = () => {\n  \n    window.history.back()\n  }\n\n    return (\n      <>\n      <Button className='btn btn-primary my-3' onClick={previousPageHandler}>GO BACK</Button>\n       <FormContainer>\n        <h1>Send A Message ...</h1>\n        {error && <Message variant='danger'>{error}</Message>}\n        {loading && <Loader/>}\n        \n         <Form onSubmit={submitHandler}>\n\n         <Form.Group controlId='reply-message'>\n\n          <Form.Label> Customer Service: </Form.Label>\n          <Form.Control as =\"textarea\" rows={6} plaintext readOnly value={userInfo.adminMessage} defaultValue={`Good day ${userInfo.name},how may we help you?`}></Form.Control>\n\n         </Form.Group>\n         \n        \n\n          <Form.Group controlId='reply-message'>\n\n          <Form.Label>  Send Your Message Below: </Form.Label>\n          <Form.Control as =\"textarea\" rows={6} placeholder='type message here' value={clientMessage} onChange={(e)=>{setClientMessage(e.target.value)}}></Form.Control>\n\n         </Form.Group>\n\n         \n         <Button type='submit' variant='primary'>Send</Button>\n         \n\n        </Form>\n       \n        \n        <br/>\n        <br/>\n        <Row className='py-3'>\n         <Col>                       \n           Want to communicate in another way? send us a message at: <a href={`mailto:customerservice@bridgeway.com?subject=Correspondence from `}> customerservice@bridgeway.com  </a>\n         </Col>  \n                      \n        </Row>  \n   \n        <Row>\n         <Col>\n         Alternatively, call us at: <strong> 08183763331</strong>  \n         </Col>  \n        </Row>          \n\n       </FormContainer>\n      </>\n    )\n\n}\n\nexport default CommunicationScreen\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/UserEditScreen.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProductListScreen.js",["240","241","242"],"import React, { useEffect } from 'react'\nimport {LinkContainer} from 'react-router-bootstrap'\nimport {Table,Button,Row,Col,ListGroup, Image, Card, ListGroupItem} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\nimport Loader from '../components/Message.js'\nimport Paginate from '../components/Paginate.js'\nimport {deleteProduct,listProducts,createProduct} from '../actions/productActions.js'\nimport {PRODUCT_CREATE_RESET } from '../constants/productConstants.js'\n\n\n\n\nconst ProductListScreen =({history, match}) => { //he is taking location & history out of the props, normally it is props.location\n  const pageNumber = match.params.pageNumber || 1\n  const dispatch = useDispatch() //dont forget that real dispatches only take place in action creators, you are only calling useDispatch here\n\n  const productList = useSelector(state => state.productList);\n  const {loading, error,products,page,pages} = productList\n\n  const productCreate = useSelector(state => state.productCreate);\n  const { loading:loadingCreate, error:errorCreate,success:successCreate , product:createdProduct} = productCreate\n\n  const productDelete = useSelector(state => state.productDelete);\n  const { loading:loadingDelete, error:errorDelete,success:successDelete } = productDelete\n\n  const userLogin = useSelector(state => state.userLogin);\n  const {userInfo } = userLogin\n\n  /* const keyword = ''just in case you need an empty string in listProducts */\n\n  let vendorName = userInfo.isMerchant ? userInfo.name :''\n\n\n\n//location .search has the url query string, study it a bit\n\n//because we dont want to able to come into the login screen ONCE WE ARE ALREADY LOGGED IN, effect this in the useEffect below\n\nuseEffect(()=> {\n  if(!userInfo){\n    \n    history.push('/login')\n    \n  }\n\n  if(userInfo && userInfo.isTeller){\n    history.push('/teller/transactionlist')\n }\n \n  },[ userInfo,history,dispatch,successCreate])\n\n\n\n  /*useEffect(()=> {\n    if(userInfo.isMerchant){\n      vendorName = userInfo.name\n    }\n    else if(userInfo.isAdmin){\n      \n      vendorName = /(.*)/\n    }\n\n    },[userInfo])*/\n\n\n\n\n  useEffect( () => {\n    dispatch({type: PRODUCT_CREATE_RESET })\n  if(userInfo.isAdmin === false && userInfo.isMerchant === false){\n  history.push('/login')\n\n  }\n\n  if(successCreate){\n   history.push(`/admin/product/${createdProduct._id}/edit`)\n }else{\n   dispatch(listProducts(' ',pageNumber,vendorName))\n }\n\n\n    }\n  ,[dispatch,history,userInfo, successDelete,successCreate,createdProduct,pageNumber]) //successDelete was passed into useEffect because youu want the list of users to reload, showing the effective delete\n\n\n\n const deleteHandler = (id) => {\nif(window.confirm('Are you sure you want to delete this item ?')){ //window.confirm is good practice for if you want to delete items\n  dispatch(deleteProduct(id))\n}\n\n  }\n\n  const createProductHandler = () => {\n    dispatch(createProduct())\n    }\n\n    return (\n       <>\n\n\n       <br/>\n       <h1>Products</h1>\n       <center><p style={{color:'black'}}>\n     { userInfo.isAdmin && \n     <>\n    <Card>\n   <ListGroup>\n       <ListGroup.Item>\n         <Row>\n       <h5>INSTRUCTIONS:</h5>\n        </Row>\n        <Row>\n     <p>This is a list of all products on the marketplace, you may view them here, and track which items are sold by a particular vendor. \n     If you want to message a vendor regarding a particular product , please keep note of the ID and message the vendor from your profile, using the product ID</p>\n        </Row>\n     </ListGroup.Item>\n     </ListGroup>\n     </Card>\n     <br/>\n     <br/>\n     </>\n     } \n\n     { userInfo.isMerchant &&\n     \n     <Card>\n     <ListGroup>\n         <ListGroup.Item>\n         <Row>\n       <h5>INSTRUCTIONS:</h5>\n        </Row>\n        <Row>\n          \n       This is a list of all products on the marketplace. You may edit ,create or delete them here.You may also change product stock here. Simply Click the 'edit' button to\n       make changes to a product(including updating it's stock), or 'delete' to remove it from the list of products you sell on this platform\n       </Row>\n       </ListGroup.Item>\n\n       <ListGroup.Item>\n         \n         <Row  style={{backgroundColor:'rgba(233, 212, 96, 0.4)'}} >\n           \n       Items in Yellow are products that are ALMOST out of stock (less than 10 items) , please click edit and change the number for \"count in stock\". Also ensure that you are able to commit this number to our customers.\n       </Row> \n        </ListGroup.Item>\n\n\n       <ListGroup.Item>\n         \n        <Row  style={{backgroundColor:'rgba(255, 0, 0, 0.2)'}} >\n          \n      Items in red are products that are out of stock,THEY ARE NOT VISIBLE ON THE MARKET PLACE FOR SALE, please click edit and change the number for \"count in stock\". Also ensure that you are able to commit this number to our customers.\n      </Row> \n       </ListGroup.Item>\n\n       </ListGroup>\n       </Card>\n     \n     }\n\n     </p></center>\n        <Row className='align-items-center'>\n         <Col>\n          \n         </Col>\n         <Col className=\"text-right\">\n          {userInfo.isMerchant  && (<Button className='my-3' onClick={createProductHandler}>\n            <i className='fas fa-plus'></i> Create Product\n          </Button>)}\n         </Col>\n        </Row>\n        {loadingDelete && <Loader/> }\n        {errorDelete &&<Message variant='danger'>{errorDelete}</Message> }\n\n        {loadingCreate && <Loader/> }\n        {errorCreate &&<Message variant='danger'>{errorCreate}</Message> }\n\n        {loading ? <Loader/>:error ? <Message variant='danger'>{error}</Message>:(\n         <>\n        <Table striped bordered hover responsive className ='table-sm'>\n         <thead>\n          <tr>\n           <th>ID</th>\n           <th>NAME</th>\n           <th>AGREED PRICE</th>\n           <th>MARKETPLACE PRICE</th>\n           <th>SIZE</th>\n           {userInfo.isAdmin && <th>VENDOR</th>}\n           <th></th>\n         </tr>\n         </thead>\n         <tbody>\n          {products.map(product => (\n            <tr key={product._id} style={{backgroundColor:product.countInStock<10 && product.countInStock>0 ? 'rgba(233, 212, 96, 0.4)':(product.countInStock<1 && 'rgba(255, 0, 0, 0.2)')}}>\n              <td>{product._id}</td>\n              <td>{product.name}</td>\n              <td>₦ {(product.agreedPrice*1).toFixed(2)}</td>\n              <td>₦ {(product.price).toFixed(2)}</td>\n              <td>{product.size}</td>\n              {userInfo.isAdmin && <td>{product.vendor}</td>}\n              {userInfo.isMerchant && (<td>\n               <LinkContainer to={`/admin/product/${product._id}/edit`}>\n                <Button variant='light' className='btn-sm'>\n                   <i className='fas fa-edit'></i> Edit\n                </Button>\n               </LinkContainer>\n               <Button variant='danger' className='btn-sm' onClick={()=>deleteHandler(product._id)}>\n                 <i className='fas fa-trash'></i> Delete\n               </Button>\n              </td>)}\n            </tr>\n          ))}\n         </tbody>\n        </Table>\n\n         <Paginate pages={pages} page={page} isAdmin={true}/>\n        </>\n        )}\n\n\n\n\n\n       </>\n\n    )\n\n}\n\nexport default ProductListScreen\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProductEditScreen.js",["243"],"import axios from 'axios'\nimport React ,{useState ,useEffect} from 'react'\nimport {Link} from 'react-router-dom'\nimport {Form, Button} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\nimport Loader from '../components/Loader.js'\nimport {listProductDetails, updateProduct} from '../actions/productActions.js'\nimport FormContainer from '../components/FormContainer.js'\nimport {PRODUCT_UPDATE_RESET} from '../constants/productConstants.js'\n\n\n\n\nconst ProductEditScreen= ({match, history}) => { //he is taking location & history out of the props, normally it is props.location\n    const productId = match.params.id\n\n  const [stageName,setStageName] = useState('')\n  //const [email,setEmail] = useState('')\n  const [outsidePrice,setOutsidePrice] = useState('')\n  const [agreedPrice,setAgreedPrice] = useState('')\n  const [price,setPrice] = useState('')  \n  const [image,setImage] = useState('')\n  const [brand,setBrand] = useState('')\n  const [size,setSize] = useState('')\n  const [countInStock,setCountInStock] = useState('')\n  const [description,setDescription] = useState('')\n  const [uploading,setUploading] = useState(false)\n  const [vendor, setVendor] = useState('')\n  const [vendorAddress,setVendorAddress] = useState('')\n  const [vendorAccountNumber,setVendorAccountNumber] = useState('')\n\n  const dispatch = useDispatch() //dont forget that real dispatches only take place in action creators, you are only calling useDispatch here\n\n  const productDetails = useSelector(state => state.productDetails);\n  const {loading, error,product} = productDetails\n\n  const productUpdate = useSelector(state => state.productUpdate);\n  const {loading:loadingUpdate, error:errorUpdate,success:successUpdate } = productUpdate\n\n  const userLogin = useSelector(state => state.userLogin);\n  const {userInfo } = userLogin\n   console.log(userInfo)\n \n useEffect(()=> { \n    if(!userInfo){\n      history.push('/login')}\n\n      if(userInfo && userInfo.isTeller){\n        history.push('/teller/transactionlist')\n     }\n    },[userInfo,history])\n\n  useEffect( () => {\n    if(successUpdate){\n      dispatch({type:PRODUCT_UPDATE_RESET})\n      history.push('/admin/productlist')\n    } \n    else{\n      if(product && !product.name ){ //we are just checking if the product has a name here to see if user object exists\n        dispatch(listProductDetails(productId))\n      }else {\n        setStageName(product.stageName)\n        setPrice((product.price).toFixed(2))\n        setOutsidePrice(product.outsidePrice)\n        setAgreedPrice(product.agreedPrice)\n        setImage(product.image)\n        setBrand(product.brand)\n        setSize(product.size)\n        setCountInStock(product.countInStock)\n        setDescription(product.description)\n        /*I NEED THIS VENDOR INFORMATION WHEN IT COMES TO DISTRIBUTING MONEY PER PRODUCT AND PICKUP ADDRESSES */\n        setVendor(userInfo.name)\n        setVendorAddress(userInfo.merchantAddress)\n        setVendorAccountNumber(userInfo.nuban)\n      }\n    }\n\n},[dispatch,productId,history,successUpdate,product]) /*i deleted user as a useEffect dependency */\n\nconst uploadFileHandler =async (e)=>{\n  const file = e.target.files[0] //we get access to this as an array, because you have the ability to upload multiple files\n  const formData = new FormData()\n  formData.append('image',file)\n  setUploading(true)\n\n   try{\n     const config ={\n     headers:{ \n       'Content-Type':'multipart/form-data'\n     }\n    }\n     const {data} =await axios.post('/api/upload', formData ,config)\n     setImage(data)\n     setUploading(false)\n   }\n   catch(error){\n      console.log(error)\n     setUploading(false)\n   }\n}\n\nconsole.log(productDetails)\n\n  const submitHandler = (e) => {\n          e.preventDefault()\n  dispatch(updateProduct({\n    _id:productId,\n    name:`${stageName} ${size} (${brand})`,\n    stageName,\n    agreedPrice,\n    outsidePrice,\n    price:agreedPrice*((outsidePrice+agreedPrice)/(2*agreedPrice)),\n    brand,\n    vendor,\n    vendorAddress,\n    vendorAccountNumber,\n    size,\n    image,\n    description,\n    countInStock\n  }))\n\n  }\n\n    return (\n        <>\n    <Link to='/admin/productlist' className='btn btn-primary my-3'>Go back</Link>\n\n    <FormContainer>\n    <h1> Create / Edit Product</h1>\n   {loadingUpdate &&<Loader/>}\n    {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n\n    {loading? <Loader/>:error?<Message variant='danger'>{error}</Message>:(\n      <Form onSubmit={submitHandler}>\n {/*1*/}      <Form.Group controlId='name'>\n\n       <Form.Label>  Name</Form.Label>\n       <Form.Control type='name' placeholder={ stageName === product.stageName? (product.stageName):\"Enter name\"} value={stageName} onChange={(e)=>setStageName(e.target.value)}></Form.Control>\n        {/*the value of form control is form control from the state. You need to read about form group from react bootstrap*/}\n      </Form.Group>\n\n      <br/>\n         <p >NOTE: PLEASE AVOID ENTERING SIZES IN THE ENTRY ABOVE, E.G \"33CL\" OR \"50KG\", THERE IS AN ENTRY FOR THAT BELOW.</p>\n           <br/>\n\n {/*2*/}        <Form.Group controlId='price'>\n\n         \n        <Form.Label> Agreed Price(₦) </Form.Label>\n        <Form.Control type='number' placeholder={ agreedPrice === product.agreedPrice? ((agreedPrice*1).toFixed(2)):\"Enter price\"} value={agreedPrice} onChange={(e)=>setAgreedPrice(e.target.value)}></Form.Control>\n         {/*the value of form control is form control from the state. You need to read about form group from react bootstrap*/}\n       </Form.Group>\n        <br/>\n       <p>NOTE: PLEASE ENTER THE PRICE YOU AGREED TO SELL THIS PRODUCT TO BRIDGEWAY</p>\n       <br/>\n       {/*3*/}        {/*<Form.Group controlId='discount percentage'>\n\n        IN CASE I NEED TO REVERT BACK TO PERCENTAGES\n       <Form.Label>  Percentage discount (as agreed upon with bridgeway MFB) </Form.Label>\n        <Form.Control type='string' readOnly placeholder={ '10%'} value={'10%'} ></Form.Control>\n         \n    </Form.Group>*/}\n\n       <Form.Group controlId='discount percentage'>\n<Form.Label> Regular Price (₦) </Form.Label>\n        <Form.Control type='number' placeholder={ outsidePrice === product.outsidePrice? ((outsidePrice*1).toFixed(2)):\"Enter price\"} value={outsidePrice} onChange={(e)=>setOutsidePrice(e.target.value)} ></Form.Control>\n         \n       </Form.Group>\n       <br/>\n       <p>NOTE: PLEASE ENTER THE PRICE YOUR PRODUCT IS NORMALLY SOLD FOR</p>\n       <br/>\n\n\n\n {/*4*/}      <Form.Group controlId='image'>\n\n        <Form.Label>  Image </Form.Label>\n        <Form.Control type='text' placeholder= { image === product.image? image:\"Enter image url\"}  value={image} onChange={(e)=>setImage(e.target.value)}></Form.Control>\n        {/*the value of form control is form control from the state. You need to read about form group from react bootstrap*/}\n         <Form.File id=\"image-file\" label=\"choose file\" custom onChange={uploadFileHandler}>\n           {uploading &&<Loader/>}\n         </Form.File>\n       </Form.Group>\n\n\n  {/*5*/}      <Form.Group controlId='brand'>\n\n              <Form.Label>  Brand </Form.Label>\n              <Form.Control type='text' placeholder={ price === product.brand? (brand):\"enter brand\"} value={brand} onChange={(e)=>setBrand(e.target.value)}></Form.Control>\n               {/*the value of form control is form control from the state. You need to read about form group from react bootstrap*/}\n             </Form.Group>\n             <br/>\n         <p>NOTE: PLEASE ENTER ONLY THE BRAND NAME E.G PEAK MILK AS \"PEAK\" AND DANO MILK AS \"DANO\" </p>\n           <br/>\n\n {/*6*/}        <Form.Group controlId='countInStock'>\n\n                <Form.Label>  Count in Stock </Form.Label>\n                <Form.Control type='number' placeholder={ countInStock === product.countInStock? (countInStock):\"Enter count in stock\"} value={countInStock} onChange={(e)=>setCountInStock(e.target.value)}></Form.Control>\n                     {/*the value of form control is form control from the state. You need to read about form group from react bootstrap*/}\n             </Form.Group>\n\n             <br/>\n         <p style={{color:'red'}}>NOTE: PLEASE CHECK YOUR STOCK REGULARLY, TO UPDATE IT , AS PRODUCTS THAT HAVE NO STOCK ARE NOT DISPLAYED ON THE MARKETPLACE </p>\n           <br/>\n\n {/*7*/}        <Form.Group controlId='size'>\n\n                <Form.Label>  Size  </Form.Label>\n                \n                <Form.Control type='text' placeholder={ size === product.size? (size):\"Enter size\"} value={size} onChange={(e)=>setSize(e.target.value)}></Form.Control>\n                                 {/*the value of form control is form control from the state. You need to read about form group from react bootstrap*/}\n               </Form.Group>\n\n               <br/>\n         <p >NOTE: IF YOUR PRODUCT COMES IN A PACK, STATE THE INDIVIDUAL ITEM, THEN THE NUMBER IN THE PACK, E.G <span style={{color:'red'}}>\"33CL 12 PACK\"</span> FOR A PACK OF 12 33CL CANS, OTHERWISE JUST STATE THE SIZE OF THE ITEM E.G \"50KG\"</p>\n           <br/>\n\n{/*8*/}       <Form.Group controlId='description'>\n\n                  <Form.Label>  Description</Form.Label>\n                  <Form.Control as ='textarea' rows={5} placeholder={ description === product.description? (description):\"enter description\"} value={description} onChange={(e)=>setDescription(e.target.value)}></Form.Control>\n                                               {/*the value of form control is form control from the state. You need to read about form group from react bootstrap*/}\n                 </Form.Group>\n\n\n\n        <Button type='submit' variant='primary'>Register On Marketplace</Button>\n      </Form>\n    )}\n\n     {/*{message && <Message variant='danger'>{message}</Message>}\n     {error && <Message variant='danger'>{error}</Message>}\n     {loading && <Loader/>}*/}\n\n\n\n\n    </FormContainer>\n        </>\n\n\n\n    )\n\n}\n\nexport default ProductEditScreen\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/OrderScreen.js",["244","245","246","247","248","249","250","251","252","253"],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/PlaceOrderScreen.js",["254","255","256","257","258","259"],"import React, {useEffect,useState} from 'react'\nimport {Link} from 'react-router-dom'\nimport {LinkContainer} from 'react-router-bootstrap'\nimport { Button, Row ,Col, Form , ListGroup, Image, Card, FormControl} from 'react-bootstrap'\n//you may need to import form container, seeing as you have used a form\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\n\nimport {updateCountInStock} from '../actions/productActions.js'\nimport {createOrder} from '../actions/orderActions.js'\nimport {answerVerify} from '../actions/userActions.js'\nimport CheckoutSteps from '../components/CheckoutSteps.js'\n\n\n\nconst PlaceOrderScreen =  ({history}) => {\n   const dispatch = useDispatch()\n   const cart = useSelector(state => state.cart)\n   \n\n   const userLogin = useSelector(state => state.userLogin)\n   const {loading,error:error2,userInfo} = userLogin\n   \n  \n\n   const clientId = userInfo._id\n   const userVerify = useSelector(state => state.userVerify)\n   const {loading:loading1 , confirmedState} = userVerify\n\n   const orderCreate = useSelector(state => state.orderCreate )\n  const {order,success,error} = orderCreate /*come change this back to error later */\n  \n// confirmedStates.confirmedStates is initially empty and that breaks the whole thing -confirmedState that you just extracted, is an object mind you, so its confirmedState.confirmedState\n\n  //STATE REGARDING USER CONFIRMATION\n  const [productsOrderedArray,setProductsOrderedArray ] = useState([])\n const  [productQuantitiesArray,setProductQuantitiesArray ] = useState([])\n const  [productNamesArray,setProductNamesArray ] = useState([])\n  const [consentQuestion, setConsentQuestion] =useState('hidden') \n  const [confirmQuestion ,setConfirmQuestion]=useState('')\n  const [confirmedStates,setConfirmedStates] = useState('')\n  const [personalIdAnswer, setpersonalIdAnswer] = useState('')\n  const [confirmedMessage, setConfirmedMessage] = useState('')\n  const [presentQuestion, setPresentQuestion] = useState('')\n  const [personalIdQuery, setPersonalIdQuery] = useState('')\n  const [proceed,setProceed] = useState('')\n  /*THE FACE OF THE BUTTON UNDER THE CONFIRM SECTION \n  i have put this in the use effect, lets see if it works well*/\n  console.log(productsOrderedArray, productQuantitiesArray)\n\n\n  let buttonLabel = 'Send'\n  if(confirmedStates === 'true'){\n   buttonLabel = 'PLACE ORDER'\n  }else if(confirmedStates === 'false'){\n     buttonLabel = 'TRY AGAIN'\n  }else if(confirmedStates === 'no stock'){\n    buttonLabel = 'GO TO CART'\n  }\n  \n  else if(proceed === 'true'){\n    buttonLabel = 'ORDER DETAILS'\n }\n  else{buttonLabel='Send'}\n    \n  //CALCULATING THE PRICES\n  const addDecimals = (num) => { return(Math.round(num*100)/100).toFixed(2) }\n\n    cart.itemsPrice = addDecimals(cart.cartItems.reduce((acc, item)=>acc +item.price*item.qty,0))\n\n    cart.deliveryCost = addDecimals(cart.itemsPrice > 10000 ? 0 : 500)\n\n    /*cart.taxPrice = addDecimals(Number((0.10*cart.itemsPrice).toFixed(2)))*/\n\n    cart.totalPrice = (Number(cart.itemsPrice) /*+ Number(cart.deliveryCost) + Number(cart.taxPrice)*/).toFixed(2)\n   //if your total price is looking funny, just unwrap addDecimals and wrap in .toFixed(2)\n    const orderTotal = cart.totalPrice\n  \n   \n  /* useEffect(()=>{\n    window.location.reload()\n   },[dispatch])*/ \n\n\n\n  useEffect(()=>{  \n    if(!userInfo){\n    history.push(`/login`)\n    }\n\n    if(userInfo && userInfo.isTeller){\n      history.push('/teller/transactionlist')\n   }\n    \n   \n   if(cart){\n    setProductsOrderedArray(cart.cartItems.map((item)=>(item.product))) \n    setProductQuantitiesArray(cart.cartItems.map((item)=>(item.qty)))\n    setProductNamesArray(cart.cartItems.map((item)=>(item.name)))\n   }\n   \n     \n    if( confirmedState && confirmedState.confirmedState === 'true'){ \n    /*dispatch(createOrder({\n      orderItems:cart.cartItems,\n      shippingAddress:cart.shippingAddress,\n       \n      itemsPrice:cart.itemsPrice,\n      deliveryCost:cart.deliveryCost,\n      taxPrice:cart.taxPrice,\n      totalPrice:cart.totalPrice\n      \n    }))*/\n \n    setConfirmedStates('true')\n    setConfirmedMessage('green banner')\n    }\n    else if( confirmedState && confirmedState.confirmedState === 'false'){\n      setConfirmedStates('false')\n      setConfirmedMessage('red banner')\n    }else if(confirmedState && confirmedState.confirmedState === 'insufficientFunds'){\n      setConfirmedStates('insufficient')\n      setConfirmedMessage('insufficient banner')\n    }else if(confirmedState && confirmedState.confirmedState.substring(0,6) === 'We are'){\n      setConfirmedStates('no stock')\n      setConfirmedMessage(confirmedState.confirmedState)\n\n    }\n   \n  \n\n  },[confirmedState,confirmedStates,userInfo,dispatch,cart/*history,success,order._id*/])\n\n  useEffect(()=>{\n    if(order){\n      setProceed('true')\n      console.log(order)\n    }\n    else{\n      console.log(\"ORDER IS STILL EMPTY!!\")\n    }\n      \n    /*window.history.pushState(null,'','/')*/\n   },[order])\n\nconst showConsentHandler = () => {\n  setConsentQuestion('visible')\n}\n\nconst hideConsentHandler = () => {\n  setConsentQuestion('hidden')\n  setConfirmQuestion('hidden')\n}\n\nconst confirmHandler = () => {\n  setConfirmQuestion('visible')\n  \n  //RANDOM QUESTION CODE\n  const randomNumber = Math.floor((Math.random()*5))\n  const questionsArray = ['What is your mother\\'s first name ?','What is your shoe size?','What is the name of your closest friend ?','What is the name of the street you lived on as a child ?','What is the name of the first place you worked at (employment) ?']\n   const propertyArray = ['momFirstName','shoeSize','closestFriend','childhoodStreet','firstEmployment'] \n   \n   const presentQuestion = questionsArray[randomNumber] \n   setPresentQuestion(presentQuestion) /*i did a little function scope here */\n\n   const personalIdQuery = propertyArray[randomNumber]\n   setPersonalIdQuery(personalIdQuery) /*i did a little function scope here (same principle)*/\n}\n\n\n   \n   \n   \n/*maybe place this bit of code in a better position \n if(confirmedState === 'true'){\n  setConfirmedMessage('green banner')\n\ndispatch(createOrder({\n  orderItems:cart.cartItems,\n  shippingAddress:cart.shippingAddress,\n  paymentMethod:cart.paymentMethod,\n  itemsPrice:cart.itemsPrice,\n  shippingPrice:cart.shippingPrice,\n  taxPrice:cart.taxPrice,\n  totalPrice:cart.totalPrice\n\n}))\n}\nelse if(confirmedState === 'false'){\nsetConfirmedMessage('red banner')\n}\n */\n\nconst submitHandler = (e) => {\n  e.preventDefault()\n\n  /*I WANT THIS BUTTON TO SERVE MULTIPLE FUNCTIONS, FIRST OF WHICH IS TO CHECK IF THE PERSONS ANSWER MATCHES UP, VIA THE DISPATCH BELOW */\n  if(confirmedStates === ''){dispatch(answerVerify(clientId,personalIdQuery, personalIdAnswer,orderTotal,productsOrderedArray,productNamesArray))\n  \n  }else if(confirmedStates === 'true'){\n    dispatch(createOrder({\n      orderItems:cart.cartItems,\n      shippingAddress:cart.shippingAddress,\n       /* i removed paymentMethod:cart.paymentMethod */\n      itemsPrice:cart.itemsPrice,\n      deliveryCost:cart.deliveryCost,\n      taxPrice:cart.taxPrice,\n      totalPrice:cart.totalPrice\n      \n    }))\n      dispatch(updateCountInStock(productsOrderedArray,productQuantitiesArray))  \n      \n   }\n  else if(confirmedStates === 'false'){\n   \n     /*buttonLabel ='SEND'*/\n    const randomNumber = Math.floor((Math.random()*5))\n  const questionsArray = ['What is your mother\\'s first name ?','What is your shoe size?','What is the name of your closest friend ?','What is the name of the street you lived on as a child ?','What is the name of the first place you worked at (employment) ?']\n   const propertyArray = ['momFirstName','shoeSize','closestFriend','childhoodStreet','firstEmployment'] \n   \n   const presentQuestion = questionsArray[randomNumber] \n   setPresentQuestion(presentQuestion) \n\n   const personalIdQuery = propertyArray[randomNumber]\n   setPersonalIdQuery(personalIdQuery) \n\n   confirmedState.confirmedState = '' /*you gotta dispatch something here that'll make confirmedState.confirmedState === '' */\n  setConfirmedMessage('')\n  setConfirmedStates('')\n  }else if(confirmedStates === 'no stock'){\n    history.push('/cart')\n  }\n\n  /*if(proceed==='true'){\n    history.push(`/order/${order._id}`)\n  }*/\n  \n}\n \n\n        return(\n         <>\n        <CheckoutSteps step1 step2 step3 step4/>\n        <Row>\n         <Col md={8}>\n\n          <ListGroup variant=\"flush\">\n           <ListGroup.Item>\n             <h2>Delivery</h2>\n             <p>\n             <strong>Address:</strong>\n             {cart.shippingAddress.address},{cart.shippingAddress.city}{' '},\n             {cart.shippingAddress.postalCode}{' '},{cart.shippingAddress.country}\n             </p>\n            </ListGroup.Item>\n\n             {/* <ListGroup.Item>\n               <h2>Payment Method</h2>\n                <strong>Method:</strong>\n                {cart.paymentMethod /*this item doesnt exist anymore }\n             </ListGroup.Item> */}\n\n             <ListGroup.Item>\n              <h2>Order Items</h2>\n\n               {cart.cartItems.length === 0 ? <Message>Your cart is empty </Message>:(\n                <ListGroup variant=\"flush\">\n                  {cart.cartItems.map((item, index) =>(\n\n                    <ListGroup.Item key ={index}>\n                    <Row>\n                     <Col md={1}>\n                      <Image src={item.image} alt={item.name} fluid rounded/>\n                      <Link to={`product/${item.product}`/*remember product property is the id in the cart*/}>\n                       {item.name}\n                      </Link>\n                      </Col>\n                       <Col md={4}>\n                       {item.qty} x ₦{(item.price*1).toFixed(2)} = {(item.qty*item.price).toFixed(2)}\n                       </Col>\n\n                      </Row>\n\n                    </ListGroup.Item>\n\n                  ))}\n                </ListGroup>\n               ) }\n            </ListGroup.Item>\n          </ListGroup>\n         </Col>\n\n         <Col md={4}>\n           <Card>\n              <ListGroup>\n               <ListGroup.Item>\n                <h2>Order Summary</h2>\n               </ListGroup.Item>\n\n               <ListGroup.Item>\n                <Row>\n\n                 <Col>Items </Col>\n                 <Col>₦ {cart.itemsPrice} </Col>\n\n                </Row>\n               </ListGroup.Item>\n\n               {/*<ListGroup.Item>\n                <Row>\n\n                 <Col>Delivery Cost </Col>\n                 <Col>₦ {cart.deliveryCost} </Col>\n\n                </Row>\n               </ListGroup.Item>*/}\n\n               {/*<ListGroup.Item>\n                <Row>\n\n                 <Col>Tax </Col>\n                 <Col>₦ {cart.taxPrice} </Col>\n\n                </Row>\n               </ListGroup.Item> */}\n\n               <ListGroup.Item>\n                <Row>\n\n                 <Col>Total </Col>\n                 <Col>₦ {cart.totalPrice} </Col>\n\n                </Row>\n               </ListGroup.Item>\n                {/*place error here*/}\n                <ListGroup.Item>\n                 {error&&<Message variant='danger'>{error} </Message>}\n                </ListGroup.Item>\n\n               <ListGroup.Item> <Button type='button' className='btn-block' disabled={cart.cartItems.length === 0 || confirmedStates === 'true'} onClick={showConsentHandler}>\n               Proceed to Place Order\n               </Button>\n               </ListGroup.Item>\n\n             </ListGroup>\n           </Card>\n         \n           {/*okay so I want this card to be activated when the place order button has been clicked*/\n           /*there should be a consent radio button, that confirms for the user's permission, or hides*/\n           /*the card if the user says no */}  \n             { consentQuestion === 'visible' &&\n               <>\n             <Card>\n               <ListGroup>\n             <ListGroup.Item>\n                <Row>\n\n                 <Col>Do you agree to having ₦ {cart.totalPrice} taken from your account ?</Col>\n                </Row>\n          \n               </ListGroup.Item>\n\n               <ListGroup.Item>\n                <Row>\n                  <Col></Col>\n                Yes{' '}\n                  <Col>\n                  <input type=\"radio\"  id=\"yes\" value=\"yes\" onChange={confirmHandler}/>\n                  </Col>\n                 \n                  No{' '}\n                  <Col>\n                  <input type=\"radio\" id=\"no\" value=\"no\"  onChange={hideConsentHandler} />\n                  </Col>\n                  \n                </Row>\n          \n               </ListGroup.Item>\n               </ListGroup>\n             </Card>\n             </>}\n             { confirmQuestion === 'visible' &&\n               <>\n             <Card>\n\n             <ListGroup>\n             <ListGroup.Item>\n                <Row>\n\n                 <Col><strong>Just so we know it's you:</strong></Col>\n                </Row>\n                {/*<br/>*/}\n               </ListGroup.Item>\n               </ListGroup>\n\n               <ListGroup>\n             <ListGroup.Item>\n                <Row>\n\n                 {/*<Col>{presentQuestion}</Col>*/}\n                </Row>\n        <Form onSubmit={submitHandler}>\n          <Form.Group controlId='reply-message'>\n\n           <Form.Label>{presentQuestion} </Form.Label>\n            {\n           confirmedMessage=== 'green banner'?\n            (<Message variant='success'>Verified!</Message>):(\n             \n              confirmedMessage=== 'insufficient banner'?\n              (<Message variant='danger'>Insufficient Balance, please fund your account and try again.</Message>)\n              :(\n                confirmedMessage.substring(0,6)=== 'We are'?\n              ( <>\n              <Message variant='danger'>{confirmedMessage}</Message>\n              <Message variant='primary'>{`If you still see this message after doing so, please reload the screen`}</Message>\n              </>)\n                :(\n              proceed==='true'?(<Message variant='success'>Order Placed!</Message>):(\n                confirmedMessage === 'red banner'?\n            (<Message variant='danger'>Not verified. </Message>):\n              (<Form.Control as =\"textarea\" variant='danger' rows={1} plaintext value = {personalIdAnswer} onChange ={(e)=>{setpersonalIdAnswer(e.target.value)}}></Form.Control>)\n            )\n        )))\n            }\n            {proceed==='true' &&(<Message variant='success'>Order Placed!</Message>)}\n              \n              \n               {/*i hope to change the text-area to a message component,\n                regardless of what comes back, if it's positive, it should close the whole\n                thing, just like the no option does, but this time\n                , disabling the place order button. if its negative, consider a fail message \n                saying \"payment confirmation failed\" where the payment confirmed would have been,\n                maybe also close the whole thing */}\n           <br/>\n          {proceed==='' &&<Button type='submit' variant='primary'>{buttonLabel}</Button>}\n           {'  '}\n          {proceed==='true' && <LinkContainer to=\"/\">\n          <Button  variant='primary'>GO HOME</Button>\n          </LinkContainer>}\n          {'  '}\n          {proceed==='true' && <LinkContainer to={`/order/${order._id}`}>\n          <Button  variant='primary'>ORDER DETAILS</Button>\n          </LinkContainer>}\n          \n         </Form.Group>\n      </Form>\n                <Row>\n                  \n                </Row>\n               </ListGroup.Item>\n               </ListGroup>\n             </Card>\n             </> }\n         </Col>\n        </Row>\n         </>\n\n        )\n}\n\n\nexport default PlaceOrderScreen;\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/FormContainer.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/CheckoutSteps.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/orderConstants.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Message.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/cartActions.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/productActions.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/SearchBox.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Paginate.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Loader.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/userActions.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Meta.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/orderActions.js",["260"],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/productComponent.js",["261"],"import React from 'react'\nimport {Link} from 'react-router-dom'\nimport {Card} from 'react-bootstrap'\nimport Rating from './Rating'\nimport {useDispatch, useSelector} from 'react-redux'\n\n\nconst ProductComponent = ({product}) => {\n\n  const userLogin = useSelector(state => state.userLogin)\n  const {userInfo} = userLogin\n  \n\n\n\n\n  return (\n<Card className='my-3 p-3 rounded'>\n      <Link to={`/product/${product._id}`}>\n       <Card.Img src={product.image} variant='top'/>\n      </Link>\n {/*REMEMBER, LINK IS TO='', ROUTE IS PATH=''*/}\n\n  <Card.Body>\n     <Link to={`/product/${product._id}`}>\n      <Card.Title as='div'>\n       <strong>{product.stageName}</strong>\n      </Card.Title>\n     </Link>\n\n\n    <Card.Text as='div'>\n    <span style={{ fontSize:'0.8rem'}}><Rating value={product.rating} text={`${product.numReviews} review(s)`} color='#f8e825'/></span>\n     {/*theres gonna be a rating component eventually, and its there now*/}\n    </Card.Text>\n\n    <Card.Text as='h3'>\n     ₦ {(product.price*1).toFixed(2)}\n     </Card.Text>\n     \n      <Card.Text as='h6'>\n      Vendor: {userInfo && userInfo.isMerchant ?userInfo.name:'Bridgeway'}\n  </Card.Text> \n\n  </Card.Body>\n</Card>\n\n  )\n}\n\nexport default ProductComponent\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/ProductCarousel.js",["262","263","264","265","266"],"import React ,{useEffect} from 'react'\nimport {Link} from 'react-router-dom'\nimport {Carousel,Image} from 'react-bootstrap'\nimport {useDispatch,useSelector} from 'react-redux'\nimport Loader from './Loader'\nimport Message from './Message'\nimport {listTopProducts} from '../actions/productActions'\n\nconst ProductCarousel = () => {\n   const dispatch = useDispatch()\n\n   const productTopRated = useSelector(state => state.productTopRated)\n   const {loading,error,products } = productTopRated\n\n    /* useEffect(()=>{\n      dispatch(listTopProducts())\n    },[dispatch])*/ \n\n    \n    return loading ? <Loader/>:error?<Message variant='danger'>{error}</Message> :(\n      <>\n       <Carousel variant=\"dark\" fade pause='hover' className=\"bg-dark carousel-main\">\n       \n   {/*image 1 */}    <Carousel.Item  interval={3500}>\n           \n            <Image src={'/images/festival.jpg'} alt={'african kids running'} fluid/>\n            <Carousel.Caption className=\"carousel-caption\">\n\n             <h1>\n              When we come together...\n             </h1>\n            </Carousel.Caption>\n           \n          </Carousel.Item>\n        \n    {/*image 2 */}       <Carousel.Item  interval={3500}>\n           \n            <Image src={'/images/womansmiling.jpg'} alt={'a smiling woman carrying a bunch of bananas'} fluid/>\n            <Carousel.Caption className=\"carousel-caption\">\n\n             <h1>\n             life becomes a litte easier ...\n             </h1>\n            </Carousel.Caption>\n          \n          </Carousel.Item>\n         \n     {/*image 3 */}      <Carousel.Item  interval={3500}>\n           \n            <Image src={'/images/finalised-hero.jpg'} alt={'bridgway logo '} fluid/>\n            <Carousel.Caption className=\"carousel-caption-special\">\n\n             <h1><span className=\"red\">Bridgeway</span> <span className=\"bright-blue\">Co-operative</span> </h1>\n              <center>\n             <h2 className=\"vanish\">\n              Search or pick your products.\n             </h2>\n             </center>\n             \n            </Carousel.Caption>\n           \n          </Carousel.Item>\n        \n        \n        {/*products.map(product =>(\n          <Carousel.Item key={product._id} interval={2500}>\n           <Link to={`/product/${product._id}`}>\n            <Image src={product.image} alt={product.name} fluid/>\n            <Carousel.Caption className=\"carousel-caption\">\n\n             <h4>\n              {product.name} - ₦{product.price}\n             </h4>\n            </Carousel.Caption>\n           </Link>\n          </Carousel.Item>\n        ))*/}\n\n       </Carousel>\n\n      </>\n\n    )\n\n}\n\n\nexport default ProductCarousel\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Rating.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/TransactionScreen.js",["267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291"],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/TransactionListScreen.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/PrintOrderScreen.js",["292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308"],"import React, {useEffect, useState} from 'react'\nimport axios from 'axios'\nimport {Link} from 'react-router-dom'\nimport {LinkContainer} from 'react-router-bootstrap'\nimport {PayPalButton} from 'react-paypal-button-v2'\nimport { Button, Row ,Col ,Form, ListGroup, Image, Card, ListGroupItem} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\n//import {getUserDetails, updateUserProfile} from '../actions/userActions.js'\nimport {getOrderDetails,payOrder,deliverOrder,merchantApproveOrder/*,merchantLockOrder*/} from '../actions/orderActions.js'\nimport Loader from '../components/Loader.js'\nimport {ORDER_PAY_RESET,ORDER_DELIVER_RESET } from '../constants/orderConstants.js'  //HE MADE AN EXCEPTION HERE DISPATCHING STRAIGHT FROM CONSTANTS WITHOUT CALLING ACTIONS, TO MAKE THINGS FASTER\n\n\nconst PrintOrderScreen =  ({match,history}) => {\n     const [sdkReady,setSdkReady] = useState('false') // this is our piece of local state for when the SDK is ready\n\n\n\n   const orderId = match.params.id\n   const dispatch = useDispatch()\n  //const cart = useSelector(state => state.cart) come back and check why you commented this out\n\n const [merchantProductsArray,setMerchantProductsArray] = useState('') /*i never actually change the state of this */\n const [promisedQtyArray,setPromisedQtyArray] = useState('')\n const [committedValue, setCommittedValue] = useState('')\n const [productId,setProductId] = useState('')\n const [highlight,setHighlight] = useState('13px')\n const [colour, setColour] = useState('black')\n const [customerView, setCustomerView] = useState(false)\n const [riderView,setRiderView] = useState(false)\n \n \n const orderDetails = useSelector((state) => state.orderDetails )\n  const {order,loading,error} = orderDetails\n   /*console.log(order)*/\n  \n \n\n   \n\n   const userLogin = useSelector((state) => state.userLogin )\n  const {userInfo} = userLogin\n\n  const orderPay = useSelector((state) => state.orderPay )\n  const {loading:loadingPay, success:successPay} = orderPay //this is renaming what you destructured, not making a new object\n\n  const orderDeliver = useSelector((state) => state.orderDeliver )\n  const {loading:loadingDeliver, success:successDeliver} = orderDeliver\n\nif(!loading){\n  //calculating the prices for orders\n const addDecimals = (num) => { return(Math.round(num*100)/100).toFixed(2) }\n\n order.itemsPrice = addDecimals(order.orderItems.reduce((acc, item)=>acc +item.price*item.qty,0))\n order.promisedQtyArray = promisedQtyArray\n order.merchantProductsArray = merchantProductsArray\n /*order.initalState = order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item) => (item.promisedQty))*/\n}\n\n const initialState = function(order,item){\n  const vendorArray = order.orderItems.filter((item) => (item.vendor === userInfo.name))\n  setMerchantProductsArray(vendorArray)\n  const promisedArray =  order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item) => (promisedQtyArray[vendorArray.indexOf(item)]))\n  setPromisedQtyArray(promisedArray)\n  console.log(typeof(promisedQtyArray),promisedQtyArray)\n }\n\n\n\n const liveUpdate =function(e,item){\n   /*const vendorArray = order.orderItems.filter((item) => (item.vendor === userInfo.name))\n    setMerchantProductsArray(vendorArray)*/\n/*const copyArray =  order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item) => (item.promisedQty)) /*i need to call this ONCE,not everytime the function is called so bring it out of this function */\n             const copyArray = promisedQtyArray         \n         copyArray[merchantProductsArray.indexOf(item)] = Number(e.target.value)\n    \n                     setPromisedQtyArray(copyArray)\n                     /*console.log(promisedQtyArray,merchantProductsArray)*/\n                     console.log(copyArray,promisedQtyArray)\n                    }\n\n//AN ARRAY TO CORRESPOND WITH THE LENGTH THE VENDORS ITEMS THAT ARE DISPLAYED ON SCREEN, SO WE CAN EASILY CHANGE ITEM AMOUNTS ON SCREEN\n/*let promisedQtyArray = order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item, index) =>(\n  0\n))*/\n\n//AN ARRAY TO FILTER ORDER ITEMS THAT HAVE A PARTICULAR VENDOR, TO HELP US PICK promisedQtyArray element, in the order items  \n/*const merchantProductsArray =  order.orderItems.filter((item) => (item.vendor === userInfo.name))*/\n\n/*useEffect(()=>{\n  if(!order){promisedArray = []}\n  else{ promisedArray =  order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item) => (item.promisedQty))\nsetPromisedQtyArray(promisedArray)}\n\n  if(!order){vendorArray =[]}\n  else{vendorArray=order.orderItems.filter((item) => (item.vendor === userInfo.name))}\n  setMerchantProductsArray(vendorArray)\n  \n\n},[order,promisedArray,vendorArray])*/\n\n\n\n\n\nuseEffect(()=> { \n       if(!userInfo){\n         history.push('/login')\n       }\n\n       if(userInfo && userInfo.isTeller){\n        history.push('/teller/transactionlist')\n     }\n      \n       /*setPromisedQtyArray(order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item, index) =>(\n        0\n      ))) \n       setMerchantProductsArray(order.orderItems.filter((item) => (item.vendor === userInfo.name)))*/\n\n  const addPayPalScript = async () => {\n    const {data:clientId} = await axios.get('/api/config/paypal')\n    const script = document.createElement('script') //this script being created will not be in the source code, cuz it comes to life AFTER the source code loads\n    script.type ='text/javascript'\n    document.body.appendChild(script)\n    script.async=true\n    script.onload =()=> {  \n        setSdkReady(true)\n    }\n    script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}` //this is the software development kit that paypal gives us\n    \n  }\n\n\n  if(!order||successPay||successDeliver){\n    dispatch({type:ORDER_PAY_RESET})\n    dispatch({type:ORDER_DELIVER_RESET})  //AGAIN HE MADE AN EXCEPTION HERE AND DISPATCHED STRAIGHT FROM CONSTANTS SO HE CAN KEEP IT SHORT\n\n    dispatch(getOrderDetails(orderId))}\n\n  else if(!order.isPaid){\n    if(!window.paypal){\n      addPayPalScript()\n    }\n    else{ setSdkReady(true) }\n  }\n},[dispatch,orderId,successPay,successDeliver,order,history,userInfo])\n\nconst successPaymentHandler = (paymentResult) => {\n   console.log(paymentResult)\n  dispatch(payOrder(orderId, paymentResult))\n\n}\n\nconst deliverHandler = ()=> {\n\n  dispatch(deliverOrder(order))\n  window.print()\n  window.location.reload()\n}\n\nconst customerPrepHandler = ()=> {\n   setCustomerView(true)\n    \n}\n\nconst riderPrepHandler = ()=> {\n\n  setRiderView(true)\n}\n\n\n\n\n /*is there a factor of 18/19 to consider for, --yes */\n/*const merchantTotal = order.orderItems.filter((item) => (item.vendor === userInfo.name)).reduce((acc, item)=>acc +(item.agreedPrice*item.qty),0)*/\n\n        return loading ?( <Loader/> ):error ?( <Message variant='danger'>{error} </Message>):\n(<>\n\n<h1>Order ID: {order._id}</h1>\n{ (!customerView && !riderView ) &&\n        <>\n        <Card>\n         <ListGroup>\n           <ListGroup.Item>\n            \n           <Row>\n               <h5>NOTE: </h5><span> After you click any of the buttons below,  refresh the screen to return to this page</span>\n               </Row>\n              <br/>\n              \n\n            <Row>\n               <h5>INSTRUCTIONS:</h5></Row>\n             \n             <Row>\n               Click on the two buttons below to print a receipt for the customer and a dispatch list for the dispatch rider\n       <span style={{color:'red'}}> YOU MUST PERFORM THE PRINT ACTION TWICE,</span> once for the dispatch rider and a second time as a reciept for the customer. You must click one of the two prepare buttons before you print. They are explained as follows:\n               \n            </Row>\n            \n            <hr/>\n            \n            <Row><h5>BUTTON EXPLANATIONS:</h5></Row>\n         </ListGroup.Item>\n          \n         <ListGroup.Item>\n           <Row>\n        <Col >  <Button type='button' className='btn btn-block' onClick={customerPrepHandler}> PREPARE FOR CUSTOMER</Button> </Col>\n        <Col  >Click this button to convert the page to a receipt to be printed for the customer. Click it  then click 'PRINT' to print out the page. This print out is to be given along with the goods, to the customer. </Col>\n          </Row>\n       </ListGroup.Item>\n\n\n       <ListGroup.Item>\n           <Row>\n        <Col> <Button type='button' className='btn btn-block' onClick={riderPrepHandler}> PREPARE FOR DISPATCH RIDER</Button></Col>\n        <Col  >Click this button to convert the page to a list of items for the dispatch rider to pick up, from their respective locations. Click it then click 'PRINT' to print out the page. This print out is solely for the dispatch rider and NOT for the customer.</Col>\n          </Row>\n       </ListGroup.Item>\n         </ListGroup>\n    \n         </Card>\n          <br/>\n          <br/>\n          </>\n        }\n\n\n\n\n\n    \n    <Row>\n    \n    {/*default view , also dipatch rider view*/} {(!customerView && riderView ) && <Col md={14}>\n\n      <ListGroup variant=\"flush\">\n       \n      {loadingDeliver && <Loader/>}\n      {userInfo && userInfo.isAdmin /*&& order.isPaid*/ && (\n        <ListGroup>\n        <ListGroup.Item>\n        <Button type='button' className='btn btn-block' onClick={deliverHandler}> PRINT </Button>\n        </ListGroup.Item>\n        </ListGroup>\n      )}\n       \n       \n       \n       \n       \n       <ListGroup.Item>\n         <h2>Delivery Instructions</h2>\n         {userInfo.isAdmin && <>\n           \n          <p> Please go to all vendor addresses, collect all items and deliver them to the Address for final delivery (below)</p>\n            \n            <p>\n         <strong>Address for Final Delivery: &nbsp; </strong>\n         {order.shippingAddress.address},{order.shippingAddress.city}{' '},\n         {order.shippingAddress.postalCode}{' '},{order.shippingAddress.country}\n         </p>\n\n         <p>Please deliver all items by: &nbsp; <span style={{color:'black', fontSize:'1rem'}}>{new Date(new Date(order.createdAt).getTime()+ 96 * 60 * 60 * 1000).toLocaleDateString()}</span></p>\n                  \n            </>}\n        <p> {userInfo.isMerchant||userInfo.isAdmin?(<strong>Order placed by :</strong>):(<strong>Name :</strong>) }{'   '}{order.user.name}</p>\n\n       { !userInfo.isMerchant &&\n       <>\n       <p> <strong>Email:</strong>{' '} <a href= {`mailto:${order.user.email}`}>{order.user.email}</a> </p>\n          \n         \n      </> }\n     \n      \n\n         {order.isDelivered ?<Message variant='success'>Dispatched on {order.deliveredAt.substring(0,10)}</Message> :\n                        <Message variant='danger'> Not dispatched</Message> }\n\n          </ListGroup.Item>\n\n          \n\n           <ListGroup.Item>\n           <ListGroup>\n             <ListGroupItem>\n            <h2>Order Items</h2>\n          <Row>\n          {/*!userInfo.isMerchant && <Col md={2}>S/N</Col>*/}\n          <Col md={2}>Item</Col>\n          { <Col md={2}>Vendor Name</Col>}\n          { <Col md={4}>Vendor Address </Col>}\n          {(userInfo.isAdmin && <Col md={2}>Quantity to collect</Col>)}\n          \n          \n          {!userInfo.isMerchant && <Col md={2}>Vendor Credited</Col>}\n          \n          </Row>\n          </ListGroupItem>\n          </ListGroup>\n          { order.orderItems.length === 0 ? ( <Message>Order is empty </Message>):\n            \n            (\n            <ListGroup variant=\"flush\">\n              {order.orderItems.map((item, index) =>(\n\n                <ListGroup.Item key ={index}>\n                <Row>\n                {/*<Col md={2}>{index + 1}</Col>*/}\n                 <Col md={2}>\n                  <Image src={item.image} alt={item.name} fluid rounded/>\n                  <Link to={`product/${item.product}`/*remember product property is the id in the cart*/}>\n                   {item.name}\n                  </Link>\n                  </Col>\n                  <Col md={2}>\n                   {item.vendor}\n                   </Col>\n                   \n                   <Col md={4}>\n                   {item.vendorAddress}\n                   </Col>\n\n\n                   {userInfo.isAdmin && <Col md={2}>\n                   {item.promisedQty}\n                   </Col>}\n\n                   <Col md={2}>\n                   {/*{item.promisedQty} x ₦ {item.price} =*/} ₦ {(item.promisedQty*item.agreedPrice).toFixed(2)}\n                   </Col>\n\n                  </Row>\n\n                </ListGroup.Item>\n                )\n              )}\n            </ListGroup>\n           )\n               } \n               \n               </ListGroup.Item>\n      </ListGroup>\n     </Col>}\n\n\n {/*view for customers */}    { customerView && <Col md={9}>\n\n      <ListGroup variant=\"flush\">\n       \n      {loadingDeliver && <Loader/>}\n      {userInfo && userInfo.isAdmin /*&& order.isPaid*/ && (\n        <ListGroup>\n        <ListGroup.Item>\n         \n        <Button type='button' className='btn btn-block' onClick={deliverHandler}> PRINT </Button>\n        \n        </ListGroup.Item>\n        </ListGroup>\n      )}\n       \n        \n       \n       <ListGroup.Item>\n         <h2>Delivery</h2>\n         {userInfo.isAdmin && <>\n         \n            \n            \n            <p>\n         <strong>Address for Final Delivery: &nbsp; </strong>\n         {order.shippingAddress.address},{order.shippingAddress.city}{' '},\n         {order.shippingAddress.postalCode}{' '},{order.shippingAddress.country}\n         </p>\n                  \n            </>}\n         <p> {userInfo.isMerchant||userInfo.isAdmin?(<strong>Order placed by :</strong>):(<strong>Name :</strong>) }{'   '}{order.user.name}</p>\n\n            { !userInfo.isMerchant &&\n            <>\n          <p> <strong>Email:</strong>{' '} <a href= {`mailto:${order.user.email}`}>{order.user.email}</a> </p>\n          \n         \n           </> }\n     \n      \n\n             {order.isDelivered ?<Message variant='success'>Dispatched on {order.deliveredAt.substring(0,10)}</Message> :\n                        <Message variant='danger'> Not dispatched</Message> }\n\n          </ListGroup.Item>\n\n          \n     \n           <ListGroup.Item>\n           <ListGroup>\n             <ListGroupItem>\n            <h2>Order Items</h2>\n          <Row>\n          {/*!userInfo.isMerchant && <Col md={2}>S/N</Col>*/}\n          <Col md={3}>Item</Col>\n          {/* <Col md={2}>Vendor Name</Col>*/}\n          { <Col md={3}>Quantity Requested </Col>}\n          {(userInfo.isAdmin && <Col md={3}> Quantity Delivered</Col>)}\n          \n          \n          {!userInfo.isMerchant && <Col md={3}>PAID</Col>}\n          \n          </Row>\n          </ListGroupItem>\n          </ListGroup>\n\n          { order.orderItems.length === 0 ? ( <Message>Order is empty </Message>):\n            \n            (\n            <ListGroup variant=\"flush\">\n              {order.orderItems.map((item, index) =>(\n\n                <ListGroup.Item key ={index}>\n                <Row>\n                {/*<Col md={2}>{index + 1}</Col>*/}\n                 <Col md={3}>\n                  <Image src={item.image} alt={item.name} fluid rounded/>\n                  <Link to={`product/${item.product}`/*remember product property is the id in the cart*/}>\n                   {item.name}\n                  </Link>\n                  </Col>\n\n                 {/* <Col md={2}>\n                   {item.vendor}\n              </Col> */}\n                   \n                  {<Col md={3}>\n                   {item.qty}\n                   </Col>}\n\n\n                   {userInfo.isAdmin && <Col md={3}>\n                   {item.promisedQty}\n                   </Col>}\n\n                   <Col md={3}>\n                   {/*{item.promisedQty} x ₦ {item.price} =*/} ₦ {item.promisedQty*item.price}\n                   </Col>\n\n                  </Row>\n\n                </ListGroup.Item>\n                )\n              )}\n\n                  <ListGroup.Item>\n                    <Row>\n                      <Col></Col>\n                      <Col></Col>\n                      <Col>TOTAL PAID:</Col>\n                      <Col>₦ {(order.orderItems.reduce((acc, item)=>acc +(item.price*item.promisedQty),0)).toFixed(2)}</Col>\n                    </Row>\n                  </ListGroup.Item>\n\n                  {(order.orderItems.reduce((acc, item)=>acc +(item.price*item.promisedQty),0) !== order.orderItems.reduce((acc, item)=>acc +(item.price*item.qty),0) ) && \n                  <ListGroup.Item>\n                    <Row>\n                      <Col></Col>\n                      <Col></Col>\n                      <Col>REFUNDED:</Col>\n                      <Col>₦ {(order.orderItems.reduce((acc, item)=>acc +(item.price*item.qty),0) - order.orderItems.reduce((acc, item)=>acc +(item.price*item.promisedQty),0)).toFixed(2)}</Col>\n                      <br/>\n                      <br/>\n                    </Row>\n                  </ListGroup.Item>}\n\n            </ListGroup>\n           )\n               } \n               \n               </ListGroup.Item>\n      </ListGroup>\n     </Col>}\n     \n    </Row>\n    \n   {customerView && <Row>\n    \n      <Col></Col>\n      <center><h5>THANK YOU FOR USING OUR SERVICE !</h5></center>\n      <Col></Col>\n    </Row>\n    }\n   \n\n</>)\n}\n\n\nexport default PrintOrderScreen;\n",{"ruleId":"309","replacedBy":"310"},{"ruleId":"311","replacedBy":"312"},{"ruleId":"313","severity":1,"message":"314","line":35,"column":10,"nodeType":"315","messageId":"316","endLine":35,"endColumn":17},{"ruleId":"313","severity":1,"message":"317","line":35,"column":18,"nodeType":"315","messageId":"316","endLine":35,"endColumn":23},{"ruleId":"313","severity":1,"message":"314","line":19,"column":10,"nodeType":"315","messageId":"316","endLine":19,"endColumn":17},{"ruleId":"313","severity":1,"message":"317","line":19,"column":18,"nodeType":"315","messageId":"316","endLine":19,"endColumn":23},{"ruleId":"313","severity":1,"message":"314","line":20,"column":10,"nodeType":"315","messageId":"316","endLine":20,"endColumn":17},{"ruleId":"313","severity":1,"message":"317","line":20,"column":18,"nodeType":"315","messageId":"316","endLine":20,"endColumn":23},{"ruleId":"313","severity":1,"message":"318","line":40,"column":9,"nodeType":"315","messageId":"316","endLine":40,"endColumn":17},{"ruleId":"319","severity":1,"message":"320","line":48,"column":4,"nodeType":"321","endLine":48,"endColumn":41,"suggestions":"322"},{"ruleId":"323","severity":1,"message":"324","line":57,"column":29,"nodeType":"325","messageId":"326","endLine":57,"endColumn":31},{"ruleId":"323","severity":1,"message":"324","line":57,"column":42,"nodeType":"325","messageId":"326","endLine":57,"endColumn":44},{"ruleId":"313","severity":1,"message":"327","line":19,"column":9,"nodeType":"315","messageId":"316","endLine":19,"endColumn":15},{"ruleId":"313","severity":1,"message":"314","line":28,"column":10,"nodeType":"315","messageId":"316","endLine":28,"endColumn":17},{"ruleId":"313","severity":1,"message":"317","line":28,"column":19,"nodeType":"315","messageId":"316","endLine":28,"endColumn":24},{"ruleId":"313","severity":1,"message":"328","line":33,"column":18,"nodeType":"315","messageId":"316","endLine":33,"endColumn":31},{"ruleId":"313","severity":1,"message":"329","line":33,"column":39,"nodeType":"315","messageId":"316","endLine":33,"endColumn":50},{"ruleId":"313","severity":1,"message":"330","line":36,"column":18,"nodeType":"315","messageId":"316","endLine":36,"endColumn":33},{"ruleId":"313","severity":1,"message":"331","line":36,"column":41,"nodeType":"315","messageId":"316","endLine":36,"endColumn":54},{"ruleId":"313","severity":1,"message":"332","line":36,"column":64,"nodeType":"315","messageId":"316","endLine":36,"endColumn":68},{"ruleId":"313","severity":1,"message":"333","line":36,"column":69,"nodeType":"315","messageId":"316","endLine":36,"endColumn":74},{"ruleId":"319","severity":1,"message":"334","line":74,"column":5,"nodeType":"321","endLine":74,"endColumn":15,"suggestions":"335"},{"ruleId":"336","severity":1,"message":"337","line":168,"column":42,"nodeType":"338","messageId":"339","endLine":168,"endColumn":43},{"ruleId":"336","severity":1,"message":"337","line":168,"column":46,"nodeType":"338","messageId":"339","endLine":168,"endColumn":47},{"ruleId":"313","severity":1,"message":"340","line":4,"column":52,"nodeType":"315","messageId":"316","endLine":4,"endColumn":57},{"ruleId":"313","severity":1,"message":"341","line":4,"column":65,"nodeType":"315","messageId":"316","endLine":4,"endColumn":78},{"ruleId":"313","severity":1,"message":"342","line":10,"column":8,"nodeType":"315","messageId":"316","endLine":10,"endColumn":21},{"ruleId":"313","severity":1,"message":"343","line":8,"column":20,"nodeType":"315","messageId":"316","endLine":8,"endColumn":24},{"ruleId":"313","severity":1,"message":"340","line":8,"column":37,"nodeType":"315","messageId":"316","endLine":8,"endColumn":42},{"ruleId":"313","severity":1,"message":"341","line":8,"column":50,"nodeType":"315","messageId":"316","endLine":8,"endColumn":63},{"ruleId":"313","severity":1,"message":"318","line":27,"column":9,"nodeType":"315","messageId":"316","endLine":27,"endColumn":17},{"ruleId":"313","severity":1,"message":"340","line":3,"column":41,"nodeType":"315","messageId":"316","endLine":3,"endColumn":46},{"ruleId":"313","severity":1,"message":"341","line":3,"column":54,"nodeType":"315","messageId":"316","endLine":3,"endColumn":67},{"ruleId":"319","severity":1,"message":"344","line":84,"column":4,"nodeType":"321","endLine":84,"endColumn":86,"suggestions":"345"},{"ruleId":"319","severity":1,"message":"346","line":79,"column":3,"nodeType":"321","endLine":79,"endColumn":53,"suggestions":"347"},{"ruleId":"313","severity":1,"message":"348","line":5,"column":9,"nodeType":"315","messageId":"316","endLine":5,"endColumn":21},{"ruleId":"313","severity":1,"message":"349","line":16,"column":13,"nodeType":"315","messageId":"316","endLine":16,"endColumn":21},{"ruleId":"313","severity":1,"message":"350","line":35,"column":11,"nodeType":"315","messageId":"316","endLine":35,"endColumn":25},{"ruleId":"313","severity":1,"message":"351","line":37,"column":21,"nodeType":"315","messageId":"316","endLine":37,"endColumn":33},{"ruleId":"313","severity":1,"message":"352","line":38,"column":19,"nodeType":"315","messageId":"316","endLine":38,"endColumn":28},{"ruleId":"313","severity":1,"message":"353","line":47,"column":18,"nodeType":"315","messageId":"316","endLine":47,"endColumn":28},{"ruleId":"313","severity":1,"message":"354","line":53,"column":18,"nodeType":"315","messageId":"316","endLine":53,"endColumn":37},{"ruleId":"313","severity":1,"message":"355","line":160,"column":7,"nodeType":"315","messageId":"316","endLine":160,"endColumn":28},{"ruleId":"313","severity":1,"message":"356","line":171,"column":7,"nodeType":"315","messageId":"316","endLine":171,"endColumn":21},{"ruleId":"357","severity":1,"message":"358","line":179,"column":60,"nodeType":"359","messageId":"360","endLine":179,"endColumn":61},{"ruleId":"313","severity":1,"message":"361","line":4,"column":59,"nodeType":"315","messageId":"316","endLine":4,"endColumn":70},{"ruleId":"313","severity":1,"message":"314","line":22,"column":11,"nodeType":"315","messageId":"316","endLine":22,"endColumn":18},{"ruleId":"313","severity":1,"message":"362","line":22,"column":25,"nodeType":"315","messageId":"316","endLine":22,"endColumn":31},{"ruleId":"313","severity":1,"message":"363","line":28,"column":19,"nodeType":"315","messageId":"316","endLine":28,"endColumn":27},{"ruleId":"313","severity":1,"message":"364","line":31,"column":16,"nodeType":"315","messageId":"316","endLine":31,"endColumn":23},{"ruleId":"319","severity":1,"message":"365","line":132,"column":5,"nodeType":"321","endLine":132,"endColumn":89,"suggestions":"366"},{"ruleId":"313","severity":1,"message":"367","line":13,"column":9,"nodeType":"315","messageId":"316","endLine":13,"endColumn":36},{"ruleId":"313","severity":1,"message":"368","line":5,"column":9,"nodeType":"315","messageId":"316","endLine":5,"endColumn":20},{"ruleId":"313","severity":1,"message":"369","line":1,"column":16,"nodeType":"315","messageId":"316","endLine":1,"endColumn":25},{"ruleId":"313","severity":1,"message":"370","line":2,"column":9,"nodeType":"315","messageId":"316","endLine":2,"endColumn":13},{"ruleId":"313","severity":1,"message":"371","line":7,"column":9,"nodeType":"315","messageId":"316","endLine":7,"endColumn":24},{"ruleId":"313","severity":1,"message":"372","line":10,"column":10,"nodeType":"315","messageId":"316","endLine":10,"endColumn":18},{"ruleId":"313","severity":1,"message":"373","line":13,"column":25,"nodeType":"315","messageId":"316","endLine":13,"endColumn":33},{"ruleId":"313","severity":1,"message":"370","line":3,"column":9,"nodeType":"315","messageId":"316","endLine":3,"endColumn":13},{"ruleId":"313","severity":1,"message":"348","line":5,"column":9,"nodeType":"315","messageId":"316","endLine":5,"endColumn":21},{"ruleId":"313","severity":1,"message":"340","line":6,"column":45,"nodeType":"315","messageId":"316","endLine":6,"endColumn":50},{"ruleId":"313","severity":1,"message":"341","line":6,"column":58,"nodeType":"315","messageId":"316","endLine":6,"endColumn":71},{"ruleId":"313","severity":1,"message":"374","line":10,"column":67,"nodeType":"315","messageId":"316","endLine":10,"endColumn":87},{"ruleId":"313","severity":1,"message":"375","line":12,"column":9,"nodeType":"315","messageId":"316","endLine":12,"endColumn":24},{"ruleId":"313","severity":1,"message":"376","line":12,"column":25,"nodeType":"315","messageId":"316","endLine":12,"endColumn":44},{"ruleId":"313","severity":1,"message":"349","line":16,"column":13,"nodeType":"315","messageId":"316","endLine":16,"endColumn":21},{"ruleId":"313","severity":1,"message":"350","line":26,"column":9,"nodeType":"315","messageId":"316","endLine":26,"endColumn":23},{"ruleId":"313","severity":1,"message":"377","line":26,"column":25,"nodeType":"315","messageId":"316","endLine":26,"endColumn":42},{"ruleId":"313","severity":1,"message":"378","line":27,"column":9,"nodeType":"315","messageId":"316","endLine":27,"endColumn":18},{"ruleId":"313","severity":1,"message":"379","line":27,"column":19,"nodeType":"315","messageId":"316","endLine":27,"endColumn":31},{"ruleId":"313","severity":1,"message":"380","line":28,"column":9,"nodeType":"315","messageId":"316","endLine":28,"endColumn":18},{"ruleId":"313","severity":1,"message":"351","line":28,"column":19,"nodeType":"315","messageId":"316","endLine":28,"endColumn":31},{"ruleId":"313","severity":1,"message":"381","line":29,"column":9,"nodeType":"315","messageId":"316","endLine":29,"endColumn":15},{"ruleId":"313","severity":1,"message":"352","line":29,"column":17,"nodeType":"315","messageId":"316","endLine":29,"endColumn":26},{"ruleId":"313","severity":1,"message":"353","line":42,"column":18,"nodeType":"315","messageId":"316","endLine":42,"endColumn":28},{"ruleId":"313","severity":1,"message":"354","line":45,"column":18,"nodeType":"315","messageId":"316","endLine":45,"endColumn":37},{"ruleId":"313","severity":1,"message":"382","line":49,"column":20,"nodeType":"315","messageId":"316","endLine":49,"endColumn":33},{"ruleId":"313","severity":1,"message":"383","line":52,"column":18,"nodeType":"315","messageId":"316","endLine":52,"endColumn":32},{"ruleId":"313","severity":1,"message":"384","line":52,"column":42,"nodeType":"315","messageId":"316","endLine":52,"endColumn":56},{"ruleId":"313","severity":1,"message":"385","line":64,"column":8,"nodeType":"315","messageId":"316","endLine":64,"endColumn":20},{"ruleId":"313","severity":1,"message":"386","line":74,"column":8,"nodeType":"315","messageId":"316","endLine":74,"endColumn":18},{"ruleId":"313","severity":1,"message":"387","line":121,"column":14,"nodeType":"315","messageId":"316","endLine":121,"endColumn":29},{"ruleId":"313","severity":1,"message":"356","line":174,"column":7,"nodeType":"315","messageId":"316","endLine":174,"endColumn":21},{"ruleId":"313","severity":1,"message":"388","line":4,"column":9,"nodeType":"315","messageId":"316","endLine":4,"endColumn":22},{"ruleId":"313","severity":1,"message":"348","line":5,"column":9,"nodeType":"315","messageId":"316","endLine":5,"endColumn":21},{"ruleId":"313","severity":1,"message":"343","line":6,"column":28,"nodeType":"315","messageId":"316","endLine":6,"endColumn":32},{"ruleId":"313","severity":1,"message":"374","line":10,"column":47,"nodeType":"315","messageId":"316","endLine":10,"endColumn":67},{"ruleId":"313","severity":1,"message":"349","line":16,"column":13,"nodeType":"315","messageId":"316","endLine":16,"endColumn":21},{"ruleId":"313","severity":1,"message":"350","line":26,"column":9,"nodeType":"315","messageId":"316","endLine":26,"endColumn":23},{"ruleId":"313","severity":1,"message":"377","line":26,"column":25,"nodeType":"315","messageId":"316","endLine":26,"endColumn":42},{"ruleId":"313","severity":1,"message":"378","line":27,"column":9,"nodeType":"315","messageId":"316","endLine":27,"endColumn":18},{"ruleId":"313","severity":1,"message":"379","line":27,"column":19,"nodeType":"315","messageId":"316","endLine":27,"endColumn":31},{"ruleId":"313","severity":1,"message":"380","line":28,"column":9,"nodeType":"315","messageId":"316","endLine":28,"endColumn":18},{"ruleId":"313","severity":1,"message":"351","line":28,"column":19,"nodeType":"315","messageId":"316","endLine":28,"endColumn":31},{"ruleId":"313","severity":1,"message":"381","line":29,"column":9,"nodeType":"315","messageId":"316","endLine":29,"endColumn":15},{"ruleId":"313","severity":1,"message":"352","line":29,"column":17,"nodeType":"315","messageId":"316","endLine":29,"endColumn":26},{"ruleId":"313","severity":1,"message":"353","line":46,"column":18,"nodeType":"315","messageId":"316","endLine":46,"endColumn":28},{"ruleId":"313","severity":1,"message":"385","line":61,"column":8,"nodeType":"315","messageId":"316","endLine":61,"endColumn":20},{"ruleId":"313","severity":1,"message":"386","line":71,"column":8,"nodeType":"315","messageId":"316","endLine":71,"endColumn":18},{"ruleId":"313","severity":1,"message":"355","line":149,"column":7,"nodeType":"315","messageId":"316","endLine":149,"endColumn":28},"no-native-reassign",["389"],"no-negated-in-lhs",["390"],"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'redirect' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.","ArrayExpression",["391"],"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","'seller' is assigned a value but never used.","'loadingOrders' is assigned a value but never used.","'errorOrders' is assigned a value but never used.","'loadingProducts' is assigned a value but never used.","'errorProducts' is assigned a value but never used.","'page' is assigned a value but never used.","'pages' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["392"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'Image' is defined but never used.","'ListGroupItem' is defined but never used.","'FormContainer' is defined but never used.","'Form' is defined but never used.","React Hook useEffect has a missing dependency: 'vendorName'. Either include it or remove the dependency array.",["393"],"React Hook useEffect has missing dependencies: 'userInfo.merchantAddress', 'userInfo.name', and 'userInfo.nuban'. Either include them or remove the dependency array.",["394"],"'PayPalButton' is defined but never used.","'sdkReady' is assigned a value but never used.","'committedValue' is assigned a value but never used.","'setHighlight' is assigned a value but never used.","'setColour' is assigned a value but never used.","'loadingPay' is assigned a value but never used.","'loadingInsufficient' is assigned a value but never used.","'successPaymentHandler' is assigned a value but never used.","'deliverHandler' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'FormControl' is defined but never used.","'error2' is assigned a value but never used.","'loading1' is assigned a value but never used.","'success' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["395"],"'ORDER_MERCHANT_CREDIT_RESET' is defined but never used.","'useDispatch' is defined but never used.","'useEffect' is defined but never used.","'Link' is defined but never used.","'listTopProducts' is defined but never used.","'dispatch' is assigned a value but never used.","'products' is assigned a value but never used.","'merchantApproveOrder' is defined but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.","'setCommittedValue' is assigned a value but never used.","'productId' is assigned a value but never used.","'setProductId' is assigned a value but never used.","'highlight' is assigned a value but never used.","'colour' is assigned a value but never used.","'loadingCredit' is assigned a value but never used.","'loadingDeliver' is assigned a value but never used.","'successDeliver' is assigned a value but never used.","'initialState' is assigned a value but never used.","'liveUpdate' is assigned a value but never used.","'addPayPalScript' is assigned a value but never used.","'LinkContainer' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"396","fix":"397"},{"desc":"398","fix":"399"},{"desc":"400","fix":"401"},{"desc":"402","fix":"403"},{"desc":"404","fix":"405"},"Update the dependencies array to be: [dispatch, history, match, successProductReview, userInfo]",{"range":"406","text":"407"},"Update the dependencies array to be: [dispatch, userInfo]",{"range":"408","text":"409"},"Update the dependencies array to be: [dispatch, history, userInfo, successDelete, successCreate, createdProduct, pageNumber, vendorName]",{"range":"410","text":"411"},"Update the dependencies array to be: [dispatch, productId, history, successUpdate, product, userInfo.name, userInfo.merchantAddress, userInfo.nuban]",{"range":"412","text":"413"},"Update the dependencies array to be: [confirmedState, confirmedStates, userInfo, dispatch, cart, history]",{"range":"414","text":"415"},[1606,1643],"[dispatch, history, match, successProductReview, userInfo]",[3271,3281],"[dispatch, userInfo]",[2471,2553],"[dispatch, history, userInfo, successDelete, successCreate, createdProduct, pageNumber, vendorName]",[3045,3095],"[dispatch, productId, history, successUpdate, product, userInfo.name, userInfo.merchantAddress, userInfo.nuban]",[4677,4761],"[confirmedState, confirmedStates, userInfo, dispatch, cart, history]"]