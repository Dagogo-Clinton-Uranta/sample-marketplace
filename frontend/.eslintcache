[{"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/index.js":"1","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/Final.js":"2","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/store.js":"3","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/App.js":"4","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/cartReducers.js":"5","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/productReducers.js":"6","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/orderReducers.js":"7","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/userReducers.js":"8","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Footer.js":"9","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/PaymentScreen.js":"10","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/HomeScreen.js":"11","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/LoginScreen.js":"12","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ShippingScreen.js":"13","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/CartScreen.js":"14","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/AdminComScreen.js":"15","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/UserListScreen.js":"16","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProductScreen.js":"17","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/cartConstants.js":"18","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/productConstants.js":"19","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/UserConstants.js":"20","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/RegisterScreen.js":"21","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Header.js":"22","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProfileScreen.js":"23","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/OrderListScreen.js":"24","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/CommunicationScreen.js":"25","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/UserEditScreen.js":"26","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProductListScreen.js":"27","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProductEditScreen.js":"28","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/OrderScreen.js":"29","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/PlaceOrderScreen.js":"30","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/FormContainer.js":"31","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/CheckoutSteps.js":"32","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/orderConstants.js":"33","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Message.js":"34","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/cartActions.js":"35","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/productActions.js":"36","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/SearchBox.js":"37","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Paginate.js":"38","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Loader.js":"39","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/userActions.js":"40","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Meta.js":"41","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/orderActions.js":"42","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/productComponent.js":"43","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/ProductCarousel.js":"44","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Rating.js":"45","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/TransactionScreen.js":"46","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/TransactionListScreen.js":"47"},{"size":267,"mtime":1621882819327,"results":"48","hashOfConfig":"49"},{"size":297,"mtime":1621882819319,"results":"50","hashOfConfig":"49"},{"size":2859,"mtime":1631885967524,"results":"51","hashOfConfig":"49"},{"size":3190,"mtime":1631564742357,"results":"52","hashOfConfig":"49"},{"size":1206,"mtime":1621882819327,"results":"53","hashOfConfig":"49"},{"size":4291,"mtime":1621882819327,"results":"54","hashOfConfig":"49"},{"size":4875,"mtime":1631830004546,"results":"55","hashOfConfig":"49"},{"size":5797,"mtime":1631368707614,"results":"56","hashOfConfig":"49"},{"size":416,"mtime":1621882819323,"results":"57","hashOfConfig":"49"},{"size":1990,"mtime":1621882819327,"results":"58","hashOfConfig":"49"},{"size":2648,"mtime":1631893545201,"results":"59","hashOfConfig":"49"},{"size":2832,"mtime":1621882819327,"results":"60","hashOfConfig":"49"},{"size":2772,"mtime":1621882819327,"results":"61","hashOfConfig":"49"},{"size":3171,"mtime":1621882819327,"results":"62","hashOfConfig":"49"},{"size":5370,"mtime":1628012143878,"results":"63","hashOfConfig":"49"},{"size":3480,"mtime":1621882819331,"results":"64","hashOfConfig":"49"},{"size":7544,"mtime":1621882819327,"results":"65","hashOfConfig":"49"},{"size":234,"mtime":1621882819323,"results":"66","hashOfConfig":"49"},{"size":1789,"mtime":1621882819323,"results":"67","hashOfConfig":"49"},{"size":2288,"mtime":1631367328827,"results":"68","hashOfConfig":"49"},{"size":8904,"mtime":1621882819327,"results":"69","hashOfConfig":"49"},{"size":7063,"mtime":1631525431340,"results":"70","hashOfConfig":"49"},{"size":8348,"mtime":1631472487181,"results":"71","hashOfConfig":"49"},{"size":8959,"mtime":1631558332916,"results":"72","hashOfConfig":"49"},{"size":3729,"mtime":1631105467770,"results":"73","hashOfConfig":"49"},{"size":3923,"mtime":1631105467770,"results":"74","hashOfConfig":"49"},{"size":5164,"mtime":1631105467770,"results":"75","hashOfConfig":"49"},{"size":7292,"mtime":1631105467770,"results":"76","hashOfConfig":"49"},{"size":19884,"mtime":1631744542155,"results":"77","hashOfConfig":"49"},{"size":13671,"mtime":1631815144942,"results":"78","hashOfConfig":"49"},{"size":451,"mtime":1621882819323,"results":"79","hashOfConfig":"49"},{"size":1460,"mtime":1621882819323,"results":"80","hashOfConfig":"49"},{"size":2163,"mtime":1631830263471,"results":"81","hashOfConfig":"49"},{"size":273,"mtime":1621882819323,"results":"82","hashOfConfig":"49"},{"size":1624,"mtime":1621882819319,"results":"83","hashOfConfig":"49"},{"size":7811,"mtime":1631105467770,"results":"84","hashOfConfig":"49"},{"size":815,"mtime":1621882819323,"results":"85","hashOfConfig":"49"},{"size":609,"mtime":1621882819323,"results":"86","hashOfConfig":"49"},{"size":330,"mtime":1621882819323,"results":"87","hashOfConfig":"49"},{"size":11199,"mtime":1631469274881,"results":"88","hashOfConfig":"49"},{"size":516,"mtime":1621882819323,"results":"89","hashOfConfig":"49"},{"size":12072,"mtime":1631830471227,"results":"90","hashOfConfig":"49"},{"size":1006,"mtime":1631105467770,"results":"91","hashOfConfig":"49"},{"size":1280,"mtime":1631105467770,"results":"92","hashOfConfig":"49"},{"size":1779,"mtime":1621882819323,"results":"93","hashOfConfig":"49"},{"size":14518,"mtime":1631891753788,"results":"94","hashOfConfig":"49"},{"size":8413,"mtime":1631890284231,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"1o45bix",{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"98"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"98"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"98"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"98"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"98"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"98"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"98"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"98"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"98"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"98"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"98"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/index.js",[],["202","203"],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/Final.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/store.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/App.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/cartReducers.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/productReducers.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/orderReducers.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/userReducers.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Footer.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/PaymentScreen.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/HomeScreen.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/LoginScreen.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ShippingScreen.js",["204","205"],"import React, {useState,useEffect} from 'react'\n\nimport {Form, Button} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport FormContainer from '../components/FormContainer.js'\nimport CheckoutSteps from '../components/CheckoutSteps.js'\n//import {getUserDetails, updateUserProfile} from '../actions/userActions.js'\nimport {saveShippingAddress} from '../actions/cartActions.js'\n//savePaymentMethod,\n\n\nconst ShippingScreen = ({history}) => {\n  const cart = useSelector(state => state.cart)\n  const {shippingAddress} = cart\n\n\n\n      const[address, setAddress] =useState(shippingAddress.address) //the useState values were all in quotation marks previously\n      const[city, setCity] =useState(shippingAddress.city)\n      const[postalCode,setPostalCode] =useState(shippingAddress.postalCode)\n      const[country,setCountry] =useState(shippingAddress.country)\n\n\n  const dispatch = useDispatch()\n\n  const submitHandler = (e) => {\n    e.preventDefault()\n\n    window.history.pushState(null,'','/')\n    dispatch(saveShippingAddress({address, city, postalCode, country}))\n    history.push('/placeorder')  //once again , this is to redirect the url to the next page\n  }\n\n  const userLogin = useSelector(state => state.userLogin)\n  const {loading,error,userInfo} = userLogin\n\n  useEffect(()=>{  \n    if(!userInfo){\n    history.push(`/login`)\n    }\n\n    \n  })\n\n\n      return(\n        <FormContainer>\n         <CheckoutSteps step1 step2/>\n         <h1>Shipping</h1>\n\n         <Form onSubmit={submitHandler}>\n         <Form.Group controlId='address'>\n{/*1*/}\n                <Form.Label>  Address</Form.Label>\n                <Form.Control type='text' placeholder=\"Enter address\" value={address} required onChange={(e)=>setAddress(e.target.value)}></Form.Control>\n\n         </Form.Group>\n\n         <Form.Group controlId='city'>\n{/*2*/}           <Form.Label>  City</Form.Label>\n                <Form.Control type='text' placeholder=\"enter city\" value={city} required onChange={(e)=>setCity(e.target.value)}></Form.Control>\n\n        </Form.Group>\n\n\n        <Form.Group controlId='postalCode'>\n\n{/*3*/}          <Form.Label> Postal Code</Form.Label>\n               <Form.Control type='text' placeholder=\"Enter postal code\" value={postalCode} required onChange={(e)=>setPostalCode(e.target.value)}></Form.Control>\n\n        </Form.Group>\n\n        <Form.Group controlId='country'>\n\n{/*4*/}          <Form.Label>  Country</Form.Label>\n               <Form.Control type='text' placeholder=\"enter country\" value={country} required onChange={(e)=>setCountry(e.target.value)}></Form.Control>\n\n        <Button type='submit' variant='primary'>Continue</Button>\n      </Form.Group>\n\n\n\n         </Form>\n\n\n        </FormContainer>\n      )\n\n\n}\n\nexport default ShippingScreen\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/CartScreen.js",["206","207"],"import React, {useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {Link} from 'react-router-dom'\nimport {Row, Col , ListGroup, Image , Form ,Button, Card} from 'react-bootstrap'\nimport Message from '../components/Message.js'\nimport {addToCart,removeFromCart} from '../actions/cartActions.js'\n\nconst CartScreen = ({match, location, history}) => {\n      const productId = match.params.id\n      const qty =location.search ? Number( location.search.split('=')[1]):1\n\n    const dispatch = useDispatch()\n    const cart = useSelector(state => state.cart)\n\n    const {cartItems} = cart\n    console.log(cart)\n    \n    const userLogin = useSelector(state => state.userLogin)\n  const {loading,error,userInfo} = userLogin\n\n  useEffect(()=>{  \n    if(!userInfo){\n    history.push(`/login`)\n    }\n    else if(userInfo.isMerchant||userInfo.isAdmin){\n     history.push(`/`)\n    }\n  })\n\n\n    useEffect(()=>{\n     if(productId){\n       dispatch(addToCart(productId ,qty))\n     }\n\n   },[dispatch,productId,qty])\n\n   const removeFromCartHandler =(id) => {dispatch(removeFromCart(id))}\n   const checkoutHandler = () => {history.push('/login?redirect=shipping')} //learn how redirect works properly\n\n   return (\n\n    <Row>\n     <Col md={8}>\n     <h1>Shopping Cart</h1>\n     {cartItems.length===0?<Message>Your cart is empty <Link to='/'>Go Back</Link></Message>:\n     (<ListGroup variant='flush'>\n      {cartItems.map(item =>{return(\n        <ListGroup.Item key ={item.product /*product is the ID here*/}>\n      <Row>\n       <Col md={2}>\n\n        <Image src={item.image} alt={item.name} fluid rounded></Image>\n\n       </Col>\n\n       <Col md={3}>\n        <Link to={`/product/${item.product /*product here is the id*/}`}>\n         {item.name}\n        </Link>\n       </Col>\n\n       <Col md={2}>\n        ₦ {item.price}\n       </Col>\n\n       <Col md={2}>\n       <Form.Control as='select' value={item.qty} onChange={(e) =>{dispatch(addToCart(item.product/*prod =id*/, Number(e.target.value)\n         )\n        )\n       }\n      } >\n         {[...Array(item.countInStock).keys()].map((x) =>(\n           <option key={x+1} value={x+1}>\n            {x +1}\n           </option>\n         ))}\n       </Form.Control>\n       </Col>\n\n       <Col md={2}>\n       <Button type='button' variant=\"light\" onClick={() => removeFromCartHandler(item.product\n        /*prod =id*/)}> \n\n         <i className=\"fas fa-trash\"></i> Remove\n\n        </Button>\n       </Col>\n\n       </Row>\n        </ListGroup.Item>\n      )})}\n     </ListGroup>)}\n     </Col>\n\n\n     <Col md={4}>\n      <Card>\n      <ListGroup variant='flush'>\n       <ListGroup.Item>\n        <h2>Subtotal ({cartItems.reduce((acc,item)=>\n          (acc + item.qty),0\n    )\n     }\n      ) items</h2>\n\n      ₦ {cartItems.reduce((acc,item)=>\n        (acc + item.qty*item.price),0\n  ).toFixed(2)\n   }\n\n      </ListGroup.Item>\n\n       <ListGroup.Item>\n         <Button type=\"button\" className='btn-block' disabled={cartItems.length===0} onClick={checkoutHandler}>\n         Proceed to Checkout\n         </Button>\n\n       </ListGroup.Item>\n\n      </ListGroup>\n      </Card>\n     </Col>\n\n    </Row>\n   )\n\n}\n\nexport default CartScreen\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/AdminComScreen.js",["208","209","210"],"import React, {useState ,useEffect} from 'react'\n/*import {Link} from 'react-router-dom'*/\nimport {Form, Button, Row, Col} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\nimport Loader from '../components/Message.js'\nimport {adminSaid,getUserDetails} from '../actions/userActions.js'\nimport FormContainer from '../components/FormContainer.js'\n\n\n\n\n\nconst AdminComScreen = ({location, match,history}) => { //he is taking location & history out of the props, normally it is props.location\n  const userId = match.params.id\n  const [bossMessage,setBossMessage] = useState('')  \n  \n  const dispatch = useDispatch() \n  const userLogin = useSelector(state => state.userLogin);\n  const {loading,error,userInfo} = userLogin /*if youre having problems reaching this  screen, come and delete this line, and the userInfo useEffect */\n\n  /*the genius thing i'm going to do here is collect\n   information for a particular user,not using userlogin i guess,\n   but where to collect userInfo of a particular user that was clicked,\n    i need to create a new global state for this cuz i need to fetch info\n  from backend based on the user id i will send  - FIND THIS IN USER DETAILS- userDetails*/\n  \n  const userDetails = useSelector((state) => state.userDetails);\n  const {loading:loadingDetails, error:errorDetails,user } = userDetails\n     console.log(userDetails)\n\n      /*consider renaming these from clientId, clientEmail,clientName , cuz youre updating adminMessage even though it's in the client's data */\n     const clientId = user._id\n     const clientEmail = user.email\n     const clientName = user.name\n\n  /* const {loading, error,userInfo } = userLogin */\n   /*at least i think it's this -youre right, it is this */\n\n  const redirect = location.search ? location.search.split('=')[1]:'/'\n//location .search has the url query string, study it a bit\n\n//because we dont want to able to come into the login screen ONCE WE ARE ALREADY LOGGED IN, effect this in the useEffect below\n\n\n\n  useEffect(()=>{  \n    if(!userInfo){\n    history.push(`/login`)\n    }\n  })\n\n\n  useEffect( () => {\n      \n    dispatch(getUserDetails(userId))\n   \n    /*if(userInfo){ \n       history.push(redirect)\n    } I WANT TO PUT IN THE CUSTOMER SERVICE MESSAGE HERE,SO IT CAN REFRESH UPON CUSTOMER SENDING A MESSAGE*/\n      \n  },[dispatch, userId /*, clientEmail, clientName*/]) /*why client id and client name? */\n\n\n\n  const submitHandler = (e) => {\n          e.preventDefault()\n          //this is where we want to to call our action to dispatch login\n          dispatch(adminSaid(bossMessage, clientId,clientEmail,clientName)) \n          window.alert('Message Sent!') \n          setBossMessage('')\n        \n         \n         /*yes we still need clientId \n         cuz that's how we'll know who we're going to update in the database*/\n  }\n\n    return (\n       <FormContainer>\n        <h1>Send A Message  ...</h1>\n        {errorDetails && <Message variant='danger'>{errorDetails}</Message>}\n        {loadingDetails && <Loader/>}\n        \n         <Form onSubmit={submitHandler}>\n\n             {/*okay so if the user is an admin, i want to show a name and email, otherwise\n    i want to to hide the name and email stuff, actually i changed my mind, admins\n     will have a different screen and a different route. CONSIDER CALLING GET USER PROFILE ROUTE\n     AFTER SENDING THE ID - FIND AN EXAMPLE OF THIS*/}\n\n        \n           <>\n        <Form.Group controlId='name'>\n\n            <Form.Label> Name: </Form.Label>\n            <Form.Control plaintext readOnly defaultValue ={user.name}></Form.Control>\n                {/* local state used to be here i don't wish to change the state here, for name and password, so maybe i will eliminate local state */}\n          </Form.Group>\n\n\n         <Form.Group controlId='email'>\n\n          <Form.Label>  Email Address: </Form.Label>\n          <Form.Control plaintext readOnly defaultValue={user.email}></Form.Control>\n        \n         </Form.Group> \n         </>\n\n         <Form.Group controlId='reply-message'>\n\n          <Form.Label> Client/Merchant Message: </Form.Label>\n          <Form.Control as =\"textarea\" rows={6} plaintext readOnly value={user.userMessage} defaultValue={`No message from client ${user.name} , ID - ${user._id}`}></Form.Control>\n\n         </Form.Group>\n         \n        \n\n\n          <Form.Group controlId='reply-message'>\n\n          <Form.Label>  Send Your Message Below: </Form.Label>\n          <Form.Control as =\"textarea\" rows={6} placeholder='type message here' value={bossMessage} onChange={(e)=>{setBossMessage(e.target.value)}}></Form.Control>\n\n         </Form.Group>\n\n         \n         <Button type='submit' variant='primary'>Send</Button>\n         \n\n        </Form>\n       \n        \n        \n        <br/>\n        <Row className='py-3'>\n         <Col>                       \n           You can also message Clients/Merchants using: customerservice@bridgeway.com \n         </Col>  \n         </Row>\n\n         <Row className='py-3'>\n         <Col>                       \n           Remember to copy and send the Client/Merchant Message into the email body, and use an appropriate subject, for easy follow up from clients\n         </Col>                     \n        </Row>              \n\n       </FormContainer>\n\n    )\n\n}\n\nexport default AdminComScreen\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/UserListScreen.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProductScreen.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/cartConstants.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/productConstants.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/UserConstants.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/RegisterScreen.js",["211","212"],"import React, {useState ,useEffect} from 'react'\nimport {Link} from 'react-router-dom'\nimport {Form, Button, Row, Col, ListGroup} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\nimport Loader from '../components/Message.js'\nimport {register} from '../actions/userActions.js'\nimport FormContainer from '../components/FormContainer.js'\n\n\n\n\n\nconst RegisterScreen = ({location, history}) => { //he is taking location & history out of the props, normally it is props.location\n  const [name,setName] = useState('')\n  const [email,setEmail] = useState('')  //component level state right here, not application level state\n  const [password,setPassword] = useState('')\n  const [confirmPassword,setConfirmPassword] = useState('')\n  const [isMerchant,setIsMerchant] = useState(false)\n  const [pickupAddress, setPickupAddress] =useState('')\n  const [momFirstName,setMomFirstName] = useState('is a merchant')\n  const [shoeSize,setShoeSize] = useState('is a merchant')\n  const [closestFriend,setClosestFriend] = useState('is a merchant')\n  const [childhoodStreet,setChildhoodStreet] = useState('is a merchant')\n  const [firstEmployment,setFirstEmployment] = useState('is a merchant')\n  const [message,setMessage] = useState(null)\n  const dispatch = useDispatch() //dont forget that real dispatches only take place in action creators, you are only calling useDispatch here\n  const userRegister = useSelector(state => state.userRegister);\n  const {loading, error,userInfo } = userRegister\n     console.log(isMerchant)\n  const redirect = location.search ? location.search.split('=')[1]:'/'\n//location .search has the url query string, study it a bit\n\n//because we dont want to able to come into the login screen ONCE WE ARE ALREADY LOGGED IN, effect this in the useEffect below\n\n  useEffect( () => {\n    if(userInfo){ //cuz user info exists only when you're logged in\n       history.push(redirect)\n    }\n\n    if(password !=='' && (password === confirmPassword)){\n      setMessage(null)\n    }\n\n    if(isMerchant===false){\n       setPickupAddress('') \n   setMomFirstName('is a merchant') \n   setShoeSize('is a merchant') \n   setClosestFriend('is a merchant') \n   setChildhoodStreet('is a merchant') \n   setFirstEmployment('is a merchant') \n    }\n\n\n    if(name!==''||email!==''||isMerchant && pickupAddress!==''||momFirstName!==''||shoeSize!==''||closestFriend!==''||childhoodStreet!==''||firstEmployment!==''){setMessage(null)}\n    \n  },[redirect,history,userInfo,password,confirmPassword,name,email,pickupAddress,momFirstName,shoeSize,closestFriend,childhoodStreet,firstEmployment,isMerchant])\n\n\n\n  const submitHandler = (e) => {\n          e.preventDefault()\n       if(password !== confirmPassword){\n         setMessage('Passwords do not Match')\n      }else if(name === ''||email===''){\n        setMessage('Please Make sure to fill in all entries!')\n      }\n      else if(isMerchant && pickupAddress===''){\n        setMessage('Please Make sure to fill in all entries!')\n      }\n       else if( !isMerchant && (momFirstName ==='is a merchant' || shoeSize ==='is a merchant'  || closestFriend==='is a merchant' || childhoodStreet==='is a merchant'  || firstEmployment==='is a merchant')){\n        setMessage('Please Make sure to fill in all entries!')\n       }\n       else{\n         //this is where we want to to call our action to dispatch login\n       dispatch(register(name,email,password, momFirstName,shoeSize,closestFriend,childhoodStreet,firstEmployment, pickupAddress,isMerchant)) /* follow the trail of this register dispatch to see where it leads  */\n       }\n\n  }\n\n    return (\n       <FormContainer>\n        <h1>Sign up</h1>\n        \n        {loading && <Loader/>}\n        <Form onSubmit={submitHandler}>\n  {/*1*/}      <Form.Group controlId='name'>\n\n         <Form.Label>  Name</Form.Label>\n         <Form.Control type='name' placeholder=\"enter name\" value={name} onChange={(e)=>setName(e.target.value)}></Form.Control>\n          {/*the value of form control is form control from the state.  need to read about form group from react bootstrap*/}\n        </Form.Group>\n\n  {/*2*/}        <Form.Group controlId='email'>\n\n          <Form.Label>  Email Address </Form.Label>\n          <Form.Control type='email' placeholder=\"enter email\" value={email} onChange={(e)=>setEmail(e.target.value)}></Form.Control>\n           {/*the value of form control is form control from the state. need to read about form group from react bootstrap*/}\n         </Form.Group>\n\n         <fieldset>\n         {/*3*/}        <Form.Group controlId='usertype'>\n\n         <Form.Label>  Are you a customer or a merchant? </Form.Label>\n          <div className=\"mb-3\"></div>\n         <Form.Check inline type='radio' name='radiosInline' id='radiosInline1' label=\"Customer\" onChange={(e)=>setIsMerchant(false)}/>\n          <Form.Check inline type='radio' name='radiosInline' id='radiosInline2' label=\"Merchant\" onChange={(e)=>setIsMerchant(true)}/>\n           \n         </Form.Group>\n         </fieldset>\n\n           {/*4*/ isMerchant &&  \n           \n              <ListGroup>\n              <ListGroup.Item>\n                \n           <Form.Group controlId='pickup-address'>\n\n          <Form.Label> What is your address (for pickup of goods)? </Form.Label>\n          <Form.Control type='input' placeholder=\"enter pickup location\" value={pickupAddress} onChange={(e)=>setPickupAddress(e.target.value)}></Form.Control>\n           \n         </Form.Group> \n          </ListGroup.Item>\n          </ListGroup>}\n\n\n  {/*5*/}      <Form.Group controlId='password'>\n\n          <Form.Label>  Password  </Form.Label>\n          <Form.Control type='password' placeholder=\"enter password\" value={password} onChange={(e)=>setPassword(e.target.value)}></Form.Control>\n\n         </Form.Group>\n\n {/*5*/}      <Form.Group controlId='confirmPassword'>\n\n                 <Form.Label>  Confirm password  </Form.Label>\n                 <Form.Control type='password' placeholder=\"confirm password\" value={confirmPassword} onChange={(e)=>setConfirmPassword(e.target.value)}></Form.Control>\n\n                </Form.Group>\n\n             \n             <br/>\n             <br/>\n             {(  password !=='' && (password === confirmPassword)) && <Message variant='success'>Passwords are a match! {!isMerchant && 'please fill in the section below'}.</Message> } \n             {message && <Message variant='danger'>{message}</Message>}\n            {error && <Message variant='danger'>{error}</Message>}\n              \n             {( !isMerchant && password !=='' && (password === confirmPassword)) && \n            <> <h1>Personal Identifier Questions</h1>\n               <p>We use this data to confirm it's you, upon purchase</p>\n            </>}\n       \n             <br/>\n             <br/>\n\n            { (!isMerchant && password !=='' && (password === confirmPassword)) && \n             \n            <>\n          <ListGroup>\n            <ListGroup.Item className=\"my-3\">\n\n          <Form.Group controlId='momFirstName'>\n        \n         <Form.Label> What is your mother's first name ?   </Form.Label>\n          <Form.Control type='input'  /*value={momFirstName}*/ onChange={(e)=>setMomFirstName(e.target.value)}></Form.Control>\n\n         </Form.Group>\n\n         <Form.Group controlId='shoeSize'>\n        \n        <Form.Label> What is your shoe size?   </Form.Label>\n        <Form.Control type='input'  /*value={shoeSize}*/ onChange={(e)=>setShoeSize(e.target.value)}></Form.Control>\n\n        </Form.Group>\n\n        <Form.Group controlId='closestFriend'>\n        \n        <Form.Label> What is the name of your closest friend ?   </Form.Label>\n        <Form.Control type='input' /*value={closestFriend}*/ onChange={(e)=>setClosestFriend(e.target.value)}></Form.Control>\n\n        </Form.Group>\n\n        <Form.Group controlId='childhoodStreet'>\n        \n       <Form.Label> What is the name of the street you lived on as a child ?   </Form.Label>\n        <Form.Control type='input' placeholder=\"please make sure to spell your answers correctly\" /*value={childhoodStreet}*/ onChange={(e)=>setChildhoodStreet(e.target.value)}></Form.Control>\n\n        </Form.Group>\n\n\n        <Form.Group controlId='firstEmployment'>\n        \n         <Form.Label> What is the name of the first place you worked at (employment) ?   </Form.Label>\n        <Form.Control type='input' /*value={firstEmployment}*/ onChange={(e)=>setFirstEmployment(e.target.value)}></Form.Control>\n\n        </Form.Group>\n\n        </ListGroup.Item>\n          </ListGroup>\n        </>\n       }\n        <br/>\n          <Button type='submit' variant='primary'>Register</Button>\n        </Form>\n\n        <Row className='py-3'>\n         <Col>\n           Have an account?<Link to={/*redirect?`$login/redirect=${redirect}`:*/'/login'}> Login</Link>\n         </Col>\n        </Row>\n\n       </FormContainer>\n\n    )\n\n}\n\nexport default RegisterScreen\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Header.js",["213","214","215","216","217","218","219","220"],"import React from 'react'\nimport {Route} from 'react-router-dom'\nimport  {useState,useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {LinkContainer} from 'react-router-bootstrap'\nimport {Container,Nav,Navbar,NavDropdown} from 'react-bootstrap'\nimport {logout,listUsers} from '../actions/userActions.js'\nimport {listOrders} from '../actions/orderActions.js'\nimport SearchBox from './SearchBox.js'\nimport bridgeway from './bridgeway-logo.jpg' \n\n\n\n  \n\nconst Header = () => {\n   \n  \n  const seller = '(Merchant)'\n  const dispatch = useDispatch()\n  const [cartVisibility, setCartVisibility] = useState(true)\n\n  const userLogin = useSelector(state => state.userLogin)\n  const {userInfo} = userLogin\n   /*console.log(userInfo)*/\n\n  const userList = useSelector(state => state.userList);\n  const {loading, error,users } = userList\n  const newMessages =users && users.some((user)=>{return user.adminMessageNotification ===true})?true:false\n  const numberOfMessages = users? users.filter((user)=>{return user.adminMessageNotification ===true}).length:''\n\n  const orderList = useSelector(state => state.orderList);\n  const {loading:loadingOrders, error:errorOrders,orders } = orderList\n \n  const newOrders =orders && orders.some((order)=>{return order.isDelivered ===false})?true:false\n  const numberOfOrders = orders? orders.filter((order)=>{return order.isDelivered ===false}).length:''\n  const newVendorOrders = orders?orders.filter((order)=>(order.orderItems.filter((item) => (item.vendor === userInfo.name)).some((item) => (item.promisedQty === 0)))):false\n  /*const numberOfVendorOrders = *//*USE MONGO DB to laser return all promised quantities of zero of a particular vendor from the order items of ALL orders  AND STOP STRESSING */\n\n  /*console.log(numberOfVendorOrders)*/\n\n  /*if(orders && userInfo){\n    userInfo.newOrders = orders.map(function(order){order.orderItems}).every(function(item){item.promisedQty===0})===true?true:false\n  }*/\n  \n  useEffect(() => {if(userInfo && (userInfo.isMerchant||userInfo.isAdmin)){\n     setCartVisibility(false)}\n     else{setCartVisibility(true)}\n\n     if(userInfo && userInfo.isAdmin ){\n      dispatch(listUsers())\n      }\n\n      if(userInfo && (userInfo.isAdmin || userInfo.isMerchant) ){\n        dispatch(listOrders())\n        }\n      \n      \n\n  },[userInfo])\n  \n\n\n /*useEffect(() =>{\n   if(users && userInfo && userInfo.isAdmin){\n userInfo.newMessages = users.some((user)=>{return user.adminMessageNotification ===true})\n userInfo.numberOfMessages =  users.filter((user)=>{return user.adminMessageNotification ===true}).length\n}\n\n },[users])*/\n\n\n  const logoutHandler = () => {\n    \n    dispatch(logout())\n    window.location.assign('/')\n     \n    \n  }\n  \n    return(\n<header>\n\n <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\n  <Container>\n  <LinkContainer to=\"/\">\n  {/*why cant we wrap this in a link tag?*/}\n  <Navbar.Brand ><img src={bridgeway} alt={'the logo of bridgeway bank'} /></Navbar.Brand>\n  </LinkContainer>\n\n  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n  <Navbar.Collapse id=\"basic-navbar-nav\">\n  <Route render ={({history})=> <SearchBox history={history}/>} /> {/*THERE IS A VERY IMPORTANT THING TO LEARN HERE, IF YOU PUT IN A COMPONONENT DIRECTLY IN THE NAVBAR, IT HAS NO ACCESS TO PROPS, SO YOU GOTTA PUT IT IN A ROUTE AND THEN USE THE RENDER FUNCTION TO PASS IN PROPS..YOU GOTTA STUDY THIS*/}\n   <Nav className=\"ml-auto\">\n\n    {/*DONT FORGET TO USE THE CDN OF FONT-AWESOME IN INDEX.HTML\n    FROM CDN JS.COM ,JUST TYPE FONT AWESOME AND COPY IT*/}\n{cartVisibility &&\n<LinkContainer to='/cart'>\n     <Nav.Link ><i className='fas fa-shopping-cart'></i>Cart\n     {userInfo && userInfo.userMessageNotification && <i className='fas fa-circle' style={{color:'red', fontSize:'8px', marginLeft:'15px' , marginRight:'-12px'}}></i>}\n     </Nav.Link>\n     \n</LinkContainer> }\n\n   {userInfo?(\n     <>\n     <span>{userInfo && userInfo.isMerchant && userInfo.userMessageNotification && <i className='fas fa-circle' style={{color:'red', fontSize:'8px', marginLeft:'15px' , marginRight:'-1px', marginTop:'14px'}}></i>}</span>\n     <NavDropdown title ={userInfo.name + `${(userInfo && userInfo.userMessageNotification)? ' (1)':''}`} id='username'>\n     <LinkContainer to='/profile'>\n          <NavDropdown.Item >Profile { userInfo && userInfo.userMessageNotification &&<i className='fas fa-circle' style={{color:'red', fontSize:'7px'}}></i>} </NavDropdown.Item>\n          \n     </LinkContainer>\n\n       <NavDropdown.Item onClick={logoutHandler} >Logout </NavDropdown.Item>\n     </NavDropdown>\n     </>\n   ):(\n     <LinkContainer to='/login'>\n          <Nav.Link><i className='fas fa-user'></i>Sign In</Nav.Link>\n     </LinkContainer>\n     \n   )\n    \n   }\n\n\n{userInfo && userInfo.isMerchant && (\n  <>\n    <span>{(userInfo && userInfo.isMerchant && (newVendorOrders)) && <i className='fas fa-circle' style={{color:'red', fontSize:'8px', marginLeft:'15px' , marginRight:'-1px', marginTop:'14px'}}></i>}</span>\n    <NavDropdown title ={'Merchant Functions'} id='username'>\n\n{/*i need to make a merchant token, so that merchants have access to a productlist distinct of admins*/}\n{/*1*/}      <LinkContainer to='/admin/productlist'>\n            <NavDropdown.Item >Products</NavDropdown.Item>\n           </LinkContainer> \n\n{/*2*/}      <LinkContainer to='/admin/orderlist'>\n            <NavDropdown.Item >Orders { (userInfo && userInfo.isMerchant && newVendorOrders) && <i className='fas fa-circle' style={{color:'red', fontSize:'7px'}}></i>} </NavDropdown.Item>\n           </LinkContainer>\n\n     </NavDropdown>\n     </>\n   )}\n\n\n   {userInfo && userInfo.isAdmin && (\n     <>\n     {/*the code below is too long, try and refactor it*/} \n  <span>{(userInfo && userInfo.isAdmin && (newMessages||newOrders)) && <i className='fas fa-circle' style={{color:'red', fontSize:'8px', marginLeft:'15px' , marginRight:'-1px', marginTop:'14px'}}></i>}</span>\n  <NavDropdown title ={'Admin Functions' +' '+ `${numberOfMessages + numberOfOrders > 0 ? `(${numberOfMessages + numberOfOrders})`:''}`} id='username'>\n\n{/*1*/}     <LinkContainer to='/admin/userlist'>\n            <NavDropdown.Item >Users { (userInfo && userInfo.isAdmin && numberOfMessages > 0) && `(${numberOfMessages})`} </NavDropdown.Item>\n          </LinkContainer>\n\n{/*2*/}      <LinkContainer to='/admin/productlist'>\n            <NavDropdown.Item >Products</NavDropdown.Item> \n           </LinkContainer>\n\n{/*3*/}      <LinkContainer to='/admin/orderlist'>\n            <NavDropdown.Item >Orders{ (userInfo && userInfo.isAdmin && numberOfOrders > 0) && `(${numberOfOrders})`} </NavDropdown.Item>\n           </LinkContainer>\n\n     </NavDropdown>\n     </> \n   )}\n\n{/*console.log(users.some(function(user){user.userMessageNotification}))*/}\n\n{/*console.log(orders.map(function(order){order.orderItems}).every(function(item){item.qty>0} ))*/}\n\n   </Nav>\n\n  </Navbar.Collapse>\n  </Container>\n </Navbar>\n\n</header>\n    )\n}\n\nexport default Header\n/*export as default means that , that's the only thing coming out of this file*/\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProfileScreen.js",["221"],"import React, {useState ,useEffect} from 'react'\nimport {LinkContainer} from 'react-router-bootstrap'\nimport {Table,Form, Button, Row, Col, ListGroup} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\nimport Loader from '../components/Message.js'\nimport {getUserDetails, updateUserProfile,updateUserNotes} from '../actions/userActions.js'\nimport {listMyOrders} from '../actions/orderActions.js'\nimport FormContainer from '../components/FormContainer.js'\n\n\n\n\n\nconst ProfileScreen = ({location, history}) => { //he is taking location & history out of the props, normally it is props.location\n  const [name,setName] = useState('')\n  const [email,setEmail] = useState('')  //component level state right here, not application level state\n  const [password,setPassword] = useState('')\n  const [confirmPassword,setConfirmPassword] = useState('')\n  const [notes,setNotes] =useState('')\n  const [message,setMessage] = useState(null)\n  \n  const dispatch = useDispatch() //dont forget that real dispatches only take place in action creators, you are only calling useDispatch here\n\n  const userDetails = useSelector((state) => state.userDetails);\n  const {loading, error,user} = userDetails\n   \n  \n  \n   const userLogin = useSelector((state) => state.userLogin);\n  const {userInfo} = userLogin\n\n  const userProfileUpdate = useSelector((state) => state.userProfileUpdate);\n  const {success} = userProfileUpdate\n\n\n  const userNotesUpdate = useSelector((state) => state.userNotesUpdate);\n  const {success:successNotes} = userNotesUpdate\n \n  const orderListMy  = useSelector((state) => state.orderListMy);\n  const {loading: loadingOrders,error: errorOrders, orders} = orderListMy\n//location .search has the url query string, study it a bit\n\n//because we dont want to able to come into the login screen ONCE WE ARE ALREADY LOGGED IN, effect this in the useEffect below\nconsole.log(user)\n\n\n\n\n\n  useEffect( () => {\n    if(!userInfo){ //cuz user info exists only when you're logged in\n       history.push('/login')\n    }else{\n      if(!user.name){ /*i changed user.name to userInfo.name,to test */\n        dispatch(getUserDetails('profile')/*profile serves as the ID here, so that in the get userDetails route, it hits  /api/users/profile route, and not an actual id*/)\n          dispatch(listMyOrders())\n      }else{\n     setName(user.name)\n     setEmail(user.email)\n     setNotes(user.notes)\n     \n      }\n      \n    }\n\n  },[dispatch,history,userInfo ,user])\n\n\n\n  const submitHandler = (e) => {\n          e.preventDefault()\n       if(password !== confirmPassword){\n         setMessage('Passwords do not Match')\n       }else{\n         //this is where we want to to call our action to dispatch login\n         \n         dispatch(updateUserProfile({id: user._id, name,email, password}))\n       }\n\n  }\n\n\n  const noteSubmitHandler = (e) => {\n    e.preventDefault()\n \n    dispatch(updateUserNotes({id:userInfo._id,notes}))\n\n}\n\n\n    return (\n      <>\n      <br/>\n      <hr/>\n      <br/>\n      \n     <center><p style={{color:'black', maxWidth:'600px', fontSize:'1.3rem' }}>Welcome to your profile! Here you may update your username and password.\n     { !userInfo.isAdmin && ' You may also send and reply to messages.'} \n     { (userInfo.isAdmin || userInfo.isMerchant) && ' You can write notes which you\\'ll refer to later, for your operation on this platform.'}\n     </p></center>\n     \n\n      <br/>\n      <hr/>\n      <br/>\n      <br/>\n     <Row>\n       \n      <Col md={3}>\n      <h2>User Profile</h2>\n      <Form onSubmit={submitHandler}>\n{/*1*/}      <Form.Group controlId='name'>\n\n       <Form.Label>  Name</Form.Label>\n       <Form.Control type='name' placeholder=\"enter name\" value={name} onChange={(e)=>setName(e.target.value)}></Form.Control>\n       {/*the value of form control is form control from the state. You need to read about form group from react bootstrap*/}\n      </Form.Group>\n\n{/*2*/}       <Form.Group controlId='email'>\n\n        <Form.Label>  Email Address </Form.Label>\n        <Form.Control type='email' placeholder=\"enter email\" value={email} onChange={(e)=>setEmail(e.target.value)}></Form.Control>\n        {/*the value of form control is form control from the state. You need to read about form group from react bootstrap*/}\n       </Form.Group>\n\n{/*3*/}      <Form.Group controlId='password'>\n\n        <Form.Label>  Password  </Form.Label>\n        <Form.Control type='password' placeholder=\"enter password\" value={password} onChange={(e)=>setPassword(e.target.value)}></Form.Control>\n\n       </Form.Group>\n\n{/*4*/}     <Form.Group controlId='confirmPassword'>\n\n               <Form.Label>  Confirm password  </Form.Label>\n               <Form.Control type='password' placeholder=\"confirm password\" value={confirmPassword} onChange={(e)=>setConfirmPassword(e.target.value)}></Form.Control>\n\n              </Form.Group>\n\n        <Button type='submit' variant='primary'> Update </Button>\n      </Form>\n       \n       \n       <br/>\n       <br/>\n       <br/>\n\n       <ListGroup variant='flush'>\n         <ListGroup.Item>\n       { !userInfo.isAdmin && userInfo.adminMessage? (\n       <>\n       <Row style={{color:'red'}}>\n        <i className='fas fa-circle' style={{color:'red', fontSize:'9px', padding:'4px'}}></i> \n         New message! \n       </Row>\n       <Row>\n          (click chat to view)\n       </Row>\n       </>\n       ):(!userInfo.isAdmin && <Row>\n        Want to make an enquiry/complaint ? click chat below\n        </Row>)}\n        </ListGroup.Item>\n        \n        <br/>\n        {!userInfo.isAdmin && <ListGroup.Item >\n        <Row>\n      <LinkContainer to='/communications'>\n      <Button type='submit' variant='primary'> Chat </Button>\n      </LinkContainer>\n        </Row>\n        </ListGroup.Item>\n        }\n        </ListGroup>\n\n      </Col>\n\n      <Col md={9}>\n      <h2>{!userInfo.isAdmin && !userInfo.isMerchant ? 'My Orders':''}</h2>\n      {loadingOrders ? <Loader/>:errorOrders? <Message variant='danger'>{errorOrders}</Message>:(\n        \n        !(userInfo.isAdmin || userInfo.isMerchant) ?\n        <Table striped bordered hover responsive className='table-sm'>\n         <thead>\n          <tr>\n           <th>ID</th>\n           <th>DATE</th>\n           <th>TOTAL(₦)</th>\n           <th>PAID</th>\n           <th>DELIVERED</th>\n           <th></th>\n          </tr>\n         </thead>\n         <tbody>\n          {orders.map(order =>(\n            <tr key={order._id}>\n             <td>{order._id}</td>\n             <td>{order.createdAt.substring(0,10)}</td>\n             <td>{order.totalPrice}</td>\n             <td>{order.isPaid ? order.paidAt.substring(0,10):(<i className='fas fa-times'style={{color:'red'}}></i>)} </td>\n\n             <td>{order.isDelivered ? order.deliveredAt.substring(0,10):(<i className='fas fa-times'style={{color:'red'}}></i>)} </td>\n                 \n             <td>\n             <LinkContainer to={`/order/${order._id}`}>\n              <Button variant='light' className='btn-sm'> Details </Button>\n             </LinkContainer>\n            </td>\n            </tr>\n          ))}\n         </tbody>\n        </Table>\n        \n      :(\n      <>\n      \n        <h1> My Notes </h1>\n       <p> {error && <Message variant='danger'>{error}</Message>}\n        {loading && <Loader/>}\n        </p>\n\n        \n         <Form onSubmit={noteSubmitHandler}>\n        \n\n\n          <Form.Group controlId='reply-message'>\n\n          <Form.Label>  Update your notes below: </Form.Label>\n          <Form.Control as =\"textarea\" rows={12}  value={notes} placeholder='type message here...' onChange={(e)=>{setNotes(e.target.value)}}></Form.Control>\n\n         </Form.Group>\n\n         \n         <Button type='submit'  /*onClick={noteSubmitHandler}*/ variant='primary'>Save Notes</Button>\n         \n\n        </Form>\n       \n        \n        \n      </> \n       \n       ))}\n\n      </Col>\n      </Row>\n        {/*<h1>User Profile</h1>*/}\n        {message && <Message variant='danger'>{message}</Message>}\n        {error && <Message variant='danger'>{error}</Message>}\n        {success && <Message variant='success'>Profile Updated! changes will be reflected on your next login</Message>}\n        {successNotes && <Message variant='success'>Notes Updated!</Message>}\n        {loading && <Loader/>}\n       \n        </>\n    )\n\n}\n\nexport default ProfileScreen\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/OrderListScreen.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/CommunicationScreen.js",["222"],"import React, {useState ,useEffect} from 'react'\n/*import {Link} from 'react-router-dom'*/\nimport {Form, Button, Row, Col} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\nimport Loader from '../components/Message.js'\nimport {clientSaid} from '../actions/userActions.js'\n/*import {bossSaid} from '../actions/userActions.js'*/\nimport FormContainer from '../components/FormContainer.js'\n\n\n\n\n\nconst CommunicationScreen = ({location, history}) => { //he is taking location & history out of the props, normally it is props.location\n  \n  const orderId = location.search ? location.search.split('=')[1] : false\n\n  const [clientMessage,setClientMessage] = useState(orderId ?`Good day Admin, I am writing to tell you about order number ${orderId} `:'')  //component level state right here, not application level state\n  \n  const dispatch = useDispatch() //dont forget that real dispatches only take place in action creators, you are only calling useDispatch here\n  const userLogin = useSelector(state => state.userLogin);\n  const {loading, error,userInfo } = userLogin\n  \n  const clientId = userInfo._id /*at least i think it's this -youre right, it is this */\n  const clientName = userInfo.name\n  const redirect = location.search ? location.search.split('=')[1]:'/'\n//location .search has the url query string, study it a bit\n\n\n  useEffect(()=>{  \n    if(!userInfo){\n    history.push(`/login`)\n    }\n  })\n\n\n  useEffect( () => {\n    /*if(userInfo){ \n       history.push(redirect)\n    } I WANT TO PUT IN THE CUSTOMER SERVICE MESSAGE HERE,SO IT CAN REFRESH UPON CUSTOMER SENDING A MESSAGE*/\n     \n  },[/*redirect,history,userInfo*/])\n\n\n\n  const submitHandler = (e) => {\n          e.preventDefault()\n          //this is where we want to to call our action to dispatch login\n          setClientMessage('')\n          window.alert('Message Sent!')\n        //dispatch(/*login(email,password)*/)\n         dispatch(clientSaid(clientMessage, clientId ,clientName))\n  }\n\n  const previousPageHandler = () => {\n  \n    window.history.back()\n  }\n\n    return (\n      <>\n      <Button className='btn btn-primary my-3' onClick={previousPageHandler}>GO BACK</Button>\n       <FormContainer>\n        <h1>Send A Message ...</h1>\n        {error && <Message variant='danger'>{error}</Message>}\n        {loading && <Loader/>}\n        \n         <Form onSubmit={submitHandler}>\n\n         <Form.Group controlId='reply-message'>\n\n          <Form.Label> Customer Service: </Form.Label>\n          <Form.Control as =\"textarea\" rows={6} plaintext readOnly value={userInfo.adminMessage} defaultValue={`Good day ${userInfo.name},how may we help you?`}></Form.Control>\n\n         </Form.Group>\n         \n        \n\n          <Form.Group controlId='reply-message'>\n\n          <Form.Label>  Send Your Message Below: </Form.Label>\n          <Form.Control as =\"textarea\" rows={6} placeholder='type message here' value={clientMessage} onChange={(e)=>{setClientMessage(e.target.value)}}></Form.Control>\n\n         </Form.Group>\n\n         \n         <Button type='submit' variant='primary'>Send</Button>\n         \n\n        </Form>\n       \n        \n        <br/>\n        <br/>\n        <Row className='py-3'>\n         <Col>                       \n           Want to communicate in another way? send us a message at: <a href={`mailto:customerservice@bridgeway.com?subject=Correspondence from `}> customerservice@bridgeway.com  </a>\n         </Col>  \n                      \n        </Row>  \n   \n        <Row>\n         <Col>\n         Alternatively, call us at: <strong> 08183763331</strong>  \n         </Col>  \n        </Row>          \n\n       </FormContainer>\n      </>\n    )\n\n}\n\nexport default CommunicationScreen\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/UserEditScreen.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProductListScreen.js",["223"],"import React, { useEffect } from 'react'\nimport {LinkContainer} from 'react-router-bootstrap'\nimport {Table,Button,Row,Col} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\nimport Loader from '../components/Message.js'\nimport Paginate from '../components/Paginate.js'\nimport {deleteProduct,listProducts,createProduct} from '../actions/productActions.js'\nimport {PRODUCT_CREATE_RESET } from '../constants/productConstants.js'\n\n\n\n\nconst ProductListScreen =({history, match}) => { //he is taking location & history out of the props, normally it is props.location\n  const pageNumber = match.params.pageNumber || 1\n  const dispatch = useDispatch() //dont forget that real dispatches only take place in action creators, you are only calling useDispatch here\n\n  const productList = useSelector(state => state.productList);\n  const {loading, error,products,page,pages} = productList\n\n  const productCreate = useSelector(state => state.productCreate);\n  const { loading:loadingCreate, error:errorCreate,success:successCreate , product:createdProduct} = productCreate\n\n  const productDelete = useSelector(state => state.productDelete);\n  const { loading:loadingDelete, error:errorDelete,success:successDelete } = productDelete\n\n  const userLogin = useSelector(state => state.userLogin);\n  const {userInfo } = userLogin\n\n  /* const keyword = ''just in case you need an empty string in listProducts */\n\n  let vendorName = userInfo.isMerchant ? userInfo.name :''\n\n\n\n//location .search has the url query string, study it a bit\n\n//because we dont want to able to come into the login screen ONCE WE ARE ALREADY LOGGED IN, effect this in the useEffect below\n\nuseEffect(()=> {\n  if(!userInfo){\n    \n    history.push('/login')\n    \n  }\n \n  },[ userInfo,history,dispatch,successCreate])\n\n\n\n  /*useEffect(()=> {\n    if(userInfo.isMerchant){\n      vendorName = userInfo.name\n    }\n    else if(userInfo.isAdmin){\n      \n      vendorName = /(.*)/\n    }\n\n    },[userInfo])*/\n\n\n\n\n  useEffect( () => {\n    dispatch({type: PRODUCT_CREATE_RESET })\n  if(userInfo.isAdmin === false && userInfo.isMerchant === false){\n  history.push('/login')\n\n  }\n\n  if(successCreate){\n   history.push(`/admin/product/${createdProduct._id}/edit`)\n }else{\n   dispatch(listProducts(' ',pageNumber,vendorName))\n }\n\n\n    }\n  ,[dispatch,history,userInfo, successDelete,successCreate,createdProduct,pageNumber]) //successDelete was passed into useEffect because youu want the list of users to reload, showing the effective delete\n\n\n\n const deleteHandler = (id) => {\nif(window.confirm('Are you sure you want to delete this item ?')){ //window.confirm is good practice for if you want to delete items\n  dispatch(deleteProduct(id))\n}\n\n  }\n\n  const createProductHandler = () => {\n    dispatch(createProduct())\n    }\n\n    return (\n       <>\n       <br/>\n       <center><p style={{color:'black', maxWidth:'600px'  }}>\n     { userInfo.isAdmin && 'This is a list of all products on the marketplace'} \n     { userInfo.isMerchant && ' This is a list of all your products on the marketplace. You may edit, create or delete them here.'}\n     </p></center>\n        <Row className='align-items-center'>\n         <Col>\n          <h1>Products</h1>\n         </Col>\n         <Col className=\"text-right\">\n          {userInfo.isMerchant  && (<Button className='my-3' onClick={createProductHandler}>\n            <i className='fas fa-plus'></i> Create Product\n          </Button>)}\n         </Col>\n        </Row>\n        {loadingDelete && <Loader/> }\n        {errorDelete &&<Message variant='danger'>{errorDelete}</Message> }\n\n        {loadingCreate && <Loader/> }\n        {errorCreate &&<Message variant='danger'>{errorCreate}</Message> }\n\n        {loading ? <Loader/>:error ? <Message variant='danger'>{error}</Message>:(\n         <>\n        <Table striped bordered hover responsive className ='table-sm'>\n         <thead>\n          <tr>\n           <th>ID</th>\n           <th>NAME</th>\n           <th>PRICE</th>\n           <th>CATEGORY</th>\n           {userInfo.isAdmin && <th>VENDOR</th>}\n           <th></th>\n         </tr>\n         </thead>\n         <tbody>\n          {products.map(product => (\n            <tr key={product._id}>\n              <td>{product._id}</td>\n              <td>{product.name}</td>\n              <td>₦ {product.price}</td>\n              <td>{product.category}</td>\n              {userInfo.isAdmin && <td>{product.vendor}</td>}\n              {userInfo.isMerchant && (<td>\n               <LinkContainer to={`/admin/product/${product._id}/edit`}>\n                <Button variant='light' className='btn-sm'>\n                   <i className='fas fa-edit'></i> Edit\n                </Button>\n               </LinkContainer>\n               <Button variant='danger' className='btn-sm' onClick={()=>deleteHandler(product._id)}>\n                 <i className='fas fa-trash'></i> Delete\n               </Button>\n              </td>)}\n            </tr>\n          ))}\n         </tbody>\n        </Table>\n\n         <Paginate pages={pages} page={page} isAdmin={true}/>\n        </>\n        )}\n\n\n\n\n\n       </>\n\n    )\n\n}\n\nexport default ProductListScreen\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProductEditScreen.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/OrderScreen.js",["224","225","226","227","228","229"],"import React, {useEffect, useState} from 'react'\nimport axios from 'axios'\nimport {Link} from 'react-router-dom'\nimport {LinkContainer} from 'react-router-bootstrap'\nimport {PayPalButton} from 'react-paypal-button-v2'\nimport { Button, Row ,Col ,Form, ListGroup, Image, Card, ListGroupItem} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\n//import {getUserDetails, updateUserProfile} from '../actions/userActions.js'\nimport {getOrderDetails,payOrder,deliverOrder,merchantApproveOrder/*,merchantLockOrder*/} from '../actions/orderActions.js'\nimport Loader from '../components/Loader.js'\nimport {ORDER_PAY_RESET,ORDER_DELIVER_RESET } from '../constants/orderConstants.js'  //HE MADE AN EXCEPTION HERE DISPATCHING STRAIGHT FROM CONSTANTS WITHOUT CALLING ACTIONS, TO MAKE THINGS FASTER\n\n\nconst OrderScreen =  ({match,history}) => {\n     const [sdkReady,setSdkReady] = useState('false') // this is our piece of local state for when the SDK is ready\n\n\n\n   const orderId = match.params.id\n   const dispatch = useDispatch()\n  //const cart = useSelector(state => state.cart) come back and check why you commented this out\n\n const [merchantProductsArray,setMerchantProductsArray] = useState('') /*i never actually change the state of this */\n const [promisedQtyArray,setPromisedQtyArray] = useState('')\n const [committedValue, setCommittedValue] = useState('')\n const [productId,setProductId] = useState('')\n const [highlight,setHighlight] = useState('13px')\n const [colour, setColour] = useState('black')\n  const orderDetails = useSelector((state) => state.orderDetails )\n  const {order,loading,error} = orderDetails\n   /*console.log(order)*/\n  \n \n\n   \n\n   const userLogin = useSelector((state) => state.userLogin )\n  const {userInfo} = userLogin\n\n  const orderPay = useSelector((state) => state.orderPay )\n  const {loading:loadingPay, success:successPay} = orderPay //this is renaming what you destructured, not making a new object\n\n  const orderDeliver = useSelector((state) => state.orderDeliver )\n  const {loading:loadingDeliver, success:successDeliver} = orderDeliver\n\nif(!loading){\n  //calculating the prices for orders\n const addDecimals = (num) => { return(Math.round(num*100)/100).toFixed(2) }\n\n order.itemsPrice = addDecimals(order.orderItems.reduce((acc, item)=>acc +item.price*item.qty,0))\n order.promisedQtyArray = promisedQtyArray\n order.merchantProductsArray = merchantProductsArray\n /*order.initalState = order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item) => (item.promisedQty))*/\n}\n\n const initialState = function(order,item){\n  const vendorArray = order.orderItems.filter((item) => (item.vendor === userInfo.name))\n  setMerchantProductsArray(vendorArray)\n  const promisedArray =  order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item) => (promisedQtyArray[vendorArray.indexOf(item)]))\n  setPromisedQtyArray(promisedArray)\n  console.log(typeof(promisedQtyArray),promisedQtyArray)\n }\n\n\n\n const liveUpdate =function(e,item){\n   /*const vendorArray = order.orderItems.filter((item) => (item.vendor === userInfo.name))\n    setMerchantProductsArray(vendorArray)*/\n/*const copyArray =  order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item) => (item.promisedQty)) /*i need to call this ONCE,not everytime the function is called so bring it out of this function */\n             const copyArray = promisedQtyArray         \n         copyArray[merchantProductsArray.indexOf(item)] = Number(e.target.value)\n    \n                     setPromisedQtyArray(copyArray)\n                     /*console.log(promisedQtyArray,merchantProductsArray)*/\n                     console.log(copyArray,promisedQtyArray)\n                    }\n\n//AN ARRAY TO CORRESPOND WITH THE LENGTH THE VENDORS ITEMS THAT ARE DISPLAYED ON SCREEN, SO WE CAN EASILY CHANGE ITEM AMOUNTS ON SCREEN\n/*let promisedQtyArray = order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item, index) =>(\n  0\n))*/\n\n//AN ARRAY TO FILTER ORDER ITEMS THAT HAVE A PARTICULAR VENDOR, TO HELP US PICK promisedQtyArray element, in the order items  \n/*const merchantProductsArray =  order.orderItems.filter((item) => (item.vendor === userInfo.name))*/\n\n/*useEffect(()=>{\n  if(!order){promisedArray = []}\n  else{ promisedArray =  order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item) => (item.promisedQty))\nsetPromisedQtyArray(promisedArray)}\n\n  if(!order){vendorArray =[]}\n  else{vendorArray=order.orderItems.filter((item) => (item.vendor === userInfo.name))}\n  setMerchantProductsArray(vendorArray)\n  \n\n},[order,promisedArray,vendorArray])*/\n\n\n\n\n\nuseEffect(()=> { \n       if(!userInfo){\n         history.push('/login')\n       }\n      \n       /*setPromisedQtyArray(order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item, index) =>(\n        0\n      ))) \n       setMerchantProductsArray(order.orderItems.filter((item) => (item.vendor === userInfo.name)))*/\n\n  const addPayPalScript = async () => {\n    const {data:clientId} = await axios.get('/api/config/paypal')\n    const script = document.createElement('script') //this script being created will not be in the source code, cuz it comes to life AFTER the source code loads\n    script.type ='text/javascript'\n    document.body.appendChild(script)\n    script.async=true\n    script.onload =()=> {  \n        setSdkReady(true)\n    }\n    script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}` //this is the software development kit that paypal gives us\n    \n  }\n\n\n  if(!order||successPay||successDeliver){\n    dispatch({type:ORDER_PAY_RESET})\n    dispatch({type:ORDER_DELIVER_RESET})  //AGAIN HE MADE AN EXCEPTION HERE AND DISPATCHED STRAIGHT FROM CONSTANTS SO HE CAN KEEP IT SHORT\n\n    dispatch(getOrderDetails(orderId))}\n\n  else if(!order.isPaid){\n    if(!window.paypal){\n      addPayPalScript()\n    }\n    else{ setSdkReady(true) }\n  }\n},[dispatch,orderId,successPay,successDeliver,order,history,userInfo])\n\nconst successPaymentHandler = (paymentResult) => {\n   console.log(paymentResult)\n  dispatch(payOrder(orderId, paymentResult))\n\n}\n\nconst deliverHandler = ()=> {\n  dispatch(deliverOrder(order))\n}\n\nconst submitHandler = (e) => {\n    e.preventDefault()\n    if( promisedQtyArray==='' ){window.alert('please select a value before committing!')}\n    else if(typeof((promisedQtyArray.reduce((acc, item)=>acc +item,0)))!=='number'){window.alert('You cannot commit zero,please contact admin if you are out of stock')}\n    else{dispatch(merchantApproveOrder(order._id, productId, committedValue))}\n}\n /*is there a factor of 18/19 to consider for, --yes */\n/*const merchantTotal = order.orderItems.filter((item) => (item.vendor === userInfo.name)).reduce((acc, item)=>acc +(item.price*item.qty),0)*/\n\n        return loading ?( <Loader/> ):error ?( <Message variant='danger'>{error} </Message>):\n(<>\n\n    <h1>Order ID: {order._id}</h1>\n    <Row>\n     <Col md={8}>\n\n      <ListGroup variant=\"flush\">\n       <ListGroup.Item>\n         <h2>Delivery</h2>\n         {userInfo.isMerchant && <>\n         \n         <p>Here you may commit to fulfilling orders. Please select the number of each item that you are sure\n            to give the customer once the dispatch rider comes around.  PLEASE MAKE EFFORTS TO FULLY FULFILL ALL YOUR ORDERS, FOR A GOOD REPUTATION AMONG CUSTOMERS.  Once you\n            select the amount from the dropdown menu click the commit button to \n            lock it in (for each item).</p>\n            <br/>\n            <p>\n            If you are only able to partially fulfill your order, (you cannot meet the  expected quantity for any item), be sure to send a message to the admin mentioning\n            the order ID, the items in question and how many units you are able to fulfill . The total amount of money you are to recieve, will be reflected in the payment summary, based on the number of units you agree to fulfill.\n            </p>\n            <br/>\n            <p>Please commit all your order items by: &nbsp; <span style={{color:'black', fontSize:'1rem'}}>{new Date(new Date(order.createdAt).getTime()+ 24 * 60 * 60 * 1000).toLocaleDateString()}</span></p>\n            <br/>\n                  \n            </>}\n        <p> {userInfo.isMerchant||userInfo.isAdmin?(<strong>Order placed by :</strong>):(<strong>Name :</strong>) }{'   '}{order.user.name}</p>\n\n       { !userInfo.isMerchant &&\n       <>\n       <p> <strong>Email:</strong>{' '} <a href= {`mailto:${order.user.email}`}>{order.user.email}</a> </p>\n          <p>\n         <strong>Address:</strong>\n         {order.shippingAddress.address},{order.shippingAddress.city}{' '},\n         {order.shippingAddress.postalCode}{' '},{order.shippingAddress.country}\n         </p>\n         \n      </> }\n\n         {order.isDelivered ?<Message variant='success'>Delivered on {order.deliveredAt.substring(0,10)}</Message> :\n                        <Message variant='danger'> Not delivered</Message> }\n\n          </ListGroup.Item>\n\n          {/*<ListGroup.Item>\n           <h2>Payment Method</h2>\n\n            <p>\n            <strong>Method:</strong>\n            {order.paymentMethod}\n            </p>\n       {order.isPaid ?<Message variant='success'>Paid on {order.paidAt}</Message> :\n                      <Message variant='danger'> Not paid</Message> }\n           </ListGroup.Item>*/}\n\n           <ListGroup.Item>\n           <ListGroup>\n             <ListGroupItem>\n            <h2>Order Items</h2>\n          <Row>\n          {!userInfo.isMerchant && <Col md={2}>S/N</Col>}\n          <Col md={2}>Item</Col>\n          <Col md={2}>To Fulfill</Col>\n          {userInfo.isMerchant?(<Col md={4}>How many can you fulfill?</Col>):(userInfo.isAdmin && <Col md={2}>Merchant's promised amount)</Col>)}\n          {userInfo.isMerchant && <Col md={2}>Item Total</Col>}\n          \n          {!userInfo.isMerchant && <Col md={2}>Total</Col>}\n          \n          </Row>\n          </ListGroupItem>\n          </ListGroup>\n          { order.orderItems.length === 0 ? ( <Message>Order is empty </Message>):(userInfo.isMerchant ?\n            (<>\n               \n            <ListGroup variant=\"flush\">\n              { \n                /*merchantItems = order.orderItems.filter((item) => (item.vendor === userInfo.vendor))*/\n                order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item, index) =>(\n                   \n                <ListGroup.Item key ={index}>\n                <Row>\n                {/*<Col md={2}>{index + 1}</Col>*/}\n                 <Col md={2}>\n                  <Image src={item.image} alt={item.name} fluid rounded/>\n                  <Link to={`product/${item.product}`/*remember product property is the id in the cart*/}>\n                   {item.name}\n                  </Link>\n                  </Col>\n                  <Col md={2}>\n                   {item.qty}\n                   </Col>\n                   \n                   <Col md={4}>\n                 <Form className=\"form-inline\" onSubmit={submitHandler}>\n                   \n                   <Form.Group>\n                   <Form.Row>\n                   <Col md={2}>\n                   <Form.Control as='select' defaultValue={0} onMouseEnter ={(e)=>{initialState(order,item)}} onChange ={(e)=>{   \n                                                                   liveUpdate(e,item) \n                                                                   setCommittedValue(Number(e.target.value))\n                                                                   setProductId(item.product)\n                                                                                \n                                                                                }}>\n          {[...Array(item.qty+1).keys()].map((x) =>(\n            <option key={x} value={x} disabled={item.merchantPromise} >\n             {x}\n            </option>\n             \n          ))}\n               \n        </Form.Control>\n        \n                  </Col>\n                   \n                  </Form.Row>\n                  </Form.Group>\n                    \n                   <Form.Group>\n                   <Form.Row>\n                   \n                   <Col md={{span:2,offset:2}}>\n                   \n                      <Button type='submit' variant='primary' className='btn-sm' onMouseDown={(e)=>{ /*setHighlight('16px') setColour('green')*/}} onMouseUp={(e)=>{/*setHighlight('13px') setColour('black')*/}}>\n                       COMMIT\n                    \n                       </Button>\n                   </Col>\n                   </Form.Row>\n                   </Form.Group>\n              </Form>\n              </Col>\n                   <Col md={3} style={{fontSize:highlight, color:colour}}>\n                   {promisedQtyArray===''?(item.promisedQty):(typeof(promisedQtyArray[merchantProductsArray.indexOf(item)])!=='number'? 0:promisedQtyArray[merchantProductsArray.indexOf(item)])} x ₦ {item.price} = ₦ {(promisedQtyArray===''?(item.promisedQty):(typeof(promisedQtyArray[merchantProductsArray.indexOf(item)])!=='number'? 0:promisedQtyArray[merchantProductsArray.indexOf(item)]))*item.price}\n                   </Col>\n\n                  </Row>\n\n                </ListGroup.Item>\n              ))}\n              </ListGroup>\n          </>):\n            (\n            <ListGroup variant=\"flush\">\n              {order.orderItems.map((item, index) =>(\n\n                <ListGroup.Item key ={index}>\n                <Row>\n                <Col md={2}>{index + 1}</Col>\n                 <Col md={2}>\n                  <Image src={item.image} alt={item.name} fluid rounded/>\n                  <Link to={`product/${item.product}`/*remember product property is the id in the cart*/}>\n                   {item.name}\n                  </Link>\n                  </Col>\n                  <Col md={2}>\n                   {item.vendor}\n                   </Col>\n                   \n                   {userInfo.isAdmin && <Col md={4}>\n                   {item.promisedQty}\n                   </Col>}\n\n                   <Col md={3}>\n                   {item.qty} x ₦ {item.price} = ₦ {item.qty*item.price}\n                   </Col>\n\n                  </Row>\n\n                </ListGroup.Item>\n                )\n              )}\n            </ListGroup>\n           ))\n               } \n               \n               </ListGroup.Item>\n      </ListGroup>\n     </Col>\n\n     <Col md={4}>\n      {(!userInfo.isAdmin && !userInfo.isMerchant) && <Card>\n          <ListGroup variant='flush'>\n           <ListGroup.Item>\n            <h2>Order Summary</h2>\n           </ListGroup.Item>\n\n           <ListGroup.Item>\n            <Row>\n\n             <Col> Items </Col>\n             <Col>₦ {order.itemsPrice} </Col>\n               \n            </Row>\n           </ListGroup.Item>\n\n           \n\n            <ListGroup.Item>\n            <Row>\n\n             <Col>Delivery Cost </Col>\n             <Col>₦ {(order.deliveryCost*1).toFixed(2)} </Col>\n\n            </Row>\n           </ListGroup.Item>\n\n            \n\n           <ListGroup.Item>\n            <Row>\n\n             <Col>Total </Col>\n             <Col>₦ {order.totalPrice} </Col>\n\n            </Row>\n           </ListGroup.Item>\n\n          {/*!order.isPaid && (\n            <ListGroup.Item>\n             {loadingPay && <Loader/>}\n             {!sdkReady ?<Loader/> :(<PayPalButton amount ={order.totalPrice} onSuccess={successPaymentHandler}/>)  }\n            </ListGroup.Item>\n          )*/}\n\n\n         </ListGroup>\n       </Card> }\n         \n         \n       { userInfo.isMerchant && <Card>\n          <ListGroup variant='flush'>\n           <ListGroup.Item>\n            <h2>Payment Summary</h2>\n           </ListGroup.Item>\n\n           <ListGroup.Item>\n            <Row>\n\n             <Col>Total Payable: </Col>\n             <Col>₦ {(order.orderItems.filter((item) => (item.vendor === userInfo.name)).reduce((acc, item)=>acc +(item.price*item.qty),0)).toFixed(2)} </Col> \n               \n            </Row>\n           </ListGroup.Item>\n\n           <ListGroup.Item>   \n            <Row>\n\n             <Col> To Recieve: </Col>\n             <Col>₦ {(order.orderItems.filter((item) => (item.vendor === userInfo.name)).reduce((acc, item)=>acc +(item.price*item.promisedQty),0)).toFixed(2)} </Col> \n               \n            </Row>\n           </ListGroup.Item>\n\n            <ListGroup.Item>\n            <Row>\n\n             <Col>Delivery Deductions: </Col>\n             <Col>-₦{(Number(order.deliveryCost)).toFixed(2)} </Col> {/*we don't know who the delivery cost falls to, but here i've assumed it falls to suppliers*/}\n\n            </Row>\n           </ListGroup.Item>\n\n            \n\n           <ListGroup.Item>\n            <Row>\n\n             <Col>Total </Col>\n             <Col>₦ {(order.orderItems.filter((item) => (item.vendor === userInfo.name)).reduce((acc, item)=>acc +(item.price*item.promisedQty),0)).toFixed(2)} </Col>\n\n            </Row>\n           </ListGroup.Item>\n\n          {/*!order.isPaid && (\n            <ListGroup.Item>\n             {loadingPay && <Loader/>}\n             {!sdkReady ?<Loader/> :(<PayPalButton amount ={order.totalPrice} onSuccess={successPaymentHandler}/>)  }\n            </ListGroup.Item>\n          )*/}\n           \n           \n\n         </ListGroup>\n       </Card> }\n\n       {userInfo.isMerchant && \n       \n       <center>\n         <ListGroup > \n      <ListGroup.Item > \n        \n    \n\n  <LinkContainer to={`/communications?specificOrderId=${order._id}`}>\n  <Button type='submit' variant='primary'> CLICK TO MESSAGE ADMIN </Button>\n  </LinkContainer>\n     \n    \n    </ListGroup.Item>\n    </ListGroup>\n    </center>}\n  \n\n       {userInfo.isAdmin && <Card>\n          <ListGroup variant='flush'>\n           <ListGroup.Item>\n            <h2>Teller Transactions{order.isDelivered?\" Performed\":\" To Perform\"}</h2>\n           </ListGroup.Item>\n\n          {userInfo.isAdmin && !order.isDelivered && <ListGroup.Item>\n            <p>Please, ONLY perform these transactions after the deadline date ({new Date(new Date(order.createdAt).getTime()+ 24 * 60 * 60 * 1000).toLocaleDateString()}), when\n            the respective merchants have confirmed that they can deliver the goods. </p>\n           </ListGroup.Item>}\n\n\n           <ListGroup.Item>\n            <Row>\n\n             <Col>To BridgeWay Co-operative Account: </Col>\n             <Col>₦ {(order.itemsPrice * (1/19) ).toFixed(2)} </Col>\n\n            </Row>\n           </ListGroup.Item>\n      {order.orderItems.map((item, index) =>(\n            <ListGroup.Item  key ={index}>\n            <Row>\n\n             <Col> {index + 1}. TO {item.vendor} account:  </Col>\n             <Col>₦ {((18/19) * item.price).toFixed(2) * item.qty } </Col>\n\n            </Row>\n           </ListGroup.Item>\n           ))}\n      \n      <ListGroup.Item>\n            <Row>\n\n             <Col>To dispatch rider account: </Col>\n             <Col>₦ {(Number(order.deliveryCost)).toFixed(2)} </Col>\n\n            </Row>\n           </ListGroup.Item>\n\n        <ListGroup.Item>\n            <Row>\n\n             <Col>Total: </Col>\n             <Col>₦ {(order.totalPrice).toFixed(2)} </Col>\n\n            </Row>\n           </ListGroup.Item>\n      \n           \n          {/*!order.isPaid && (\n            <ListGroup.Item>\n             {loadingPay && <Loader/>}\n             {!sdkReady ?<Loader/> :(<PayPalButton amount ={order.totalPrice} onSuccess={successPaymentHandler}/>)  }\n            </ListGroup.Item>\n          )*/}\n\n       {loadingDeliver && <Loader/>}\n      {userInfo && userInfo.isAdmin /*&& order.isPaid*/ && !order.isDelivered && (\n        <ListGroup.Item>\n        <Button type='button' className='btn btn-block' onClick={deliverHandler}> Mark As Delivered</Button>\n        </ListGroup.Item>\n      )}\n\n         </ListGroup>\n       </Card>}\n     </Col>\n    </Row>\n   \n   \n\n</>)\n}\n\n\nexport default OrderScreen;\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/PlaceOrderScreen.js",["230","231","232","233","234","235"],"import React, {useEffect,useState} from 'react'\nimport {Link} from 'react-router-dom'\nimport {LinkContainer} from 'react-router-bootstrap'\nimport { Button, Row ,Col, Form , ListGroup, Image, Card, FormControl} from 'react-bootstrap'\n//you may need to import form container, seeing as you have used a form\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\n\nimport {createOrder} from '../actions/orderActions.js'\nimport {answerVerify} from '../actions/userActions.js'\nimport CheckoutSteps from '../components/CheckoutSteps.js'\n\n\n\nconst PlaceOrderScreen =  ({history}) => {\n   const dispatch = useDispatch()\n   const cart = useSelector(state => state.cart)\n   const userLogin = useSelector(state => state.userLogin)\n   const {loading,error:error2,userInfo} = userLogin\n   \n  console.log(cart)\n\n   const clientId = userInfo._id\n   const userVerify = useSelector(state => state.userVerify)\n   const {loading:loading1 , confirmedState} = userVerify\n\n   const orderCreate = useSelector(state => state.orderCreate )\n  const {order,success,error} = orderCreate /*come change this back to error later */\n  \n// confirmedStates.confirmedStates is initially empty and that breaks the whole thing -confirmedState that you just extracted, is an object mind you, so its confirmedState.confirmedState\n\n  //STATE REGARDING USER CONFIRMATION\n  const [consentQuestion, setConsentQuestion] =useState('hidden') \n  const [confirmQuestion ,setConfirmQuestion]=useState('')\n  const [confirmedStates,setConfirmedStates] = useState('')\n  const [personalIdAnswer, setpersonalIdAnswer] = useState('')\n  const [confirmedMessage, setConfirmedMessage] = useState('')\n  const [presentQuestion, setPresentQuestion] = useState('')\n  const [personalIdQuery, setPersonalIdQuery] = useState('')\n  const [proceed,setProceed] = useState('')\n  /*THE FACE OF THE BUTTON UNDER THE CONFIRM SECTION \n  i have put this in the use effect, lets see if it works well*/\n\n  let buttonLabel = 'Send'\n  if(confirmedStates === 'true'){\n   buttonLabel = 'PLACE ORDER'\n  }else if(confirmedStates === 'false'){\n     buttonLabel = 'TRY AGAIN'\n  }else if(proceed === 'true'){\n    buttonLabel = 'ORDER DETAILS'\n }\n  else{buttonLabel='Send'}\n    \n  //CALCULATING THE PRICES\n  const addDecimals = (num) => { return(Math.round(num*100)/100).toFixed(2) }\n\n    cart.itemsPrice = addDecimals(cart.cartItems.reduce((acc, item)=>acc +item.price*item.qty,0))\n\n    cart.deliveryCost = addDecimals(cart.itemsPrice > 10000 ? 0 : 500)\n\n    /*cart.taxPrice = addDecimals(Number((0.10*cart.itemsPrice).toFixed(2)))*/\n\n    cart.totalPrice = (Number(cart.itemsPrice) /*+ Number(cart.deliveryCost) + Number(cart.taxPrice)*/).toFixed(2)\n   //if your total price is looking funny, just unwrap addDecimals and wrap in .toFixed(2)\n\n  \n    \n  useEffect(()=>{  \n    if(!userInfo){\n    history.push(`/login`)\n    }\n      \n     \n    if( confirmedState && confirmedState.confirmedState === 'true'){ \n    /*dispatch(createOrder({\n      orderItems:cart.cartItems,\n      shippingAddress:cart.shippingAddress,\n       \n      itemsPrice:cart.itemsPrice,\n      deliveryCost:cart.deliveryCost,\n      taxPrice:cart.taxPrice,\n      totalPrice:cart.totalPrice\n      \n    }))*/\n \n    setConfirmedStates('true')\n    setConfirmedMessage('green banner')\n    }\n    else if( confirmedState && confirmedState.confirmedState === 'false'){\n      setConfirmedStates('false')\n      setConfirmedMessage('red banner')\n    }\n   \n  \n\n  },[confirmedState,confirmedStates,userInfo,dispatch,cart/*history,success,order._id*/])\n\n  useEffect(()=>{\n    if(order){\n      setProceed('true')\n      console.log(order)\n    }\n    else{\n      console.log(\"ORDER IS STILL EMPTY!!\")\n    }\n      \n    /*window.history.pushState(null,'','/')*/\n   },[order])\n\nconst showConsentHandler = () => {\n  setConsentQuestion('visible')\n}\n\nconst hideConsentHandler = () => {\n  setConsentQuestion('hidden')\n  setConfirmQuestion('hidden')\n}\n\nconst confirmHandler = () => {\n  setConfirmQuestion('visible')\n  \n  //RANDOM QUESTION CODE\n  const randomNumber = Math.floor((Math.random()*5))\n  const questionsArray = ['What is your mother\\'s first name ?','What is your shoe size?','What is the name of your closest friend ?','What is the name of the street you lived on as a child ?','What is the name of the first place you worked at (employment) ?']\n   const propertyArray = ['momFirstName','shoeSize','closestFriend','childhoodStreet','firstEmployment'] \n   \n   const presentQuestion = questionsArray[randomNumber] \n   setPresentQuestion(presentQuestion) /*i did a little function scope here */\n\n   const personalIdQuery = propertyArray[randomNumber]\n   setPersonalIdQuery(personalIdQuery) /*i did a little function scope here (same principle)*/\n}\n\n\n   \n   \n   \n/*maybe place this bit of code in a better position \n if(confirmedState === 'true'){\n  setConfirmedMessage('green banner')\n\ndispatch(createOrder({\n  orderItems:cart.cartItems,\n  shippingAddress:cart.shippingAddress,\n  paymentMethod:cart.paymentMethod,\n  itemsPrice:cart.itemsPrice,\n  shippingPrice:cart.shippingPrice,\n  taxPrice:cart.taxPrice,\n  totalPrice:cart.totalPrice\n\n}))\n}\nelse if(confirmedState === 'false'){\nsetConfirmedMessage('red banner')\n}\n */\n\nconst submitHandler = (e) => {\n  e.preventDefault()\n\n  /*I WANT THIS BUTTON TO SERVE MULTIPLE FUNCTIONS, FIRST OF WHICH IS TO CHECK IF THE PERSONS ANSWER MATCHES UP, VIA THE DISPATCH BELOW */\n  if(confirmedStates === ''){dispatch(answerVerify(clientId,personalIdQuery, personalIdAnswer))\n  \n  }else if(confirmedStates === 'true'){\n    dispatch(createOrder({\n      orderItems:cart.cartItems,\n      shippingAddress:cart.shippingAddress,\n       /* i removed paymentMethod:cart.paymentMethod */\n      itemsPrice:cart.itemsPrice,\n      deliveryCost:cart.deliveryCost,\n      taxPrice:cart.taxPrice,\n      totalPrice:cart.totalPrice\n      \n    }))\n      \n      \n   }\n  else if(confirmedStates === 'false'){\n   \n     /*buttonLabel ='SEND'*/\n    const randomNumber = Math.floor((Math.random()*5))\n  const questionsArray = ['What is your mother\\'s first name ?','What is your shoe size?','What is the name of your closest friend ?','What is the name of the street you lived on as a child ?','What is the name of the first place you worked at (employment) ?']\n   const propertyArray = ['momFirstName','shoeSize','closestFriend','childhoodStreet','firstEmployment'] \n   \n   const presentQuestion = questionsArray[randomNumber] \n   setPresentQuestion(presentQuestion) \n\n   const personalIdQuery = propertyArray[randomNumber]\n   setPersonalIdQuery(personalIdQuery) \n\n   confirmedState.confirmedState = '' /*you gotta dispatch something here that'll make confirmedState.confirmedState === '' */\n  setConfirmedMessage('')\n  setConfirmedStates('')\n  }\n\n  /*if(proceed==='true'){\n    history.push(`/order/${order._id}`)\n  }*/\n  \n}\n \n\n        return(\n         <>\n        <CheckoutSteps step1 step2 step3 step4/>\n        <Row>\n         <Col md={8}>\n\n          <ListGroup variant=\"flush\">\n           <ListGroup.Item>\n             <h2>Delivery</h2>\n             <p>\n             <strong>Address:</strong>\n             {cart.shippingAddress.address},{cart.shippingAddress.city}{' '},\n             {cart.shippingAddress.postalCode}{' '},{cart.shippingAddress.country}\n             </p>\n            </ListGroup.Item>\n\n             {/* <ListGroup.Item>\n               <h2>Payment Method</h2>\n                <strong>Method:</strong>\n                {cart.paymentMethod /*this item doesnt exist anymore }\n             </ListGroup.Item> */}\n\n             <ListGroup.Item>\n              <h2>Order Items</h2>\n\n               {cart.cartItems.length === 0 ? <Message>Your cart is empty </Message>:(\n                <ListGroup variant=\"flush\">\n                  {cart.cartItems.map((item, index) =>(\n\n                    <ListGroup.Item key ={index}>\n                    <Row>\n                     <Col md={1}>\n                      <Image src={item.image} alt={item.name} fluid rounded/>\n                      <Link to={`product/${item.product}`/*remember product property is the id in the cart*/}>\n                       {item.name}\n                      </Link>\n                      </Col>\n                       <Col md={4}>\n                       {item.qty} x ₦{item.price} = {item.qty*item.price}\n                       </Col>\n\n                      </Row>\n\n                    </ListGroup.Item>\n\n                  ))}\n                </ListGroup>\n               ) }\n            </ListGroup.Item>\n          </ListGroup>\n         </Col>\n\n         <Col md={4}>\n           <Card>\n              <ListGroup>\n               <ListGroup.Item>\n                <h2>Order Summary</h2>\n               </ListGroup.Item>\n\n               <ListGroup.Item>\n                <Row>\n\n                 <Col>Items </Col>\n                 <Col>₦ {cart.itemsPrice} </Col>\n\n                </Row>\n               </ListGroup.Item>\n\n               <ListGroup.Item>\n                <Row>\n\n                 <Col>Delivery Cost </Col>\n                 <Col>₦ {cart.deliveryCost} </Col>\n\n                </Row>\n               </ListGroup.Item>\n\n               {/*<ListGroup.Item>\n                <Row>\n\n                 <Col>Tax </Col>\n                 <Col>₦ {cart.taxPrice} </Col>\n\n                </Row>\n               </ListGroup.Item> */}\n\n               <ListGroup.Item>\n                <Row>\n\n                 <Col>Total </Col>\n                 <Col>₦ {cart.totalPrice} </Col>\n\n                </Row>\n               </ListGroup.Item>\n                {/*place error here*/}\n                <ListGroup.Item>\n                 {error&&<Message variant='danger'>{error} </Message>}\n                </ListGroup.Item>\n\n               <ListGroup.Item> <Button type='button' className='btn-block' disabled={cart.cartItems.length === 0 || confirmedStates === 'true'} onClick={showConsentHandler}>\n               Proceed to Place Order\n               </Button>\n               </ListGroup.Item>\n\n             </ListGroup>\n           </Card>\n         \n           {/*okay so I want this card to be activated when the place order button has been clicked*/\n           /*there should be a consent radio button, that confirms for the user's permission, or hides*/\n           /*the card if the user says no */}  \n             { consentQuestion === 'visible' &&\n               <>\n             <Card>\n               <ListGroup>\n             <ListGroup.Item>\n                <Row>\n\n                 <Col>Do you agree to having ₦ {cart.totalPrice} taken from your account ?</Col>\n                </Row>\n          \n               </ListGroup.Item>\n\n               <ListGroup.Item>\n                <Row>\n                  <Col></Col>\n                Yes{' '}\n                  <Col>\n                  <input type=\"radio\"  id=\"yes\" value=\"yes\" onChange={confirmHandler}/>\n                  </Col>\n                 \n                  No{' '}\n                  <Col>\n                  <input type=\"radio\" id=\"no\" value=\"no\"  onChange={hideConsentHandler} />\n                  </Col>\n                  \n                </Row>\n          \n               </ListGroup.Item>\n               </ListGroup>\n             </Card>\n             </>}\n             { confirmQuestion === 'visible' &&\n               <>\n             <Card>\n\n             <ListGroup>\n             <ListGroup.Item>\n                <Row>\n\n                 <Col><strong>Just so we know it's you:</strong></Col>\n                </Row>\n                {/*<br/>*/}\n               </ListGroup.Item>\n               </ListGroup>\n\n               <ListGroup>\n             <ListGroup.Item>\n                <Row>\n\n                 {/*<Col>{presentQuestion}</Col>*/}\n                </Row>\n        <Form onSubmit={submitHandler}>\n          <Form.Group controlId='reply-message'>\n\n           <Form.Label>{presentQuestion} </Form.Label>\n            {\n           confirmedMessage=== 'green banner'?\n            (<Message variant='success'>Verified!</Message>):\n            (proceed==='true'?(<Message variant='success'>Order Placed!</Message>):(confirmedMessage === 'red banner'?\n            (<Message variant='danger'>Not verified. </Message>):\n   (<Form.Control as =\"textarea\" variant='danger' rows={1} plaintext value = {personalIdAnswer} onChange ={(e)=>{setpersonalIdAnswer(e.target.value)}}></Form.Control>)))\n            }\n            {proceed==='true' &&(<Message variant='success'>Order Placed!</Message>)}\n              \n              \n               {/*i hope to change the text-area to a message component,\n                regardless of what comes back, if it's positive, it should close the whole\n                thing, just like the no option does, but this time\n                , disabling the place order button. if its negative, consider a fail message \n                saying \"payment confirmation failed\" where the payment confirmed would have been,\n                maybe also close the whole thing */}\n           <br/>\n          {proceed==='' &&<Button type='submit' variant='primary'>{buttonLabel}</Button>}\n           {'  '}\n          {proceed==='true' && <LinkContainer to=\"/\">\n          <Button  variant='primary'>GO HOME</Button>\n          </LinkContainer>}\n          {'  '}\n          {proceed==='true' && <LinkContainer to={`/order/${order._id}`}>\n          <Button  variant='primary'>ORDER DETAILS</Button>\n          </LinkContainer>}\n          \n         </Form.Group>\n      </Form>\n                <Row>\n                  \n                </Row>\n               </ListGroup.Item>\n               </ListGroup>\n             </Card>\n             </> }\n         </Col>\n        </Row>\n         </>\n\n        )\n}\n\n\nexport default PlaceOrderScreen;\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/FormContainer.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/CheckoutSteps.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/orderConstants.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Message.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/cartActions.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/productActions.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/SearchBox.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Paginate.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Loader.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/userActions.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Meta.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/orderActions.js",["236"],"import {ORDER_CREATE_REQUEST,\n        ORDER_CREATE_SUCCESS,\n        ORDER_CREATE_FAILURE,\n        ORDER_DETAILS_REQUEST,\n        ORDER_DETAILS_SUCCESS,\n        ORDER_DETAILS_FAILURE,\n        ORDER_PAY_REQUEST,\n        ORDER_PAY_SUCCESS,\n        ORDER_PAY_FAILURE,\n        ORDER_MERCHANT_CREDIT_REQUEST,\n        ORDER_MERCHANT_CREDIT_SUCCESS,\n        ORDER_MERCHANT_CREDIT_FAILURE,\n        ORDER_MERCHANT_CREDIT_RESET,\n        ORDER_INSUFFICIENT_REQUEST,  \n        ORDER_INSUFFICIENT_SUCCESS,\n        ORDER_INSUFFICIENT_FAILURE,\n        ORDER_APPROVE_REQUEST,\n        ORDER_APPROVE_SUCCESS,\n        ORDER_APPROVE_FAILURE,\n        //ORDER_PAY_RESET,\n        ORDER_LIST_MY_REQUEST,\n        ORDER_LIST_MY_SUCCESS,\n        ORDER_LIST_MY_FAILURE,\n        ORDER_LIST_REQUEST,\n        ORDER_LIST_SUCCESS,\n        ORDER_LIST_FAILURE,\n        UNPAID_ORDER_LIST_REQUEST,\n        UNPAID_ORDER_LIST_SUCCESS,\n        UNPAID_ORDER_LIST_FAILURE,\n        ORDER_DELIVER_REQUEST,\n        ORDER_DELIVER_SUCCESS,\n        ORDER_DELIVER_FAILURE\n        //ORDER_DELIVER_RESET,\n       } from '../constants/orderConstants'\nimport axios from 'axios'\n                              /*the entire order object*/\nexport const createOrder  = (order) => async (dispatch,getState)=> {\n   //redux thunk was used just now in the form of async (dispatch) above\n  try {\n    dispatch({type: ORDER_CREATE_REQUEST})\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    const config = {\n      headers:{\n        'Content-Type':'application/json',\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }\n    const {data} = await axios.post(`/api/orders`,order,config)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: ORDER_CREATE_SUCCESS,\n              payload:data })\n\n  }\n   catch(error){\n     dispatch({type:ORDER_CREATE_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\nexport const getOrderDetails  = (id) => async (dispatch,getState)=> {\n//form of async (dispatch) above\n  try {\n    dispatch({type: ORDER_DETAILS_REQUEST})\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send the headers a content type of application/json\n    const config = {\n      headers:{\n        //'Content-Type':'application/json' |you dont really need content type in GET requests for some reason\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }\n    const {data} = await axios.get(`/api/orders/${id}`,config)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: ORDER_DETAILS_SUCCESS,\n              payload:data /*this data variable is file specific*/\n\n    })\n\n  }\n   catch(error){\n     dispatch({type:ORDER_DETAILS_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\n\nexport const payOrder  = (orderId) => async (dispatch,getState) =>{\n//form of async (dispatch) above\n  try {\n    dispatch({type: ORDER_PAY_REQUEST})\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    const config = {\n      headers:{\n        'Content-Type':'application/json',\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }\n    const {data} = await axios.put(`/api/orders/${orderId}/pay`,{},config)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: ORDER_PAY_SUCCESS,\n              payload:data\n            })/*this data variable is file specific\nexport const getOrderDetails  = (id/*this is not the entire object, just an order id*/\n\n\n  }\n   catch(error){\n     dispatch({type:ORDER_PAY_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\nexport const merchantCreditOrder  = (orderId) => async (dispatch,getState) =>{\n  //form of async (dispatch) above\n    try {\n      dispatch({type: ORDER_MERCHANT_CREDIT_REQUEST})\n  \n       const {userLogin:{userInfo}} = getState()\n      //we do config cus we wanna send he headers a content type of application/json\n      const config = {\n        headers:{\n          'Content-Type':'application/json',\n          Authorization:`Bearer ${userInfo.token}`\n        }\n      }\n      const {data} = await axios.put(`/api/orders/${orderId}/paymerchants`,{},config)\n      //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n  \n      dispatch({\n                type: ORDER_MERCHANT_CREDIT_SUCCESS,\n                payload:data\n              })/*this data variable is file specific\n  export const getOrderDetails  = (id/*this is not the entire object, just an order id*/\n  \n  \n    }\n     catch(error){\n       dispatch({type:ORDER_MERCHANT_CREDIT_FAILURE,\n                 payload: error.response && error.response.data.message?\n                  error.response.data.message:error.message })\n     }\n  }\n\n\n\nexport const insufficientFundsOrder  = (orderId) => async (dispatch,getState) =>{\n  //form of async (dispatch) above\n    try {\n      dispatch({type: ORDER_INSUFFICIENT_REQUEST})\n  \n       const {userLogin:{userInfo}} = getState()\n      //we do config cus we wanna send he headers a content type of application/json\n      const config = {\n        headers:{\n          'Content-Type':'application/json',\n          Authorization:`Bearer ${userInfo.token}`\n        }\n      }\n      const {data} = await axios.put(`/api/orders/${orderId}/funds`,{},config)\n      //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n  \n      dispatch({\n                type: ORDER_INSUFFICIENT_SUCCESS,\n                payload:data\n              })/*this data variable is file specific\n  export const getOrderDetails  = (id/*this is not the entire object, just an order id*/\n  \n  \n    }\n     catch(error){\n       dispatch({type:ORDER_INSUFFICIENT_FAILURE,\n                 payload: error.response && error.response.data.message?\n                  error.response.data.message:error.message })\n     }\n  }\n\n\nexport const deliverOrder  = (order) => async (dispatch,getState)=> {\n//form of async (dispatch) above\n  try {\n    dispatch({type: ORDER_DELIVER_REQUEST})\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    const config = {\n      headers:{\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }\n    const {data} = await axios.put(`/api/orders/${order._id}/deliver`,{},config)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: ORDER_DELIVER_SUCCESS,\n              payload:data\n            })/*this data variable is file specific*/\n\n\n\n  }\n   catch(error){\n     dispatch({type:ORDER_DELIVER_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\nexport const listMyOrders  = () => async (dispatch,getState)=> {\n//form of async (dispatch) above\n  try {\n    dispatch({type: ORDER_LIST_MY_REQUEST})\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    const config = {\n      headers:{\n\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    } \n    const {data} = await axios.get(`/api/orders/myorders`,config)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: ORDER_LIST_MY_SUCCESS,\n              payload:data /*this data variable is file specific*/\n\n\n\n    })\n  }\n   catch(error){\n     dispatch({type:ORDER_LIST_MY_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\nexport const listOrders  = (vendorName=''/*try a reg ex of all allowable characters, not just an empty object */) => async (dispatch,getState)=> {\n//form of async (dispatch) above\n  try {\n    dispatch({type: ORDER_LIST_REQUEST})\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    const config = {\n      headers:{\n\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }\n    const {data} = await axios.get(`/api/orders?vendorName=${vendorName}`,config)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: ORDER_LIST_SUCCESS,\n              payload:data /*this data variable is file specific*/\n\n\n\n    })\n  }\n   catch(error){\n     dispatch({type:ORDER_LIST_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\n\nexport const listUnpaidOrders  = () => async (dispatch,getState)=> {\n  //form of async (dispatch) above\n    try {\n      dispatch({type: UNPAID_ORDER_LIST_REQUEST})\n  \n       const {userLogin:{userInfo}} = getState()\n      //we do config cus we wanna send he headers a content type of application/json\n      const config = {\n        headers:{\n  \n          Authorization:`Bearer ${userInfo.token}`\n        }\n      }\n      const {data} = await axios.get(`/api/orders/unpaidorders`,config)\n      //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n  \n      dispatch({\n                type: UNPAID_ORDER_LIST_SUCCESS,\n                payload:data /*this data variable is file specific*/\n  \n  \n  \n      })\n    }\n     catch(error){\n       dispatch({type:UNPAID_ORDER_LIST_FAILURE,\n                 payload: error.response && error.response.data.message?\n                  error.response.data.message:error.message })\n     }\n  }\n\n\nexport const merchantApproveOrder  = (orderId,productId,updatedQty) => async (dispatch,getState)=> {\n  //redux thunk was used just now in the form of async (dispatch) above\n try {\n   dispatch({type: ORDER_APPROVE_REQUEST})\n\n    const {userLogin:{userInfo}} = getState()\n   //we do config cus we wanna send he headers a content type of application/json\n   const config = {\n     headers:{\n       'Content-Type':'application/json',\n       Authorization:`Bearer ${userInfo.token}`\n     }\n   }\n   const {data} = await axios.put(`/api/orders`,{orderId,productId,updatedQty},config)\n   //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n   dispatch({\n             type: ORDER_APPROVE_SUCCESS,\n             payload:data })\n\n }\n  catch(error){\n    dispatch({type:ORDER_APPROVE_FAILURE,\n              payload: error.response && error.response.data.message?\n               error.response.data.message:error.message })\n  }\n}\n\n\nexport const merchantLockOrder  = (order) => async (dispatch,getState)=> {\n  //redux thunk was used just now in the form of async (dispatch) above\n try {\n   dispatch({type: ORDER_CREATE_REQUEST})\n\n    const {userLogin:{userInfo}} = getState()\n   //we do config cus we wanna send he headers a content type of application/json\n   const config = {\n     headers:{\n       'Content-Type':'application/json',\n       Authorization:`Bearer ${userInfo.token}`\n     }\n   }\n   const {data} = await axios.post(`/api/orders`,order,config)\n   //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n   dispatch({\n             type: ORDER_CREATE_SUCCESS,\n             payload:data })\n\n }\n  catch(error){\n    dispatch({type:ORDER_CREATE_FAILURE,\n              payload: error.response && error.response.data.message?\n               error.response.data.message:error.message })\n  }\n}","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/productComponent.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/ProductCarousel.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Rating.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/TransactionScreen.js",["237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260"],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/TransactionListScreen.js",[],{"ruleId":"261","replacedBy":"262"},{"ruleId":"263","replacedBy":"264"},{"ruleId":"265","severity":1,"message":"266","line":35,"column":10,"nodeType":"267","messageId":"268","endLine":35,"endColumn":17},{"ruleId":"265","severity":1,"message":"269","line":35,"column":18,"nodeType":"267","messageId":"268","endLine":35,"endColumn":23},{"ruleId":"265","severity":1,"message":"266","line":19,"column":10,"nodeType":"267","messageId":"268","endLine":19,"endColumn":17},{"ruleId":"265","severity":1,"message":"269","line":19,"column":18,"nodeType":"267","messageId":"268","endLine":19,"endColumn":23},{"ruleId":"265","severity":1,"message":"266","line":20,"column":10,"nodeType":"267","messageId":"268","endLine":20,"endColumn":17},{"ruleId":"265","severity":1,"message":"269","line":20,"column":18,"nodeType":"267","messageId":"268","endLine":20,"endColumn":23},{"ruleId":"265","severity":1,"message":"270","line":40,"column":9,"nodeType":"267","messageId":"268","endLine":40,"endColumn":17},{"ruleId":"271","severity":1,"message":"272","line":55,"column":29,"nodeType":"273","messageId":"274","endLine":55,"endColumn":31},{"ruleId":"271","severity":1,"message":"272","line":55,"column":42,"nodeType":"273","messageId":"274","endLine":55,"endColumn":44},{"ruleId":"265","severity":1,"message":"275","line":19,"column":9,"nodeType":"267","messageId":"268","endLine":19,"endColumn":15},{"ruleId":"265","severity":1,"message":"266","line":28,"column":10,"nodeType":"267","messageId":"268","endLine":28,"endColumn":17},{"ruleId":"265","severity":1,"message":"269","line":28,"column":19,"nodeType":"267","messageId":"268","endLine":28,"endColumn":24},{"ruleId":"265","severity":1,"message":"276","line":33,"column":18,"nodeType":"267","messageId":"268","endLine":33,"endColumn":31},{"ruleId":"265","severity":1,"message":"277","line":33,"column":39,"nodeType":"267","messageId":"268","endLine":33,"endColumn":50},{"ruleId":"278","severity":1,"message":"279","line":60,"column":5,"nodeType":"280","endLine":60,"endColumn":15,"suggestions":"281"},{"ruleId":"282","severity":1,"message":"283","line":151,"column":42,"nodeType":"284","messageId":"285","endLine":151,"endColumn":43},{"ruleId":"282","severity":1,"message":"283","line":151,"column":46,"nodeType":"284","messageId":"285","endLine":151,"endColumn":47},{"ruleId":"265","severity":1,"message":"286","line":9,"column":8,"nodeType":"267","messageId":"268","endLine":9,"endColumn":21},{"ruleId":"265","severity":1,"message":"270","line":27,"column":9,"nodeType":"267","messageId":"268","endLine":27,"endColumn":17},{"ruleId":"278","severity":1,"message":"287","line":80,"column":4,"nodeType":"280","endLine":80,"endColumn":86,"suggestions":"288"},{"ruleId":"265","severity":1,"message":"289","line":5,"column":9,"nodeType":"267","messageId":"268","endLine":5,"endColumn":21},{"ruleId":"265","severity":1,"message":"290","line":16,"column":13,"nodeType":"267","messageId":"268","endLine":16,"endColumn":21},{"ruleId":"265","severity":1,"message":"291","line":28,"column":19,"nodeType":"267","messageId":"268","endLine":28,"endColumn":31},{"ruleId":"265","severity":1,"message":"292","line":29,"column":17,"nodeType":"267","messageId":"268","endLine":29,"endColumn":26},{"ruleId":"265","severity":1,"message":"293","line":42,"column":18,"nodeType":"267","messageId":"268","endLine":42,"endColumn":28},{"ruleId":"265","severity":1,"message":"294","line":141,"column":7,"nodeType":"267","messageId":"268","endLine":141,"endColumn":28},{"ruleId":"265","severity":1,"message":"295","line":4,"column":59,"nodeType":"267","messageId":"268","endLine":4,"endColumn":70},{"ruleId":"265","severity":1,"message":"266","line":19,"column":11,"nodeType":"267","messageId":"268","endLine":19,"endColumn":18},{"ruleId":"265","severity":1,"message":"296","line":19,"column":25,"nodeType":"267","messageId":"268","endLine":19,"endColumn":31},{"ruleId":"265","severity":1,"message":"297","line":25,"column":19,"nodeType":"267","messageId":"268","endLine":25,"endColumn":27},{"ruleId":"265","severity":1,"message":"298","line":28,"column":16,"nodeType":"267","messageId":"268","endLine":28,"endColumn":23},{"ruleId":"278","severity":1,"message":"299","line":96,"column":5,"nodeType":"280","endLine":96,"endColumn":89,"suggestions":"300"},{"ruleId":"265","severity":1,"message":"301","line":13,"column":9,"nodeType":"267","messageId":"268","endLine":13,"endColumn":36},{"ruleId":"265","severity":1,"message":"302","line":3,"column":9,"nodeType":"267","messageId":"268","endLine":3,"endColumn":13},{"ruleId":"265","severity":1,"message":"289","line":5,"column":9,"nodeType":"267","messageId":"268","endLine":5,"endColumn":21},{"ruleId":"265","severity":1,"message":"303","line":6,"column":28,"nodeType":"267","messageId":"268","endLine":6,"endColumn":32},{"ruleId":"265","severity":1,"message":"304","line":6,"column":45,"nodeType":"267","messageId":"268","endLine":6,"endColumn":50},{"ruleId":"265","severity":1,"message":"305","line":6,"column":58,"nodeType":"267","messageId":"268","endLine":6,"endColumn":71},{"ruleId":"265","severity":1,"message":"306","line":12,"column":9,"nodeType":"267","messageId":"268","endLine":12,"endColumn":24},{"ruleId":"265","severity":1,"message":"307","line":12,"column":25,"nodeType":"267","messageId":"268","endLine":12,"endColumn":44},{"ruleId":"265","severity":1,"message":"290","line":16,"column":13,"nodeType":"267","messageId":"268","endLine":16,"endColumn":21},{"ruleId":"265","severity":1,"message":"308","line":26,"column":25,"nodeType":"267","messageId":"268","endLine":26,"endColumn":42},{"ruleId":"265","severity":1,"message":"309","line":27,"column":19,"nodeType":"267","messageId":"268","endLine":27,"endColumn":31},{"ruleId":"265","severity":1,"message":"310","line":28,"column":9,"nodeType":"267","messageId":"268","endLine":28,"endColumn":18},{"ruleId":"265","severity":1,"message":"291","line":28,"column":19,"nodeType":"267","messageId":"268","endLine":28,"endColumn":31},{"ruleId":"265","severity":1,"message":"311","line":29,"column":9,"nodeType":"267","messageId":"268","endLine":29,"endColumn":15},{"ruleId":"265","severity":1,"message":"292","line":29,"column":17,"nodeType":"267","messageId":"268","endLine":29,"endColumn":26},{"ruleId":"265","severity":1,"message":"293","line":42,"column":18,"nodeType":"267","messageId":"268","endLine":42,"endColumn":28},{"ruleId":"265","severity":1,"message":"312","line":45,"column":18,"nodeType":"267","messageId":"268","endLine":45,"endColumn":37},{"ruleId":"265","severity":1,"message":"313","line":49,"column":20,"nodeType":"267","messageId":"268","endLine":49,"endColumn":33},{"ruleId":"265","severity":1,"message":"314","line":52,"column":18,"nodeType":"267","messageId":"268","endLine":52,"endColumn":32},{"ruleId":"265","severity":1,"message":"315","line":52,"column":42,"nodeType":"267","messageId":"268","endLine":52,"endColumn":56},{"ruleId":"265","severity":1,"message":"316","line":64,"column":8,"nodeType":"267","messageId":"268","endLine":64,"endColumn":20},{"ruleId":"265","severity":1,"message":"317","line":74,"column":8,"nodeType":"267","messageId":"268","endLine":74,"endColumn":18},{"ruleId":"265","severity":1,"message":"318","line":121,"column":14,"nodeType":"267","messageId":"268","endLine":121,"endColumn":29},{"ruleId":"265","severity":1,"message":"319","line":174,"column":7,"nodeType":"267","messageId":"268","endLine":174,"endColumn":21},{"ruleId":"265","severity":1,"message":"320","line":178,"column":7,"nodeType":"267","messageId":"268","endLine":178,"endColumn":20},"no-native-reassign",["321"],"no-negated-in-lhs",["322"],"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'redirect' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","'seller' is assigned a value but never used.","'loadingOrders' is assigned a value but never used.","'errorOrders' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["323"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'FormContainer' is defined but never used.","React Hook useEffect has a missing dependency: 'vendorName'. Either include it or remove the dependency array.",["324"],"'PayPalButton' is defined but never used.","'sdkReady' is assigned a value but never used.","'setHighlight' is assigned a value but never used.","'setColour' is assigned a value but never used.","'loadingPay' is assigned a value but never used.","'successPaymentHandler' is assigned a value but never used.","'FormControl' is defined but never used.","'error2' is assigned a value but never used.","'loading1' is assigned a value but never used.","'success' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["325"],"'ORDER_MERCHANT_CREDIT_RESET' is defined but never used.","'Link' is defined but never used.","'Form' is defined but never used.","'Image' is defined but never used.","'ListGroupItem' is defined but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.","'setCommittedValue' is assigned a value but never used.","'setProductId' is assigned a value but never used.","'highlight' is assigned a value but never used.","'colour' is assigned a value but never used.","'loadingInsufficient' is assigned a value but never used.","'loadingCredit' is assigned a value but never used.","'loadingDeliver' is assigned a value but never used.","'successDeliver' is assigned a value but never used.","'initialState' is assigned a value but never used.","'liveUpdate' is assigned a value but never used.","'addPayPalScript' is assigned a value but never used.","'deliverHandler' is assigned a value but never used.","'submitHandler' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},"Update the dependencies array to be: [dispatch, userInfo]",{"range":"332","text":"333"},"Update the dependencies array to be: [dispatch, history, userInfo, successDelete, successCreate, createdProduct, pageNumber, vendorName]",{"range":"334","text":"335"},"Update the dependencies array to be: [confirmedState, confirmedStates, userInfo, dispatch, cart, history]",{"range":"336","text":"337"},[2322,2332],"[dispatch, userInfo]",[2348,2430],"[dispatch, history, userInfo, successDelete, successCreate, createdProduct, pageNumber, vendorName]",[3475,3559],"[confirmedState, confirmedStates, userInfo, dispatch, cart, history]"]