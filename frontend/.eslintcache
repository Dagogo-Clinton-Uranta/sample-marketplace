[{"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/index.js":"1","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/Final.js":"2","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/store.js":"3","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/App.js":"4","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/cartReducers.js":"5","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/productReducers.js":"6","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/orderReducers.js":"7","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/userReducers.js":"8","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Footer.js":"9","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/PaymentScreen.js":"10","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/HomeScreen.js":"11","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/LoginScreen.js":"12","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ShippingScreen.js":"13","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/CartScreen.js":"14","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/AdminComScreen.js":"15","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/UserListScreen.js":"16","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProductScreen.js":"17","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/cartConstants.js":"18","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/productConstants.js":"19","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/UserConstants.js":"20","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/RegisterScreen.js":"21","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Header.js":"22","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProfileScreen.js":"23","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/OrderListScreen.js":"24","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/CommunicationScreen.js":"25","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/UserEditScreen.js":"26","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProductListScreen.js":"27","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProductEditScreen.js":"28","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/OrderScreen.js":"29","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/PlaceOrderScreen.js":"30","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/FormContainer.js":"31","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/CheckoutSteps.js":"32","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/orderConstants.js":"33","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Message.js":"34","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/cartActions.js":"35","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/productActions.js":"36","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/SearchBox.js":"37","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Paginate.js":"38","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Loader.js":"39","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/userActions.js":"40","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Meta.js":"41","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/orderActions.js":"42","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/productComponent.js":"43","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/ProductCarousel.js":"44","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Rating.js":"45","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/TransactionScreen.js":"46","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/TransactionListScreen.js":"47"},{"size":267,"mtime":1621882819327,"results":"48","hashOfConfig":"49"},{"size":297,"mtime":1621882819319,"results":"50","hashOfConfig":"49"},{"size":2859,"mtime":1631885967524,"results":"51","hashOfConfig":"49"},{"size":3190,"mtime":1631564742357,"results":"52","hashOfConfig":"49"},{"size":1206,"mtime":1621882819327,"results":"53","hashOfConfig":"49"},{"size":4291,"mtime":1621882819327,"results":"54","hashOfConfig":"49"},{"size":4875,"mtime":1631830004546,"results":"55","hashOfConfig":"49"},{"size":5797,"mtime":1631368707614,"results":"56","hashOfConfig":"49"},{"size":416,"mtime":1621882819323,"results":"57","hashOfConfig":"49"},{"size":1990,"mtime":1621882819327,"results":"58","hashOfConfig":"49"},{"size":2776,"mtime":1631896975968,"results":"59","hashOfConfig":"49"},{"size":2832,"mtime":1621882819327,"results":"60","hashOfConfig":"49"},{"size":2862,"mtime":1631899201758,"results":"61","hashOfConfig":"49"},{"size":3262,"mtime":1631898988005,"results":"62","hashOfConfig":"49"},{"size":5460,"mtime":1631898960514,"results":"63","hashOfConfig":"49"},{"size":3575,"mtime":1631899445097,"results":"64","hashOfConfig":"49"},{"size":7630,"mtime":1631899171427,"results":"65","hashOfConfig":"49"},{"size":234,"mtime":1621882819323,"results":"66","hashOfConfig":"49"},{"size":1789,"mtime":1621882819323,"results":"67","hashOfConfig":"49"},{"size":2288,"mtime":1631367328827,"results":"68","hashOfConfig":"49"},{"size":8904,"mtime":1621882819327,"results":"69","hashOfConfig":"49"},{"size":7063,"mtime":1631525431340,"results":"70","hashOfConfig":"49"},{"size":8348,"mtime":1631472487181,"results":"71","hashOfConfig":"49"},{"size":9057,"mtime":1631899019697,"results":"72","hashOfConfig":"49"},{"size":3729,"mtime":1631105467770,"results":"73","hashOfConfig":"49"},{"size":4106,"mtime":1631899588632,"results":"74","hashOfConfig":"49"},{"size":5249,"mtime":1631899141035,"results":"75","hashOfConfig":"49"},{"size":7389,"mtime":1631899126843,"results":"76","hashOfConfig":"49"},{"size":19982,"mtime":1631899058612,"results":"77","hashOfConfig":"49"},{"size":13762,"mtime":1631899093436,"results":"78","hashOfConfig":"49"},{"size":451,"mtime":1621882819323,"results":"79","hashOfConfig":"49"},{"size":1460,"mtime":1621882819323,"results":"80","hashOfConfig":"49"},{"size":2163,"mtime":1631830263471,"results":"81","hashOfConfig":"49"},{"size":273,"mtime":1621882819323,"results":"82","hashOfConfig":"49"},{"size":1624,"mtime":1621882819319,"results":"83","hashOfConfig":"49"},{"size":7811,"mtime":1631105467770,"results":"84","hashOfConfig":"49"},{"size":815,"mtime":1621882819323,"results":"85","hashOfConfig":"49"},{"size":609,"mtime":1621882819323,"results":"86","hashOfConfig":"49"},{"size":330,"mtime":1621882819323,"results":"87","hashOfConfig":"49"},{"size":11199,"mtime":1631469274881,"results":"88","hashOfConfig":"49"},{"size":516,"mtime":1621882819323,"results":"89","hashOfConfig":"49"},{"size":12072,"mtime":1631830471227,"results":"90","hashOfConfig":"49"},{"size":1006,"mtime":1631105467770,"results":"91","hashOfConfig":"49"},{"size":1280,"mtime":1631105467770,"results":"92","hashOfConfig":"49"},{"size":1779,"mtime":1621882819323,"results":"93","hashOfConfig":"49"},{"size":14518,"mtime":1631891753788,"results":"94","hashOfConfig":"49"},{"size":8409,"mtime":1631899463761,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"1o45bix",{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"98"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"98"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"98"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"98"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"98"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"98"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/index.js",[],["197","198"],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/Final.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/store.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/App.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/cartReducers.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/productReducers.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/orderReducers.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/reducers/userReducers.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Footer.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/PaymentScreen.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/HomeScreen.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/LoginScreen.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ShippingScreen.js",["199","200"],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/CartScreen.js",["201","202"],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/AdminComScreen.js",["203","204","205"],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/UserListScreen.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProductScreen.js",["206"],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/cartConstants.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/productConstants.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/UserConstants.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/RegisterScreen.js",["207","208"],"import React, {useState ,useEffect} from 'react'\nimport {Link} from 'react-router-dom'\nimport {Form, Button, Row, Col, ListGroup} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\nimport Loader from '../components/Message.js'\nimport {register} from '../actions/userActions.js'\nimport FormContainer from '../components/FormContainer.js'\n\n\n\n\n\nconst RegisterScreen = ({location, history}) => { //he is taking location & history out of the props, normally it is props.location\n  const [name,setName] = useState('')\n  const [email,setEmail] = useState('')  //component level state right here, not application level state\n  const [password,setPassword] = useState('')\n  const [confirmPassword,setConfirmPassword] = useState('')\n  const [isMerchant,setIsMerchant] = useState(false)\n  const [pickupAddress, setPickupAddress] =useState('')\n  const [momFirstName,setMomFirstName] = useState('is a merchant')\n  const [shoeSize,setShoeSize] = useState('is a merchant')\n  const [closestFriend,setClosestFriend] = useState('is a merchant')\n  const [childhoodStreet,setChildhoodStreet] = useState('is a merchant')\n  const [firstEmployment,setFirstEmployment] = useState('is a merchant')\n  const [message,setMessage] = useState(null)\n  const dispatch = useDispatch() //dont forget that real dispatches only take place in action creators, you are only calling useDispatch here\n  const userRegister = useSelector(state => state.userRegister);\n  const {loading, error,userInfo } = userRegister\n     console.log(isMerchant)\n  const redirect = location.search ? location.search.split('=')[1]:'/'\n//location .search has the url query string, study it a bit\n\n//because we dont want to able to come into the login screen ONCE WE ARE ALREADY LOGGED IN, effect this in the useEffect below\n\n  useEffect( () => {\n    if(userInfo){ //cuz user info exists only when you're logged in\n       history.push(redirect)\n    }\n\n    if(password !=='' && (password === confirmPassword)){\n      setMessage(null)\n    }\n\n    if(isMerchant===false){\n       setPickupAddress('') \n   setMomFirstName('is a merchant') \n   setShoeSize('is a merchant') \n   setClosestFriend('is a merchant') \n   setChildhoodStreet('is a merchant') \n   setFirstEmployment('is a merchant') \n    }\n\n\n    if(name!==''||email!==''||isMerchant && pickupAddress!==''||momFirstName!==''||shoeSize!==''||closestFriend!==''||childhoodStreet!==''||firstEmployment!==''){setMessage(null)}\n    \n  },[redirect,history,userInfo,password,confirmPassword,name,email,pickupAddress,momFirstName,shoeSize,closestFriend,childhoodStreet,firstEmployment,isMerchant])\n\n\n\n  const submitHandler = (e) => {\n          e.preventDefault()\n       if(password !== confirmPassword){\n         setMessage('Passwords do not Match')\n      }else if(name === ''||email===''){\n        setMessage('Please Make sure to fill in all entries!')\n      }\n      else if(isMerchant && pickupAddress===''){\n        setMessage('Please Make sure to fill in all entries!')\n      }\n       else if( !isMerchant && (momFirstName ==='is a merchant' || shoeSize ==='is a merchant'  || closestFriend==='is a merchant' || childhoodStreet==='is a merchant'  || firstEmployment==='is a merchant')){\n        setMessage('Please Make sure to fill in all entries!')\n       }\n       else{\n         //this is where we want to to call our action to dispatch login\n       dispatch(register(name,email,password, momFirstName,shoeSize,closestFriend,childhoodStreet,firstEmployment, pickupAddress,isMerchant)) /* follow the trail of this register dispatch to see where it leads  */\n       }\n\n  }\n\n    return (\n       <FormContainer>\n        <h1>Sign up</h1>\n        \n        {loading && <Loader/>}\n        <Form onSubmit={submitHandler}>\n  {/*1*/}      <Form.Group controlId='name'>\n\n         <Form.Label>  Name</Form.Label>\n         <Form.Control type='name' placeholder=\"enter name\" value={name} onChange={(e)=>setName(e.target.value)}></Form.Control>\n          {/*the value of form control is form control from the state.  need to read about form group from react bootstrap*/}\n        </Form.Group>\n\n  {/*2*/}        <Form.Group controlId='email'>\n\n          <Form.Label>  Email Address </Form.Label>\n          <Form.Control type='email' placeholder=\"enter email\" value={email} onChange={(e)=>setEmail(e.target.value)}></Form.Control>\n           {/*the value of form control is form control from the state. need to read about form group from react bootstrap*/}\n         </Form.Group>\n\n         <fieldset>\n         {/*3*/}        <Form.Group controlId='usertype'>\n\n         <Form.Label>  Are you a customer or a merchant? </Form.Label>\n          <div className=\"mb-3\"></div>\n         <Form.Check inline type='radio' name='radiosInline' id='radiosInline1' label=\"Customer\" onChange={(e)=>setIsMerchant(false)}/>\n          <Form.Check inline type='radio' name='radiosInline' id='radiosInline2' label=\"Merchant\" onChange={(e)=>setIsMerchant(true)}/>\n           \n         </Form.Group>\n         </fieldset>\n\n           {/*4*/ isMerchant &&  \n           \n              <ListGroup>\n              <ListGroup.Item>\n                \n           <Form.Group controlId='pickup-address'>\n\n          <Form.Label> What is your address (for pickup of goods)? </Form.Label>\n          <Form.Control type='input' placeholder=\"enter pickup location\" value={pickupAddress} onChange={(e)=>setPickupAddress(e.target.value)}></Form.Control>\n           \n         </Form.Group> \n          </ListGroup.Item>\n          </ListGroup>}\n\n\n  {/*5*/}      <Form.Group controlId='password'>\n\n          <Form.Label>  Password  </Form.Label>\n          <Form.Control type='password' placeholder=\"enter password\" value={password} onChange={(e)=>setPassword(e.target.value)}></Form.Control>\n\n         </Form.Group>\n\n {/*5*/}      <Form.Group controlId='confirmPassword'>\n\n                 <Form.Label>  Confirm password  </Form.Label>\n                 <Form.Control type='password' placeholder=\"confirm password\" value={confirmPassword} onChange={(e)=>setConfirmPassword(e.target.value)}></Form.Control>\n\n                </Form.Group>\n\n             \n             <br/>\n             <br/>\n             {(  password !=='' && (password === confirmPassword)) && <Message variant='success'>Passwords are a match! {!isMerchant && 'please fill in the section below'}.</Message> } \n             {message && <Message variant='danger'>{message}</Message>}\n            {error && <Message variant='danger'>{error}</Message>}\n              \n             {( !isMerchant && password !=='' && (password === confirmPassword)) && \n            <> <h1>Personal Identifier Questions</h1>\n               <p>We use this data to confirm it's you, upon purchase</p>\n            </>}\n       \n             <br/>\n             <br/>\n\n            { (!isMerchant && password !=='' && (password === confirmPassword)) && \n             \n            <>\n          <ListGroup>\n            <ListGroup.Item className=\"my-3\">\n\n          <Form.Group controlId='momFirstName'>\n        \n         <Form.Label> What is your mother's first name ?   </Form.Label>\n          <Form.Control type='input'  /*value={momFirstName}*/ onChange={(e)=>setMomFirstName(e.target.value)}></Form.Control>\n\n         </Form.Group>\n\n         <Form.Group controlId='shoeSize'>\n        \n        <Form.Label> What is your shoe size?   </Form.Label>\n        <Form.Control type='input'  /*value={shoeSize}*/ onChange={(e)=>setShoeSize(e.target.value)}></Form.Control>\n\n        </Form.Group>\n\n        <Form.Group controlId='closestFriend'>\n        \n        <Form.Label> What is the name of your closest friend ?   </Form.Label>\n        <Form.Control type='input' /*value={closestFriend}*/ onChange={(e)=>setClosestFriend(e.target.value)}></Form.Control>\n\n        </Form.Group>\n\n        <Form.Group controlId='childhoodStreet'>\n        \n       <Form.Label> What is the name of the street you lived on as a child ?   </Form.Label>\n        <Form.Control type='input' placeholder=\"please make sure to spell your answers correctly\" /*value={childhoodStreet}*/ onChange={(e)=>setChildhoodStreet(e.target.value)}></Form.Control>\n\n        </Form.Group>\n\n\n        <Form.Group controlId='firstEmployment'>\n        \n         <Form.Label> What is the name of the first place you worked at (employment) ?   </Form.Label>\n        <Form.Control type='input' /*value={firstEmployment}*/ onChange={(e)=>setFirstEmployment(e.target.value)}></Form.Control>\n\n        </Form.Group>\n\n        </ListGroup.Item>\n          </ListGroup>\n        </>\n       }\n        <br/>\n          <Button type='submit' variant='primary'>Register</Button>\n        </Form>\n\n        <Row className='py-3'>\n         <Col>\n           Have an account?<Link to={/*redirect?`$login/redirect=${redirect}`:*/'/login'}> Login</Link>\n         </Col>\n        </Row>\n\n       </FormContainer>\n\n    )\n\n}\n\nexport default RegisterScreen\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Header.js",["209","210","211","212","213","214","215","216"],"import React from 'react'\nimport {Route} from 'react-router-dom'\nimport  {useState,useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {LinkContainer} from 'react-router-bootstrap'\nimport {Container,Nav,Navbar,NavDropdown} from 'react-bootstrap'\nimport {logout,listUsers} from '../actions/userActions.js'\nimport {listOrders} from '../actions/orderActions.js'\nimport SearchBox from './SearchBox.js'\nimport bridgeway from './bridgeway-logo.jpg' \n\n\n\n  \n\nconst Header = () => {\n   \n  \n  const seller = '(Merchant)'\n  const dispatch = useDispatch()\n  const [cartVisibility, setCartVisibility] = useState(true)\n\n  const userLogin = useSelector(state => state.userLogin)\n  const {userInfo} = userLogin\n   /*console.log(userInfo)*/\n\n  const userList = useSelector(state => state.userList);\n  const {loading, error,users } = userList\n  const newMessages =users && users.some((user)=>{return user.adminMessageNotification ===true})?true:false\n  const numberOfMessages = users? users.filter((user)=>{return user.adminMessageNotification ===true}).length:''\n\n  const orderList = useSelector(state => state.orderList);\n  const {loading:loadingOrders, error:errorOrders,orders } = orderList\n \n  const newOrders =orders && orders.some((order)=>{return order.isDelivered ===false})?true:false\n  const numberOfOrders = orders? orders.filter((order)=>{return order.isDelivered ===false}).length:''\n  const newVendorOrders = orders?orders.filter((order)=>(order.orderItems.filter((item) => (item.vendor === userInfo.name)).some((item) => (item.promisedQty === 0)))):false\n  /*const numberOfVendorOrders = *//*USE MONGO DB to laser return all promised quantities of zero of a particular vendor from the order items of ALL orders  AND STOP STRESSING */\n\n  /*console.log(numberOfVendorOrders)*/\n\n  /*if(orders && userInfo){\n    userInfo.newOrders = orders.map(function(order){order.orderItems}).every(function(item){item.promisedQty===0})===true?true:false\n  }*/\n  \n  useEffect(() => {if(userInfo && (userInfo.isMerchant||userInfo.isAdmin)){\n     setCartVisibility(false)}\n     else{setCartVisibility(true)}\n\n     if(userInfo && userInfo.isAdmin ){\n      dispatch(listUsers())\n      }\n\n      if(userInfo && (userInfo.isAdmin || userInfo.isMerchant) ){\n        dispatch(listOrders())\n        }\n      \n      \n\n  },[userInfo])\n  \n\n\n /*useEffect(() =>{\n   if(users && userInfo && userInfo.isAdmin){\n userInfo.newMessages = users.some((user)=>{return user.adminMessageNotification ===true})\n userInfo.numberOfMessages =  users.filter((user)=>{return user.adminMessageNotification ===true}).length\n}\n\n },[users])*/\n\n\n  const logoutHandler = () => {\n    \n    dispatch(logout())\n    window.location.assign('/')\n     \n    \n  }\n  \n    return(\n<header>\n\n <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\n  <Container>\n  <LinkContainer to=\"/\">\n  {/*why cant we wrap this in a link tag?*/}\n  <Navbar.Brand ><img src={bridgeway} alt={'the logo of bridgeway bank'} /></Navbar.Brand>\n  </LinkContainer>\n\n  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n  <Navbar.Collapse id=\"basic-navbar-nav\">\n  <Route render ={({history})=> <SearchBox history={history}/>} /> {/*THERE IS A VERY IMPORTANT THING TO LEARN HERE, IF YOU PUT IN A COMPONONENT DIRECTLY IN THE NAVBAR, IT HAS NO ACCESS TO PROPS, SO YOU GOTTA PUT IT IN A ROUTE AND THEN USE THE RENDER FUNCTION TO PASS IN PROPS..YOU GOTTA STUDY THIS*/}\n   <Nav className=\"ml-auto\">\n\n    {/*DONT FORGET TO USE THE CDN OF FONT-AWESOME IN INDEX.HTML\n    FROM CDN JS.COM ,JUST TYPE FONT AWESOME AND COPY IT*/}\n{cartVisibility &&\n<LinkContainer to='/cart'>\n     <Nav.Link ><i className='fas fa-shopping-cart'></i>Cart\n     {userInfo && userInfo.userMessageNotification && <i className='fas fa-circle' style={{color:'red', fontSize:'8px', marginLeft:'15px' , marginRight:'-12px'}}></i>}\n     </Nav.Link>\n     \n</LinkContainer> }\n\n   {userInfo?(\n     <>\n     <span>{userInfo && userInfo.isMerchant && userInfo.userMessageNotification && <i className='fas fa-circle' style={{color:'red', fontSize:'8px', marginLeft:'15px' , marginRight:'-1px', marginTop:'14px'}}></i>}</span>\n     <NavDropdown title ={userInfo.name + `${(userInfo && userInfo.userMessageNotification)? ' (1)':''}`} id='username'>\n     <LinkContainer to='/profile'>\n          <NavDropdown.Item >Profile { userInfo && userInfo.userMessageNotification &&<i className='fas fa-circle' style={{color:'red', fontSize:'7px'}}></i>} </NavDropdown.Item>\n          \n     </LinkContainer>\n\n       <NavDropdown.Item onClick={logoutHandler} >Logout </NavDropdown.Item>\n     </NavDropdown>\n     </>\n   ):(\n     <LinkContainer to='/login'>\n          <Nav.Link><i className='fas fa-user'></i>Sign In</Nav.Link>\n     </LinkContainer>\n     \n   )\n    \n   }\n\n\n{userInfo && userInfo.isMerchant && (\n  <>\n    <span>{(userInfo && userInfo.isMerchant && (newVendorOrders)) && <i className='fas fa-circle' style={{color:'red', fontSize:'8px', marginLeft:'15px' , marginRight:'-1px', marginTop:'14px'}}></i>}</span>\n    <NavDropdown title ={'Merchant Functions'} id='username'>\n\n{/*i need to make a merchant token, so that merchants have access to a productlist distinct of admins*/}\n{/*1*/}      <LinkContainer to='/admin/productlist'>\n            <NavDropdown.Item >Products</NavDropdown.Item>\n           </LinkContainer> \n\n{/*2*/}      <LinkContainer to='/admin/orderlist'>\n            <NavDropdown.Item >Orders { (userInfo && userInfo.isMerchant && newVendorOrders) && <i className='fas fa-circle' style={{color:'red', fontSize:'7px'}}></i>} </NavDropdown.Item>\n           </LinkContainer>\n\n     </NavDropdown>\n     </>\n   )}\n\n\n   {userInfo && userInfo.isAdmin && (\n     <>\n     {/*the code below is too long, try and refactor it*/} \n  <span>{(userInfo && userInfo.isAdmin && (newMessages||newOrders)) && <i className='fas fa-circle' style={{color:'red', fontSize:'8px', marginLeft:'15px' , marginRight:'-1px', marginTop:'14px'}}></i>}</span>\n  <NavDropdown title ={'Admin Functions' +' '+ `${numberOfMessages + numberOfOrders > 0 ? `(${numberOfMessages + numberOfOrders})`:''}`} id='username'>\n\n{/*1*/}     <LinkContainer to='/admin/userlist'>\n            <NavDropdown.Item >Users { (userInfo && userInfo.isAdmin && numberOfMessages > 0) && `(${numberOfMessages})`} </NavDropdown.Item>\n          </LinkContainer>\n\n{/*2*/}      <LinkContainer to='/admin/productlist'>\n            <NavDropdown.Item >Products</NavDropdown.Item> \n           </LinkContainer>\n\n{/*3*/}      <LinkContainer to='/admin/orderlist'>\n            <NavDropdown.Item >Orders{ (userInfo && userInfo.isAdmin && numberOfOrders > 0) && `(${numberOfOrders})`} </NavDropdown.Item>\n           </LinkContainer>\n\n     </NavDropdown>\n     </> \n   )}\n\n{/*console.log(users.some(function(user){user.userMessageNotification}))*/}\n\n{/*console.log(orders.map(function(order){order.orderItems}).every(function(item){item.qty>0} ))*/}\n\n   </Nav>\n\n  </Navbar.Collapse>\n  </Container>\n </Navbar>\n\n</header>\n    )\n}\n\nexport default Header\n/*export as default means that , that's the only thing coming out of this file*/\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProfileScreen.js",["217"],"import React, {useState ,useEffect} from 'react'\nimport {LinkContainer} from 'react-router-bootstrap'\nimport {Table,Form, Button, Row, Col, ListGroup} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\nimport Loader from '../components/Message.js'\nimport {getUserDetails, updateUserProfile,updateUserNotes} from '../actions/userActions.js'\nimport {listMyOrders} from '../actions/orderActions.js'\nimport FormContainer from '../components/FormContainer.js'\n\n\n\n\n\nconst ProfileScreen = ({location, history}) => { //he is taking location & history out of the props, normally it is props.location\n  const [name,setName] = useState('')\n  const [email,setEmail] = useState('')  //component level state right here, not application level state\n  const [password,setPassword] = useState('')\n  const [confirmPassword,setConfirmPassword] = useState('')\n  const [notes,setNotes] =useState('')\n  const [message,setMessage] = useState(null)\n  \n  const dispatch = useDispatch() //dont forget that real dispatches only take place in action creators, you are only calling useDispatch here\n\n  const userDetails = useSelector((state) => state.userDetails);\n  const {loading, error,user} = userDetails\n   \n  \n  \n   const userLogin = useSelector((state) => state.userLogin);\n  const {userInfo} = userLogin\n\n  const userProfileUpdate = useSelector((state) => state.userProfileUpdate);\n  const {success} = userProfileUpdate\n\n\n  const userNotesUpdate = useSelector((state) => state.userNotesUpdate);\n  const {success:successNotes} = userNotesUpdate\n \n  const orderListMy  = useSelector((state) => state.orderListMy);\n  const {loading: loadingOrders,error: errorOrders, orders} = orderListMy\n//location .search has the url query string, study it a bit\n\n//because we dont want to able to come into the login screen ONCE WE ARE ALREADY LOGGED IN, effect this in the useEffect below\nconsole.log(user)\n\n\n\n\n\n  useEffect( () => {\n    if(!userInfo){ //cuz user info exists only when you're logged in\n       history.push('/login')\n    }else{\n      if(!user.name){ /*i changed user.name to userInfo.name,to test */\n        dispatch(getUserDetails('profile')/*profile serves as the ID here, so that in the get userDetails route, it hits  /api/users/profile route, and not an actual id*/)\n          dispatch(listMyOrders())\n      }else{\n     setName(user.name)\n     setEmail(user.email)\n     setNotes(user.notes)\n     \n      }\n      \n    }\n\n  },[dispatch,history,userInfo ,user])\n\n\n\n  const submitHandler = (e) => {\n          e.preventDefault()\n       if(password !== confirmPassword){\n         setMessage('Passwords do not Match')\n       }else{\n         //this is where we want to to call our action to dispatch login\n         \n         dispatch(updateUserProfile({id: user._id, name,email, password}))\n       }\n\n  }\n\n\n  const noteSubmitHandler = (e) => {\n    e.preventDefault()\n \n    dispatch(updateUserNotes({id:userInfo._id,notes}))\n\n}\n\n\n    return (\n      <>\n      <br/>\n      <hr/>\n      <br/>\n      \n     <center><p style={{color:'black', maxWidth:'600px', fontSize:'1.3rem' }}>Welcome to your profile! Here you may update your username and password.\n     { !userInfo.isAdmin && ' You may also send and reply to messages.'} \n     { (userInfo.isAdmin || userInfo.isMerchant) && ' You can write notes which you\\'ll refer to later, for your operation on this platform.'}\n     </p></center>\n     \n\n      <br/>\n      <hr/>\n      <br/>\n      <br/>\n     <Row>\n       \n      <Col md={3}>\n      <h2>User Profile</h2>\n      <Form onSubmit={submitHandler}>\n{/*1*/}      <Form.Group controlId='name'>\n\n       <Form.Label>  Name</Form.Label>\n       <Form.Control type='name' placeholder=\"enter name\" value={name} onChange={(e)=>setName(e.target.value)}></Form.Control>\n       {/*the value of form control is form control from the state. You need to read about form group from react bootstrap*/}\n      </Form.Group>\n\n{/*2*/}       <Form.Group controlId='email'>\n\n        <Form.Label>  Email Address </Form.Label>\n        <Form.Control type='email' placeholder=\"enter email\" value={email} onChange={(e)=>setEmail(e.target.value)}></Form.Control>\n        {/*the value of form control is form control from the state. You need to read about form group from react bootstrap*/}\n       </Form.Group>\n\n{/*3*/}      <Form.Group controlId='password'>\n\n        <Form.Label>  Password  </Form.Label>\n        <Form.Control type='password' placeholder=\"enter password\" value={password} onChange={(e)=>setPassword(e.target.value)}></Form.Control>\n\n       </Form.Group>\n\n{/*4*/}     <Form.Group controlId='confirmPassword'>\n\n               <Form.Label>  Confirm password  </Form.Label>\n               <Form.Control type='password' placeholder=\"confirm password\" value={confirmPassword} onChange={(e)=>setConfirmPassword(e.target.value)}></Form.Control>\n\n              </Form.Group>\n\n        <Button type='submit' variant='primary'> Update </Button>\n      </Form>\n       \n       \n       <br/>\n       <br/>\n       <br/>\n\n       <ListGroup variant='flush'>\n         <ListGroup.Item>\n       { !userInfo.isAdmin && userInfo.adminMessage? (\n       <>\n       <Row style={{color:'red'}}>\n        <i className='fas fa-circle' style={{color:'red', fontSize:'9px', padding:'4px'}}></i> \n         New message! \n       </Row>\n       <Row>\n          (click chat to view)\n       </Row>\n       </>\n       ):(!userInfo.isAdmin && <Row>\n        Want to make an enquiry/complaint ? click chat below\n        </Row>)}\n        </ListGroup.Item>\n        \n        <br/>\n        {!userInfo.isAdmin && <ListGroup.Item >\n        <Row>\n      <LinkContainer to='/communications'>\n      <Button type='submit' variant='primary'> Chat </Button>\n      </LinkContainer>\n        </Row>\n        </ListGroup.Item>\n        }\n        </ListGroup>\n\n      </Col>\n\n      <Col md={9}>\n      <h2>{!userInfo.isAdmin && !userInfo.isMerchant ? 'My Orders':''}</h2>\n      {loadingOrders ? <Loader/>:errorOrders? <Message variant='danger'>{errorOrders}</Message>:(\n        \n        !(userInfo.isAdmin || userInfo.isMerchant) ?\n        <Table striped bordered hover responsive className='table-sm'>\n         <thead>\n          <tr>\n           <th>ID</th>\n           <th>DATE</th>\n           <th>TOTAL(₦)</th>\n           <th>PAID</th>\n           <th>DELIVERED</th>\n           <th></th>\n          </tr>\n         </thead>\n         <tbody>\n          {orders.map(order =>(\n            <tr key={order._id}>\n             <td>{order._id}</td>\n             <td>{order.createdAt.substring(0,10)}</td>\n             <td>{order.totalPrice}</td>\n             <td>{order.isPaid ? order.paidAt.substring(0,10):(<i className='fas fa-times'style={{color:'red'}}></i>)} </td>\n\n             <td>{order.isDelivered ? order.deliveredAt.substring(0,10):(<i className='fas fa-times'style={{color:'red'}}></i>)} </td>\n                 \n             <td>\n             <LinkContainer to={`/order/${order._id}`}>\n              <Button variant='light' className='btn-sm'> Details </Button>\n             </LinkContainer>\n            </td>\n            </tr>\n          ))}\n         </tbody>\n        </Table>\n        \n      :(\n      <>\n      \n        <h1> My Notes </h1>\n       <p> {error && <Message variant='danger'>{error}</Message>}\n        {loading && <Loader/>}\n        </p>\n\n        \n         <Form onSubmit={noteSubmitHandler}>\n        \n\n\n          <Form.Group controlId='reply-message'>\n\n          <Form.Label>  Update your notes below: </Form.Label>\n          <Form.Control as =\"textarea\" rows={12}  value={notes} placeholder='type message here...' onChange={(e)=>{setNotes(e.target.value)}}></Form.Control>\n\n         </Form.Group>\n\n         \n         <Button type='submit'  /*onClick={noteSubmitHandler}*/ variant='primary'>Save Notes</Button>\n         \n\n        </Form>\n       \n        \n        \n      </> \n       \n       ))}\n\n      </Col>\n      </Row>\n        {/*<h1>User Profile</h1>*/}\n        {message && <Message variant='danger'>{message}</Message>}\n        {error && <Message variant='danger'>{error}</Message>}\n        {success && <Message variant='success'>Profile Updated! changes will be reflected on your next login</Message>}\n        {successNotes && <Message variant='success'>Notes Updated!</Message>}\n        {loading && <Loader/>}\n       \n        </>\n    )\n\n}\n\nexport default ProfileScreen\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/OrderListScreen.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/CommunicationScreen.js",["218"],"import React, {useState ,useEffect} from 'react'\n/*import {Link} from 'react-router-dom'*/\nimport {Form, Button, Row, Col} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\nimport Loader from '../components/Message.js'\nimport {clientSaid} from '../actions/userActions.js'\n/*import {bossSaid} from '../actions/userActions.js'*/\nimport FormContainer from '../components/FormContainer.js'\n\n\n\n\n\nconst CommunicationScreen = ({location, history}) => { //he is taking location & history out of the props, normally it is props.location\n  \n  const orderId = location.search ? location.search.split('=')[1] : false\n\n  const [clientMessage,setClientMessage] = useState(orderId ?`Good day Admin, I am writing to tell you about order number ${orderId} `:'')  //component level state right here, not application level state\n  \n  const dispatch = useDispatch() //dont forget that real dispatches only take place in action creators, you are only calling useDispatch here\n  const userLogin = useSelector(state => state.userLogin);\n  const {loading, error,userInfo } = userLogin\n  \n  const clientId = userInfo._id /*at least i think it's this -youre right, it is this */\n  const clientName = userInfo.name\n  const redirect = location.search ? location.search.split('=')[1]:'/'\n//location .search has the url query string, study it a bit\n\n\n  useEffect(()=>{  \n    if(!userInfo){\n    history.push(`/login`)\n    }\n  })\n\n\n  useEffect( () => {\n    /*if(userInfo){ \n       history.push(redirect)\n    } I WANT TO PUT IN THE CUSTOMER SERVICE MESSAGE HERE,SO IT CAN REFRESH UPON CUSTOMER SENDING A MESSAGE*/\n     \n  },[/*redirect,history,userInfo*/])\n\n\n\n  const submitHandler = (e) => {\n          e.preventDefault()\n          //this is where we want to to call our action to dispatch login\n          setClientMessage('')\n          window.alert('Message Sent!')\n        //dispatch(/*login(email,password)*/)\n         dispatch(clientSaid(clientMessage, clientId ,clientName))\n  }\n\n  const previousPageHandler = () => {\n  \n    window.history.back()\n  }\n\n    return (\n      <>\n      <Button className='btn btn-primary my-3' onClick={previousPageHandler}>GO BACK</Button>\n       <FormContainer>\n        <h1>Send A Message ...</h1>\n        {error && <Message variant='danger'>{error}</Message>}\n        {loading && <Loader/>}\n        \n         <Form onSubmit={submitHandler}>\n\n         <Form.Group controlId='reply-message'>\n\n          <Form.Label> Customer Service: </Form.Label>\n          <Form.Control as =\"textarea\" rows={6} plaintext readOnly value={userInfo.adminMessage} defaultValue={`Good day ${userInfo.name},how may we help you?`}></Form.Control>\n\n         </Form.Group>\n         \n        \n\n          <Form.Group controlId='reply-message'>\n\n          <Form.Label>  Send Your Message Below: </Form.Label>\n          <Form.Control as =\"textarea\" rows={6} placeholder='type message here' value={clientMessage} onChange={(e)=>{setClientMessage(e.target.value)}}></Form.Control>\n\n         </Form.Group>\n\n         \n         <Button type='submit' variant='primary'>Send</Button>\n         \n\n        </Form>\n       \n        \n        <br/>\n        <br/>\n        <Row className='py-3'>\n         <Col>                       \n           Want to communicate in another way? send us a message at: <a href={`mailto:customerservice@bridgeway.com?subject=Correspondence from `}> customerservice@bridgeway.com  </a>\n         </Col>  \n                      \n        </Row>  \n   \n        <Row>\n         <Col>\n         Alternatively, call us at: <strong> 08183763331</strong>  \n         </Col>  \n        </Row>          \n\n       </FormContainer>\n      </>\n    )\n\n}\n\nexport default CommunicationScreen\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/UserEditScreen.js",["219"],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProductListScreen.js",["220"],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/ProductEditScreen.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/OrderScreen.js",["221","222","223","224","225","226"],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/PlaceOrderScreen.js",["227","228","229","230","231","232"],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/FormContainer.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/CheckoutSteps.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/constants/orderConstants.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Message.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/cartActions.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/productActions.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/SearchBox.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Paginate.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Loader.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/userActions.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Meta.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/actions/orderActions.js",["233"],"import {ORDER_CREATE_REQUEST,\n        ORDER_CREATE_SUCCESS,\n        ORDER_CREATE_FAILURE,\n        ORDER_DETAILS_REQUEST,\n        ORDER_DETAILS_SUCCESS,\n        ORDER_DETAILS_FAILURE,\n        ORDER_PAY_REQUEST,\n        ORDER_PAY_SUCCESS,\n        ORDER_PAY_FAILURE,\n        ORDER_MERCHANT_CREDIT_REQUEST,\n        ORDER_MERCHANT_CREDIT_SUCCESS,\n        ORDER_MERCHANT_CREDIT_FAILURE,\n        ORDER_MERCHANT_CREDIT_RESET,\n        ORDER_INSUFFICIENT_REQUEST,  \n        ORDER_INSUFFICIENT_SUCCESS,\n        ORDER_INSUFFICIENT_FAILURE,\n        ORDER_APPROVE_REQUEST,\n        ORDER_APPROVE_SUCCESS,\n        ORDER_APPROVE_FAILURE,\n        //ORDER_PAY_RESET,\n        ORDER_LIST_MY_REQUEST,\n        ORDER_LIST_MY_SUCCESS,\n        ORDER_LIST_MY_FAILURE,\n        ORDER_LIST_REQUEST,\n        ORDER_LIST_SUCCESS,\n        ORDER_LIST_FAILURE,\n        UNPAID_ORDER_LIST_REQUEST,\n        UNPAID_ORDER_LIST_SUCCESS,\n        UNPAID_ORDER_LIST_FAILURE,\n        ORDER_DELIVER_REQUEST,\n        ORDER_DELIVER_SUCCESS,\n        ORDER_DELIVER_FAILURE\n        //ORDER_DELIVER_RESET,\n       } from '../constants/orderConstants'\nimport axios from 'axios'\n                              /*the entire order object*/\nexport const createOrder  = (order) => async (dispatch,getState)=> {\n   //redux thunk was used just now in the form of async (dispatch) above\n  try {\n    dispatch({type: ORDER_CREATE_REQUEST})\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    const config = {\n      headers:{\n        'Content-Type':'application/json',\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }\n    const {data} = await axios.post(`/api/orders`,order,config)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: ORDER_CREATE_SUCCESS,\n              payload:data })\n\n  }\n   catch(error){\n     dispatch({type:ORDER_CREATE_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\nexport const getOrderDetails  = (id) => async (dispatch,getState)=> {\n//form of async (dispatch) above\n  try {\n    dispatch({type: ORDER_DETAILS_REQUEST})\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send the headers a content type of application/json\n    const config = {\n      headers:{\n        //'Content-Type':'application/json' |you dont really need content type in GET requests for some reason\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }\n    const {data} = await axios.get(`/api/orders/${id}`,config)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: ORDER_DETAILS_SUCCESS,\n              payload:data /*this data variable is file specific*/\n\n    })\n\n  }\n   catch(error){\n     dispatch({type:ORDER_DETAILS_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\n\nexport const payOrder  = (orderId) => async (dispatch,getState) =>{\n//form of async (dispatch) above\n  try {\n    dispatch({type: ORDER_PAY_REQUEST})\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    const config = {\n      headers:{\n        'Content-Type':'application/json',\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }\n    const {data} = await axios.put(`/api/orders/${orderId}/pay`,{},config)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: ORDER_PAY_SUCCESS,\n              payload:data\n            })/*this data variable is file specific\nexport const getOrderDetails  = (id/*this is not the entire object, just an order id*/\n\n\n  }\n   catch(error){\n     dispatch({type:ORDER_PAY_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\nexport const merchantCreditOrder  = (orderId) => async (dispatch,getState) =>{\n  //form of async (dispatch) above\n    try {\n      dispatch({type: ORDER_MERCHANT_CREDIT_REQUEST})\n  \n       const {userLogin:{userInfo}} = getState()\n      //we do config cus we wanna send he headers a content type of application/json\n      const config = {\n        headers:{\n          'Content-Type':'application/json',\n          Authorization:`Bearer ${userInfo.token}`\n        }\n      }\n      const {data} = await axios.put(`/api/orders/${orderId}/paymerchants`,{},config)\n      //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n  \n      dispatch({\n                type: ORDER_MERCHANT_CREDIT_SUCCESS,\n                payload:data\n              })/*this data variable is file specific\n  export const getOrderDetails  = (id/*this is not the entire object, just an order id*/\n  \n  \n    }\n     catch(error){\n       dispatch({type:ORDER_MERCHANT_CREDIT_FAILURE,\n                 payload: error.response && error.response.data.message?\n                  error.response.data.message:error.message })\n     }\n  }\n\n\n\nexport const insufficientFundsOrder  = (orderId) => async (dispatch,getState) =>{\n  //form of async (dispatch) above\n    try {\n      dispatch({type: ORDER_INSUFFICIENT_REQUEST})\n  \n       const {userLogin:{userInfo}} = getState()\n      //we do config cus we wanna send he headers a content type of application/json\n      const config = {\n        headers:{\n          'Content-Type':'application/json',\n          Authorization:`Bearer ${userInfo.token}`\n        }\n      }\n      const {data} = await axios.put(`/api/orders/${orderId}/funds`,{},config)\n      //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n  \n      dispatch({\n                type: ORDER_INSUFFICIENT_SUCCESS,\n                payload:data\n              })/*this data variable is file specific\n  export const getOrderDetails  = (id/*this is not the entire object, just an order id*/\n  \n  \n    }\n     catch(error){\n       dispatch({type:ORDER_INSUFFICIENT_FAILURE,\n                 payload: error.response && error.response.data.message?\n                  error.response.data.message:error.message })\n     }\n  }\n\n\nexport const deliverOrder  = (order) => async (dispatch,getState)=> {\n//form of async (dispatch) above\n  try {\n    dispatch({type: ORDER_DELIVER_REQUEST})\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    const config = {\n      headers:{\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }\n    const {data} = await axios.put(`/api/orders/${order._id}/deliver`,{},config)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: ORDER_DELIVER_SUCCESS,\n              payload:data\n            })/*this data variable is file specific*/\n\n\n\n  }\n   catch(error){\n     dispatch({type:ORDER_DELIVER_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\nexport const listMyOrders  = () => async (dispatch,getState)=> {\n//form of async (dispatch) above\n  try {\n    dispatch({type: ORDER_LIST_MY_REQUEST})\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    const config = {\n      headers:{\n\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    } \n    const {data} = await axios.get(`/api/orders/myorders`,config)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: ORDER_LIST_MY_SUCCESS,\n              payload:data /*this data variable is file specific*/\n\n\n\n    })\n  }\n   catch(error){\n     dispatch({type:ORDER_LIST_MY_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\nexport const listOrders  = (vendorName=''/*try a reg ex of all allowable characters, not just an empty object */) => async (dispatch,getState)=> {\n//form of async (dispatch) above\n  try {\n    dispatch({type: ORDER_LIST_REQUEST})\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    const config = {\n      headers:{\n\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }\n    const {data} = await axios.get(`/api/orders?vendorName=${vendorName}`,config)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: ORDER_LIST_SUCCESS,\n              payload:data /*this data variable is file specific*/\n\n\n\n    })\n  }\n   catch(error){\n     dispatch({type:ORDER_LIST_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\n\nexport const listUnpaidOrders  = () => async (dispatch,getState)=> {\n  //form of async (dispatch) above\n    try {\n      dispatch({type: UNPAID_ORDER_LIST_REQUEST})\n  \n       const {userLogin:{userInfo}} = getState()\n      //we do config cus we wanna send he headers a content type of application/json\n      const config = {\n        headers:{\n  \n          Authorization:`Bearer ${userInfo.token}`\n        }\n      }\n      const {data} = await axios.get(`/api/orders/unpaidorders`,config)\n      //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n  \n      dispatch({\n                type: UNPAID_ORDER_LIST_SUCCESS,\n                payload:data /*this data variable is file specific*/\n  \n  \n  \n      })\n    }\n     catch(error){\n       dispatch({type:UNPAID_ORDER_LIST_FAILURE,\n                 payload: error.response && error.response.data.message?\n                  error.response.data.message:error.message })\n     }\n  }\n\n\nexport const merchantApproveOrder  = (orderId,productId,updatedQty) => async (dispatch,getState)=> {\n  //redux thunk was used just now in the form of async (dispatch) above\n try {\n   dispatch({type: ORDER_APPROVE_REQUEST})\n\n    const {userLogin:{userInfo}} = getState()\n   //we do config cus we wanna send he headers a content type of application/json\n   const config = {\n     headers:{\n       'Content-Type':'application/json',\n       Authorization:`Bearer ${userInfo.token}`\n     }\n   }\n   const {data} = await axios.put(`/api/orders`,{orderId,productId,updatedQty},config)\n   //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n   dispatch({\n             type: ORDER_APPROVE_SUCCESS,\n             payload:data })\n\n }\n  catch(error){\n    dispatch({type:ORDER_APPROVE_FAILURE,\n              payload: error.response && error.response.data.message?\n               error.response.data.message:error.message })\n  }\n}\n\n\nexport const merchantLockOrder  = (order) => async (dispatch,getState)=> {\n  //redux thunk was used just now in the form of async (dispatch) above\n try {\n   dispatch({type: ORDER_CREATE_REQUEST})\n\n    const {userLogin:{userInfo}} = getState()\n   //we do config cus we wanna send he headers a content type of application/json\n   const config = {\n     headers:{\n       'Content-Type':'application/json',\n       Authorization:`Bearer ${userInfo.token}`\n     }\n   }\n   const {data} = await axios.post(`/api/orders`,order,config)\n   //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n   dispatch({\n             type: ORDER_CREATE_SUCCESS,\n             payload:data })\n\n }\n  catch(error){\n    dispatch({type:ORDER_CREATE_FAILURE,\n              payload: error.response && error.response.data.message?\n               error.response.data.message:error.message })\n  }\n}","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/productComponent.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/ProductCarousel.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/components/Rating.js",[],"/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/TransactionScreen.js",["234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257"],"import React, {useEffect, useState} from 'react'\nimport axios from 'axios'\nimport {Link} from 'react-router-dom'\nimport {LinkContainer} from 'react-router-bootstrap'\nimport {PayPalButton} from 'react-paypal-button-v2'\nimport { Button, Row ,Col ,Form, ListGroup, Image, Card, ListGroupItem} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\n//import {getUserDetails, updateUserProfile} from '../actions/userActions.js'\nimport {getOrderDetails,payOrder,merchantCreditOrder,deliverOrder,merchantApproveOrder,insufficientFundsOrder/*,merchantLockOrder*/} from '../actions/orderActions.js'\nimport Loader from '../components/Loader.js'\nimport {ORDER_PAY_RESET,ORDER_DELIVER_RESET } from '../constants/orderConstants.js'  //HE MADE AN EXCEPTION HERE DISPATCHING STRAIGHT FROM CONSTANTS WITHOUT CALLING ACTIONS, TO MAKE THINGS FASTER\n\n\nconst TransactionScreen =  ({match,history}) => {\n     const [sdkReady,setSdkReady] = useState('false') // this is our piece of local state for when the SDK is ready\n\n\n\n   const orderId = match.params.id\n   const dispatch = useDispatch()\n  //const cart = useSelector(state => state.cart) come back and check why you commented this out\n\n const [merchantProductsArray,setMerchantProductsArray] = useState('') /*i never actually change the state of this */\n const [promisedQtyArray,setPromisedQtyArray] = useState('')\n const [committedValue, setCommittedValue] = useState('')\n const [productId,setProductId] = useState('')\n const [highlight,setHighlight] = useState('13px')\n const [colour, setColour] = useState('black')\n  const orderDetails = useSelector((state) => state.orderDetails )\n  const {order,loading,error} = orderDetails\n   console.log(order)\n  \n \n\n   \n\n   const userLogin = useSelector((state) => state.userLogin )\n  const {userInfo} = userLogin\n\n  const orderPay = useSelector((state) => state.orderPay )\n  const {loading:loadingPay, success:successPay} = orderPay //this is renaming what you destructured, not making a new object\n\n  const orderInsufficientFunds = useSelector((state) => state.insufficientFundsOrder )\n  const {loading:loadingInsufficient, success:successInsufficient} = orderInsufficientFunds\n\n\n   const merchantCreditForOrder =useSelector((state) => state.merchantCreditOrder)\n    const {loading:loadingCredit, success:successCredit} = merchantCreditForOrder\n\n  const orderDeliver = useSelector((state) => state.orderDeliver )\n  const {loading:loadingDeliver, success:successDeliver} = orderDeliver\n\nif(!loading){\n  //calculating the prices for orders\n const addDecimals = (num) => { return(Math.round(num*100)/100).toFixed(2) }\n\n order.itemsPrice = addDecimals(order.orderItems.reduce((acc, item)=>acc +item.price*item.qty,0))\n order.promisedQtyArray = promisedQtyArray\n order.merchantProductsArray = merchantProductsArray\n /*order.initalState = order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item) => (item.promisedQty))*/\n}\n\n const initialState = function(order,item){\n  const vendorArray = order.orderItems.filter((item) => (item.vendor === userInfo.name))\n  setMerchantProductsArray(vendorArray)\n  const promisedArray =  order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item) => (promisedQtyArray[vendorArray.indexOf(item)]))\n  setPromisedQtyArray(promisedArray)\n  console.log(typeof(promisedQtyArray),promisedQtyArray)\n }\n\n\n\n const liveUpdate =function(e,item){\n   /*const vendorArray = order.orderItems.filter((item) => (item.vendor === userInfo.name))\n    setMerchantProductsArray(vendorArray)*/\n/*const copyArray =  order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item) => (item.promisedQty)) /*i need to call this ONCE,not everytime the function is called so bring it out of this function */\n             const copyArray = promisedQtyArray         \n         copyArray[merchantProductsArray.indexOf(item)] = Number(e.target.value)\n    \n                     setPromisedQtyArray(copyArray)\n                     /*console.log(promisedQtyArray,merchantProductsArray)*/\n                     console.log(copyArray,promisedQtyArray)\n                    }\n\n//AN ARRAY TO CORRESPOND WITH THE LENGTH THE VENDORS ITEMS THAT ARE DISPLAYED ON SCREEN, SO WE CAN EASILY CHANGE ITEM AMOUNTS ON SCREEN\n/*let promisedQtyArray = order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item, index) =>(\n  0\n))*/\n\n//AN ARRAY TO FILTER ORDER ITEMS THAT HAVE A PARTICULAR VENDOR, TO HELP US PICK promisedQtyArray element, in the order items  \n/*const merchantProductsArray =  order.orderItems.filter((item) => (item.vendor === userInfo.name))*/\n\n/*useEffect(()=>{\n  if(!order){promisedArray = []}\n  else{ promisedArray =  order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item) => (item.promisedQty))\nsetPromisedQtyArray(promisedArray)}\n\n  if(!order){vendorArray =[]}\n  else{vendorArray=order.orderItems.filter((item) => (item.vendor === userInfo.name))}\n  setMerchantProductsArray(vendorArray)\n  \n\n},[order,promisedArray,vendorArray])*/\n\n\n\n\n\nuseEffect(()=> { \n       if(!userInfo){\n         history.push('/login')\n       }\n      \n       /*setPromisedQtyArray(order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item, index) =>(\n        0\n      ))) \n       setMerchantProductsArray(order.orderItems.filter((item) => (item.vendor === userInfo.name)))*/\n       if(!order){ dispatch(getOrderDetails(orderId)) }\n  \n       const addPayPalScript = async () => {\n    const {data:clientId} = await axios.get('/api/config/paypal')\n    const script = document.createElement('script') //this script being created will not be in the source code, cuz it comes to life AFTER the source code loads\n    script.type ='text/javascript'\n    document.body.appendChild(script)\n    script.async=true\n    script.onload =()=> {  \n        setSdkReady(true)\n    }\n    script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}` //this is the software development kit that paypal gives us\n    \n  }\n \n\n\n  /*if(!order||successPay||successDeliver){\n    dispatch({type:ORDER_PAY_RESET})\n    dispatch({type:ORDER_DELIVER_RESET})  //AGAIN HE MADE AN EXCEPTION HERE AND DISPATCHED STRAIGHT FROM CONSTANTS SO HE CAN KEEP IT SHORT\n\n    }\n\n  else if(!order.isPaid){\n    if(!window.paypal){\n      addPayPalScript()\n    }\n    else{ setSdkReady(true) }\n  }*/\n},[dispatch,orderId,order,history,userInfo])\n\n/*const successPaymentHandler = (paymentResult) => {\n   console.log(paymentResult)\n  dispatch(payOrder(orderId, paymentResult))\n\n}*/\n\nconst paidToggleHandler = (e)=> {\n     e.preventDefault()\n  dispatch(payOrder(order._id))\n}\n\nconst merchantCreditToggleHandler = (e)=> {\n  e.preventDefault()\ndispatch(merchantCreditOrder(order._id))\n}\n\n\n\nconst insufficientFundsHandler = (e)=> {\n  e.preventDefault()\ndispatch(insufficientFundsOrder(order._id))\n}\n\n\nconst deliverHandler = ()=> {\n  dispatch(deliverOrder(order))\n}\n\nconst submitHandler = (e) => {\n    e.preventDefault()\n    if( promisedQtyArray==='' ){window.alert('please select a value before committing!')}\n    else if(typeof((promisedQtyArray.reduce((acc, item)=>acc +item,0)))!=='number'){window.alert('You cannot commit zero,please contact admin if you are out of stock')}\n    else{dispatch(merchantApproveOrder(order._id, productId, committedValue))}\n}\n /*is there a factor of 18/19 to consider for, --yes */\n/*const merchantTotal = order.orderItems.filter((item) => (item.vendor === userInfo.name)).reduce((acc, item)=>acc +(item.price*item.qty),0)*/\n\n        return loading ?( <Loader/> ):error ?( <Message variant='danger'>{error} </Message>):\n(<>\n\n    <h1>Order ID: {order._id}</h1>\n    <Row>\n     \n\n     <Col md={12}>\n    \n         \n         \n       \n{/*!order.isPaid && (\n            <ListGroup.Item>\n             {loadingPay && <Loader/>}\n             {!sdkReady ?<Loader/> :(<PayPalButton amount ={order.totalPrice} onSuccess={successPaymentHandler}/>)  }\n            </ListGroup.Item>\n          )*/}\n      \n\n       { <Card>\n          <ListGroup variant='flush'>\n           <ListGroup.Item>\n            <Row>\n              <Col md ={8}>\n            <h2>Teller Transaction{order.isDelivered?\" Performed\":\" Instructions\"}</h2>\n             </Col>\n            {order && !order.isPaid &&  <Col md ={4}>\n               \n                <Button type='button' variant='primary' onClick={insufficientFundsHandler}> INSUFFICIENT FUNDS </Button>\n               \n             </Col>\n           }\n\n            </Row>\n            { order && !order.isPaid && successInsufficient && !successPay && <Row>\n            <Message variant='warning'>Inusufficient Funding in {`${order.user.name}'s`} account, remember to try again later </Message>\n\n            </Row>}\n           </ListGroup.Item>\n\n          {order.isPaid && <ListGroup.Item>\n            <p style={{color:'red'}}>NOTE: THESE TRANSACTIONS ARE TO BE CARRIED OUT ON BANK ONE </p>\n            \n            <p>1.) IF THE DEBIT CANNOT BE PERFORMED, PLEASE SELECT 'INSUFFICIENT FUNDS' </p>\n            <p> 2.)   MESSAGE THE ADMIN TO COMMUNICATE THAT THE CLIENT HAD INSUFFICIENT FUNDS</p>\n            <p>3.)  IF THE DEBIT IS SUCCESSFUL, CLICK  'CHANGE PAYMENT STATUS' .</p>\n            <p>4.) YOU MAY CHANGE PAYMENT STATUS AS MUCH AS YOU LIKE, UNTIL YOU ARE READY TO LEAVE THE PAGE.</p>\n            <p>5.) IF YOU LEAVE THIS PAGE WITH THE PAYMENT STATUS SET TO PAID, YOU WILL NOT BE ALLOWED TO RETURN, </p>\n            <p>    AND A SIGNAL WILL BE SENT TO THE ADMIN THAT YOU HAVE SUCCESSFULLY PERFORMED THE ABOVE TRANSACTION(S) </p>\n           </ListGroup.Item>}\n\n\n           <ListGroup.Item>\n            <Row>\n\n             <Col>Account Name </Col>\n             <Col>Account Number </Col>\n             <Col>Transaction Type </Col> \n             <Col>Amount</Col>\n\n            </Row>\n           </ListGroup.Item>\n\n\n           {!order.isPaid && \n           \n            <>\n           <ListGroup.Item>\n            <Row>\n\n             <Col>{order.user.name} </Col>\n             \n             <Col>1200000898 </Col>\n             <Col>DEBIT </Col>\n             <Col>₦ {(order.itemsPrice * (1) ).toFixed(2)} </Col>\n\n            </Row>\n           </ListGroup.Item>\n\n           <ListGroup.Item>\n            <Row style ={{color:'red'}}> \n\n             <Col>TOTAL DEBIT: </Col>\n             <Col> </Col>\n             <Col> </Col>\n             <Col>₦ {(order.totalPrice).toFixed(2)} </Col>\n\n            </Row>\n           </ListGroup.Item>\n           </>}\n\n\n\n\n           <ListGroup.Item>\n            <Row>\n\n             <Col> </Col>\n             \n             <Col></Col>\n             <Col></Col>\n             <Col> </Col>\n\n            </Row>\n           </ListGroup.Item>\n\n           {order.isPaid && <ListGroup.Item>\n            <Row>\n\n             <Col>BridgeWay Co-operative: </Col>\n             \n             <Col>1200000898 </Col>\n             <Col>CREDIT </Col>\n             <Col>₦ {(order.itemsPrice * (1/19) ).toFixed(2)} </Col>\n\n            </Row>\n           </ListGroup.Item>}\n\n           \n      {order.isPaid && order.orderItems.map((item, index) =>(\n            <ListGroup.Item  key ={index}>\n            <Row>\n\n             <Col> {index + 1}. {item.vendor}:  </Col>\n             <Col>{'000000000'}</Col>\n             <Col>CREDIT</Col>\n             <Col>₦ {((18/19) * item.price).toFixed(2) * item.qty } </Col>\n\n            </Row>\n           </ListGroup.Item>\n           ))}\n      \n      {/*<ListGroup.Item>\n            <Row>\n\n             <Col> dispatch rider: </Col>\n             <Col></Col>\n             <Col></Col>\n             \n             <Col>₦ {(Number(order.deliveryCost)).toFixed(2)} </Col>\n\n            </Row>\n      </ListGroup.Item>*/}\n\n        {order.isPaid && <ListGroup.Item>\n            <Row style ={{color:'red'}}>\n\n             <Col>TOTAL CREDIT: </Col>\n             <Col> </Col>\n             <Col> </Col>\n             <Col>₦ {(order.totalPrice).toFixed(2)} </Col>\n\n            </Row>\n           </ListGroup.Item>}\n      \n           \n          {/*!order.isPaid && (\n            <ListGroup.Item>\n             {loadingPay && <Loader/>}\n             {!sdkReady ?<Loader/> :(<PayPalButton amount ={order.totalPrice} onSuccess={successPaymentHandler}/>)  }\n            </ListGroup.Item>\n          )*/}\n\n\n\n\n\n\n       \n        \n       \n       {<center>\n         <ListGroup > \n      <ListGroup.Item > \n        \n    \n\n  <LinkContainer to={`/communications?specificOrderId=${order._id}`}>\n  <Button type='submit' variant='primary'> CLICK TO MESSAGE ADMIN </Button>\n  </LinkContainer>\n     \n    \n    </ListGroup.Item>\n    </ListGroup>\n    </center>}\n\n\n\n       \n       {!order.isPaid &&\n       \n      ( <center>\n         <ListGroup > \n      <ListGroup.Item > \n        \n       <Button type='button' variant='primary' onClick={paidToggleHandler}> CHANGE TRANSACTION STATUS </Button>\n    \n     </ListGroup.Item>\n     </ListGroup>\n    </center>)}\n\n    \n    {order.isPaid && (new Date(order.paidAt) <= new Date(new Date().getTime() - 10 * 60 * 1000)) && !order.merchantsCredited &&\n       \n       ( <center>\n          <ListGroup > \n       <ListGroup.Item > \n         \n        <Button type='button' variant='primary' onClick={merchantCreditToggleHandler}> CHANGE TRANSACTION STATUS </Button>\n          \n      </ListGroup.Item>\n      </ListGroup>\n     </center>)\n     }\n \n\n\n\n  \n   { <center>\n         <ListGroup > \n      <ListGroup.Item > \n    {/*message && <Message variant='danger'>{message}</Message>*/}\n        {error && <Message variant='danger'>{error}</Message>}\n       {order && !order.isPaid && successInsufficient &&  !successPay && <Message variant='warning'>Inusufficient Funding in {`${order.user.name}'s`} account, remember to try again later </Message>} \n       {order && !order.isPaid && ( \n         successPay ? <Message variant='success'>Order marked as Paid</Message>:\n         <Message variant='danger'>Order NOT Paid</Message>\n        )\n        }\n        {order && order.isPaid && (new Date(order.paidAt) < new Date(new Date().getTime() - /* 48 * 60*/10 * 60 * 1000))  && !order.merchantsCredited ?(\n        successCredit? <Message variant='success'>All merchants credited.</Message>:\n          <Message variant='danger'>transacations not carried out</Message>\n      \n         ):<Message variant='success'>All merchants credited.</Message>\n          }\n        \n        {loading && <Loader/>}\n        </ListGroup.Item>\n    </ListGroup>\n\n        </center>}\n\n\n         </ListGroup>\n       </Card>}\n     </Col>\n    </Row>\n   \n   \n\n</>)\n}\n\n\nexport default TransactionScreen;\n","/home/dagogo/Desktop/bridgeway/bridgeway-market/frontend/src/screens/TransactionListScreen.js",[],{"ruleId":"258","replacedBy":"259"},{"ruleId":"260","replacedBy":"261"},{"ruleId":"262","severity":1,"message":"263","line":35,"column":10,"nodeType":"264","messageId":"265","endLine":35,"endColumn":17},{"ruleId":"262","severity":1,"message":"266","line":35,"column":18,"nodeType":"264","messageId":"265","endLine":35,"endColumn":23},{"ruleId":"262","severity":1,"message":"263","line":19,"column":10,"nodeType":"264","messageId":"265","endLine":19,"endColumn":17},{"ruleId":"262","severity":1,"message":"266","line":19,"column":18,"nodeType":"264","messageId":"265","endLine":19,"endColumn":23},{"ruleId":"262","severity":1,"message":"263","line":20,"column":10,"nodeType":"264","messageId":"265","endLine":20,"endColumn":17},{"ruleId":"262","severity":1,"message":"266","line":20,"column":18,"nodeType":"264","messageId":"265","endLine":20,"endColumn":23},{"ruleId":"262","severity":1,"message":"267","line":40,"column":9,"nodeType":"264","messageId":"265","endLine":40,"endColumn":17},{"ruleId":"268","severity":1,"message":"269","line":48,"column":4,"nodeType":"270","endLine":48,"endColumn":41,"suggestions":"271"},{"ruleId":"272","severity":1,"message":"273","line":55,"column":29,"nodeType":"274","messageId":"275","endLine":55,"endColumn":31},{"ruleId":"272","severity":1,"message":"273","line":55,"column":42,"nodeType":"274","messageId":"275","endLine":55,"endColumn":44},{"ruleId":"262","severity":1,"message":"276","line":19,"column":9,"nodeType":"264","messageId":"265","endLine":19,"endColumn":15},{"ruleId":"262","severity":1,"message":"263","line":28,"column":10,"nodeType":"264","messageId":"265","endLine":28,"endColumn":17},{"ruleId":"262","severity":1,"message":"266","line":28,"column":19,"nodeType":"264","messageId":"265","endLine":28,"endColumn":24},{"ruleId":"262","severity":1,"message":"277","line":33,"column":18,"nodeType":"264","messageId":"265","endLine":33,"endColumn":31},{"ruleId":"262","severity":1,"message":"278","line":33,"column":39,"nodeType":"264","messageId":"265","endLine":33,"endColumn":50},{"ruleId":"268","severity":1,"message":"279","line":60,"column":5,"nodeType":"270","endLine":60,"endColumn":15,"suggestions":"280"},{"ruleId":"281","severity":1,"message":"282","line":151,"column":42,"nodeType":"283","messageId":"284","endLine":151,"endColumn":43},{"ruleId":"281","severity":1,"message":"282","line":151,"column":46,"nodeType":"283","messageId":"284","endLine":151,"endColumn":47},{"ruleId":"262","severity":1,"message":"285","line":9,"column":8,"nodeType":"264","messageId":"265","endLine":9,"endColumn":21},{"ruleId":"262","severity":1,"message":"267","line":27,"column":9,"nodeType":"264","messageId":"265","endLine":27,"endColumn":17},{"ruleId":"268","severity":1,"message":"286","line":60,"column":3,"nodeType":"270","endLine":60,"endColumn":47,"suggestions":"287"},{"ruleId":"268","severity":1,"message":"288","line":84,"column":4,"nodeType":"270","endLine":84,"endColumn":86,"suggestions":"289"},{"ruleId":"262","severity":1,"message":"290","line":5,"column":9,"nodeType":"264","messageId":"265","endLine":5,"endColumn":21},{"ruleId":"262","severity":1,"message":"291","line":16,"column":13,"nodeType":"264","messageId":"265","endLine":16,"endColumn":21},{"ruleId":"262","severity":1,"message":"292","line":28,"column":19,"nodeType":"264","messageId":"265","endLine":28,"endColumn":31},{"ruleId":"262","severity":1,"message":"293","line":29,"column":17,"nodeType":"264","messageId":"265","endLine":29,"endColumn":26},{"ruleId":"262","severity":1,"message":"294","line":42,"column":18,"nodeType":"264","messageId":"265","endLine":42,"endColumn":28},{"ruleId":"262","severity":1,"message":"295","line":145,"column":7,"nodeType":"264","messageId":"265","endLine":145,"endColumn":28},{"ruleId":"262","severity":1,"message":"296","line":4,"column":59,"nodeType":"264","messageId":"265","endLine":4,"endColumn":70},{"ruleId":"262","severity":1,"message":"263","line":19,"column":11,"nodeType":"264","messageId":"265","endLine":19,"endColumn":18},{"ruleId":"262","severity":1,"message":"297","line":19,"column":25,"nodeType":"264","messageId":"265","endLine":19,"endColumn":31},{"ruleId":"262","severity":1,"message":"298","line":25,"column":19,"nodeType":"264","messageId":"265","endLine":25,"endColumn":27},{"ruleId":"262","severity":1,"message":"299","line":28,"column":16,"nodeType":"264","messageId":"265","endLine":28,"endColumn":23},{"ruleId":"268","severity":1,"message":"300","line":100,"column":5,"nodeType":"270","endLine":100,"endColumn":89,"suggestions":"301"},{"ruleId":"262","severity":1,"message":"302","line":13,"column":9,"nodeType":"264","messageId":"265","endLine":13,"endColumn":36},{"ruleId":"262","severity":1,"message":"303","line":3,"column":9,"nodeType":"264","messageId":"265","endLine":3,"endColumn":13},{"ruleId":"262","severity":1,"message":"290","line":5,"column":9,"nodeType":"264","messageId":"265","endLine":5,"endColumn":21},{"ruleId":"262","severity":1,"message":"304","line":6,"column":28,"nodeType":"264","messageId":"265","endLine":6,"endColumn":32},{"ruleId":"262","severity":1,"message":"305","line":6,"column":45,"nodeType":"264","messageId":"265","endLine":6,"endColumn":50},{"ruleId":"262","severity":1,"message":"306","line":6,"column":58,"nodeType":"264","messageId":"265","endLine":6,"endColumn":71},{"ruleId":"262","severity":1,"message":"307","line":12,"column":9,"nodeType":"264","messageId":"265","endLine":12,"endColumn":24},{"ruleId":"262","severity":1,"message":"308","line":12,"column":25,"nodeType":"264","messageId":"265","endLine":12,"endColumn":44},{"ruleId":"262","severity":1,"message":"291","line":16,"column":13,"nodeType":"264","messageId":"265","endLine":16,"endColumn":21},{"ruleId":"262","severity":1,"message":"309","line":26,"column":25,"nodeType":"264","messageId":"265","endLine":26,"endColumn":42},{"ruleId":"262","severity":1,"message":"310","line":27,"column":19,"nodeType":"264","messageId":"265","endLine":27,"endColumn":31},{"ruleId":"262","severity":1,"message":"311","line":28,"column":9,"nodeType":"264","messageId":"265","endLine":28,"endColumn":18},{"ruleId":"262","severity":1,"message":"292","line":28,"column":19,"nodeType":"264","messageId":"265","endLine":28,"endColumn":31},{"ruleId":"262","severity":1,"message":"312","line":29,"column":9,"nodeType":"264","messageId":"265","endLine":29,"endColumn":15},{"ruleId":"262","severity":1,"message":"293","line":29,"column":17,"nodeType":"264","messageId":"265","endLine":29,"endColumn":26},{"ruleId":"262","severity":1,"message":"294","line":42,"column":18,"nodeType":"264","messageId":"265","endLine":42,"endColumn":28},{"ruleId":"262","severity":1,"message":"313","line":45,"column":18,"nodeType":"264","messageId":"265","endLine":45,"endColumn":37},{"ruleId":"262","severity":1,"message":"314","line":49,"column":20,"nodeType":"264","messageId":"265","endLine":49,"endColumn":33},{"ruleId":"262","severity":1,"message":"315","line":52,"column":18,"nodeType":"264","messageId":"265","endLine":52,"endColumn":32},{"ruleId":"262","severity":1,"message":"316","line":52,"column":42,"nodeType":"264","messageId":"265","endLine":52,"endColumn":56},{"ruleId":"262","severity":1,"message":"317","line":64,"column":8,"nodeType":"264","messageId":"265","endLine":64,"endColumn":20},{"ruleId":"262","severity":1,"message":"318","line":74,"column":8,"nodeType":"264","messageId":"265","endLine":74,"endColumn":18},{"ruleId":"262","severity":1,"message":"319","line":121,"column":14,"nodeType":"264","messageId":"265","endLine":121,"endColumn":29},{"ruleId":"262","severity":1,"message":"320","line":174,"column":7,"nodeType":"264","messageId":"265","endLine":174,"endColumn":21},{"ruleId":"262","severity":1,"message":"321","line":178,"column":7,"nodeType":"264","messageId":"265","endLine":178,"endColumn":20},"no-native-reassign",["322"],"no-negated-in-lhs",["323"],"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'redirect' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.","ArrayExpression",["324"],"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","'seller' is assigned a value but never used.","'loadingOrders' is assigned a value but never used.","'errorOrders' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["325"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'FormContainer' is defined but never used.","React Hook useEffect has a missing dependency: 'userInfo'. Either include it or remove the dependency array.",["326"],"React Hook useEffect has a missing dependency: 'vendorName'. Either include it or remove the dependency array.",["327"],"'PayPalButton' is defined but never used.","'sdkReady' is assigned a value but never used.","'setHighlight' is assigned a value but never used.","'setColour' is assigned a value but never used.","'loadingPay' is assigned a value but never used.","'successPaymentHandler' is assigned a value but never used.","'FormControl' is defined but never used.","'error2' is assigned a value but never used.","'loading1' is assigned a value but never used.","'success' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["328"],"'ORDER_MERCHANT_CREDIT_RESET' is defined but never used.","'Link' is defined but never used.","'Form' is defined but never used.","'Image' is defined but never used.","'ListGroupItem' is defined but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.","'setCommittedValue' is assigned a value but never used.","'setProductId' is assigned a value but never used.","'highlight' is assigned a value but never used.","'colour' is assigned a value but never used.","'loadingInsufficient' is assigned a value but never used.","'loadingCredit' is assigned a value but never used.","'loadingDeliver' is assigned a value but never used.","'successDeliver' is assigned a value but never used.","'initialState' is assigned a value but never used.","'liveUpdate' is assigned a value but never used.","'addPayPalScript' is assigned a value but never used.","'deliverHandler' is assigned a value but never used.","'submitHandler' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},{"desc":"337","fix":"338"},"Update the dependencies array to be: [dispatch, history, match, successProductReview, userInfo]",{"range":"339","text":"340"},"Update the dependencies array to be: [dispatch, userInfo]",{"range":"341","text":"342"},"Update the dependencies array to be: [dispatch, user, userId, history, successUpdate, userInfo]",{"range":"343","text":"344"},"Update the dependencies array to be: [dispatch, history, userInfo, successDelete, successCreate, createdProduct, pageNumber, vendorName]",{"range":"345","text":"346"},"Update the dependencies array to be: [confirmedState, confirmedStates, userInfo, dispatch, cart, history]",{"range":"347","text":"348"},[1606,1643],"[dispatch, history, match, successProductReview, userInfo]",[2322,2332],"[dispatch, userInfo]",[1973,2017],"[dispatch, user, userId, history, successUpdate, userInfo]",[2433,2515],"[dispatch, history, userInfo, successDelete, successCreate, createdProduct, pageNumber, vendorName]",[3566,3650],"[confirmedState, confirmedStates, userInfo, dispatch, cart, history]"]